ARBORESCENCE DU PROJET PIANO-SOLO-B 20250815
==================================================

└── piano-soloB
    ├── admin-config.json
    ├── admin.php
    ├── check-libraries.php
    ├── check-test-demos.php
    ├── clean-demos.php
    ├── clean-libraries.php
    ├── cleanup-demos.php
    ├── delete-demo.php
    ├── demo-manager-api-simple.php
    ├── demo-manager-api.php
    ├── diagnostic.php
    ├── edit-display-names.php
    ├── fix-brouillon-index.php
    ├── fix-demo-names-dual-system.php
    ├── fix-demo-names.php
    ├── index-admin.php
    ├── index.php
    ├── migrate-to-dual-system-robust.php
    ├── upload-demo.php
    ├── videos
    │   └── sample.mp4
    ├── samples
    │   ├── harmonium
    │   │   ├── harmonium_A3.mp3
    │   │   ├── harmonium_A4.mp3
    │   │   ├── harmonium_A5.mp3
    │   │   ├── harmonium_As3.mp3
    │   │   ├── harmonium_As4.mp3
    │   │   ├── harmonium_As5.mp3
    │   │   ├── harmonium_B3.mp3
    │   │   ├── harmonium_B4.mp3
    │   │   ├── harmonium_B5.mp3
    │   │   ├── harmonium_C3.mp3
    │   │   ├── harmonium_C4.mp3
    │   │   ├── harmonium_C5.mp3
    │   │   ├── harmonium_C6.mp3
    │   │   ├── harmonium_Cs3.mp3
    │   │   ├── harmonium_Cs4.mp3
    │   │   ├── harmonium_Cs5.mp3
    │   │   ├── harmonium_D3.mp3
    │   │   ├── harmonium_D4.mp3
    │   │   ├── harmonium_D5.mp3
    │   │   ├── harmonium_Ds3.mp3
    │   │   ├── harmonium_Ds4.mp3
    │   │   ├── harmonium_Ds5.mp3
    │   │   ├── harmonium_E3.mp3
    │   │   ├── harmonium_E4.mp3
    │   │   ├── harmonium_E5.mp3
    │   │   ├── harmonium_F3.mp3
    │   │   ├── harmonium_F4.mp3
    │   │   ├── harmonium_F5.mp3
    │   │   ├── harmonium_Fs3.mp3
    │   │   ├── harmonium_Fs4.mp3
    │   │   ├── harmonium_Fs5.mp3
    │   │   ├── harmonium_G3.mp3
    │   │   ├── harmonium_G4.mp3
    │   │   ├── harmonium_G5.mp3
    │   │   ├── harmonium_Gs3.mp3
    │   │   ├── harmonium_Gs4.mp3
    │   │   └── harmonium_Gs5.mp3
    │   └── hamonium-paul-and-co
    │       ├── harmonium_A3.mp3
    │       ├── harmonium_A4.mp3
    │       ├── harmonium_A5.mp3
    │       ├── harmonium_As3.mp3
    │       ├── harmonium_As4.mp3
    │       ├── harmonium_As5.mp3
    │       ├── harmonium_B3.mp3
    │       ├── harmonium_B4.mp3
    │       ├── harmonium_B5.mp3
    │       ├── harmonium_C3.mp3
    │       ├── harmonium_C4.mp3
    │       ├── harmonium_C5.mp3
    │       ├── harmonium_C6.mp3
    │       ├── harmonium_Cs3.mp3
    │       ├── harmonium_Cs4.mp3
    │       ├── harmonium_Cs5.mp3
    │       ├── harmonium_D3.mp3
    │       ├── harmonium_D4.mp3
    │       ├── harmonium_D5.mp3
    │       ├── harmonium_Ds3.mp3
    │       ├── harmonium_Ds4.mp3
    │       ├── harmonium_Ds5.mp3
    │       ├── harmonium_E3.mp3
    │       ├── harmonium_E4.mp3
    │       ├── harmonium_E5.mp3
    │       ├── harmonium_F3.mp3
    │       ├── harmonium_F4.mp3
    │       ├── harmonium_F5.mp3
    │       ├── harmonium_Fs3.mp3
    │       ├── harmonium_Fs4.mp3
    │       ├── harmonium_Fs5.mp3
    │       ├── harmonium_G3.mp3
    │       ├── harmonium_G4.mp3
    │       ├── harmonium_G5.mp3
    │       ├── harmonium_Gs3.mp3
    │       ├── harmonium_Gs4.mp3
    │       └── harmonium_Gs5.mp3
    ├── includes
    │   ├── help-video-module.js
    │   ├── menu-dropdowns.php
    │   ├── menu-toolbar.php
    │   ├── piano-core.php
    │   ├── piano-demo-manager.php
    │   ├── piano-harmonium.php
    │   ├── piano-midi.php
    │   ├── piano-notation.php
    │   ├── piano-recorder.php
    │   ├── piano-save-upload.php
    │   └── js
    │       ├── demos-loader.js
    │       ├── menu-handlers.js
    │       └── module-manager.js
    └── demospubliques
        ├── demos.json
        ├── prayers
        │   └── index.json
        ├── brouillon
        │   ├── demo_demo_minuit_passe_1755128463_5_1755128918_f0105bd9be37b54a.json
        │   ├── demo_intro_01_1755168312_f993d265858e3997.json
        │   ├── demo_popo_1755164462_5267806be685aa9b.json
        │   └── index.json
        └── bhajans
            └── index.json



================================================================================
FICHIER: piano-soloB/admin-config.json
================================================================================
{
    "help": {
        "title": "Contact Muralidhar Das 06 13 58 96 41",
        "content": "Bienvenue dans l'aide de Piano Solo. Utilisez votre souris ou un clavier Midi (type Minilab d'occasion 30€)",
        "last_updated": "2025-08-14 00:00:53"
    },
    "video": {
        "title": "Tutoriel Piano Solo",
        "filename": "tutorial.mp4",
        "description": "Vidéo de présentation et tutoriel d'utilisation\r\nSatchitananda - Muralidhar Das 2025",
        "enabled": true
    }
}


================================================================================
FICHIER: piano-soloB/admin.php
================================================================================
<?php
/**
 * Page Admin - Gestion des informations HELP et vidéo
 * Piano Solo V1.2
 */

// Configuration de base
$configFile = 'admin-config.json';
$defaultConfig = [
    'help' => [
        'title' => 'Aide Piano Solo',
        'content' => 'Bienvenue dans l\'aide de Piano Solo. Utilisez les touches du clavier pour jouer.',
        'last_updated' => date('Y-m-d H:i:s')
    ],
    'video' => [
        'title' => 'Tutoriel Piano Solo',
        'filename' => 'tutorial.mp4',
        'description' => 'Vidéo de présentation et tutoriel d\'utilisation',
        'enabled' => true
    ]
];

// Charger ou créer la configuration
function loadConfig() {
    global $configFile, $defaultConfig;
    
    if (file_exists($configFile)) {
        $config = json_decode(file_get_contents($configFile), true);
        return array_merge($defaultConfig, $config);
    } else {
        // Créer le fichier de configuration par défaut
        file_put_contents($configFile, json_encode($defaultConfig, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        return $defaultConfig;
    }
}

// Sauvegarder la configuration
function saveConfig($config) {
    global $configFile;
    file_put_contents($configFile, json_encode($config, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}

// Traitement du formulaire
$message = '';
$messageType = '';

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $config = loadConfig();
    
    if (isset($_POST['action'])) {
        switch ($_POST['action']) {
            case 'save_help':
                $config['help']['title'] = $_POST['help_title'] ?? '';
                $config['help']['content'] = $_POST['help_content'] ?? '';
                $config['help']['last_updated'] = date('Y-m-d H:i:s');
                saveConfig($config);
                $message = 'Informations HELP sauvegardées avec succès !';
                $messageType = 'success';
                break;
                
            case 'save_video':
                $config['video']['title'] = $_POST['video_title'] ?? '';
                $config['video']['description'] = $_POST['video_description'] ?? '';
                $config['video']['enabled'] = isset($_POST['video_enabled']);
                
                // Gestion du upload de fichier vidéo
                if (isset($_FILES['video_file']) && $_FILES['video_file']['error'] === UPLOAD_ERR_OK) {
                    $uploadDir = 'videos/';
                    if (!is_dir($uploadDir)) {
                        mkdir($uploadDir, 0755, true);
                    }
                    
                    $fileInfo = pathinfo($_FILES['video_file']['name']);
                    $extension = strtolower($fileInfo['extension']);
                    
                    // Vérifier que c'est bien une vidéo MP4
                    if ($extension === 'mp4') {
                        $newFilename = 'tutorial_' . time() . '.mp4';
                        $uploadPath = $uploadDir . $newFilename;
                        
                        if (move_uploaded_file($_FILES['video_file']['tmp_name'], $uploadPath)) {
                            $config['video']['filename'] = $newFilename;
                            $message = 'Vidéo uploadée et configuration sauvegardée !';
                            $messageType = 'success';
                        } else {
                            $message = 'Erreur lors de l\'upload de la vidéo.';
                            $messageType = 'error';
                        }
                    } else {
                        $message = 'Seuls les fichiers MP4 sont acceptés.';
                        $messageType = 'error';
                    }
                } else {
                    saveConfig($config);
                    $message = 'Configuration vidéo sauvegardée !';
                    $messageType = 'success';
                }
                break;
        }
    }
}

$config = loadConfig();
?>

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Piano Solo V1.2</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .admin-container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }
        
        .admin-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .admin-header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .admin-header p {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .admin-content {
            padding: 30px;
        }
        
        .admin-section {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 30px;
            border-left: 4px solid #667eea;
        }
        
        .admin-section h2 {
            color: #667eea;
            margin-bottom: 20px;
            font-size: 1.5em;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }
        
        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }
        
        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .checkbox-group input[type="checkbox"] {
            width: 18px;
            height: 18px;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        
        .btn-secondary {
            background: #6c757d;
        }
        
        .btn-success {
            background: #28a745;
        }
        
        .message {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            font-weight: 500;
        }
        
        .message.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .message.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .video-preview {
            background: #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-top: 15px;
            text-align: center;
        }
        
        .video-preview video {
            max-width: 100%;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .file-upload {
            border: 2px dashed #667eea;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            background: #f8f9ff;
            transition: all 0.3s ease;
        }
        
        .file-upload:hover {
            background: #e8f0ff;
            border-color: #5a6fd8;
        }
        
        .file-upload input[type="file"] {
            display: none;
        }
        
        .file-upload label {
            cursor: pointer;
            color: #667eea;
            font-weight: 600;
        }
        
        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            color: #667eea;
            text-decoration: none;
            font-weight: 500;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
        
        .help-preview {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 20px;
            margin-top: 15px;
        }
        
        .help-preview h3 {
            color: #667eea;
            margin-bottom: 10px;
        }
        
        @media (max-width: 768px) {
            .admin-container {
                margin: 10px;
                border-radius: 10px;
            }
            
            .admin-header {
                padding: 20px;
            }
            
            .admin-header h1 {
                font-size: 2em;
            }
            
            .admin-content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <div class="admin-header">
            <h1>🎹 Admin Piano Solo</h1>
            <p>Gestion des informations HELP et vidéo tutoriel</p>
        </div>
        
        <div class="admin-content">
            <a href="index-unified.php" class="back-link">← Retour à l'interface principale</a>
            
            <?php if ($message): ?>
                <div class="message <?php echo $messageType; ?>">
                    <?php echo htmlspecialchars($message); ?>
                </div>
            <?php endif; ?>
            
            <!-- Section HELP -->
            <div class="admin-section">
                <h2>📚 Configuration HELP</h2>
                <form method="POST" action="">
                    <input type="hidden" name="action" value="save_help">
                    
                    <div class="form-group">
                        <label for="help_title">Titre de l'aide :</label>
                        <input type="text" id="help_title" name="help_title" class="form-control" 
                               value="<?php echo htmlspecialchars($config['help']['title']); ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="help_content">Contenu de l'aide :</label>
                        <textarea id="help_content" name="help_content" class="form-control" required><?php echo htmlspecialchars($config['help']['content']); ?></textarea>
                    </div>
                    
                    <button type="submit" class="btn btn-success">💾 Sauvegarder HELP</button>
                </form>
                
                <!-- Aperçu HELP -->
                <div class="help-preview">
                    <h3>Aperçu :</h3>
                    <h4><?php echo htmlspecialchars($config['help']['title']); ?></h4>
                    <p><?php echo nl2br(htmlspecialchars($config['help']['content'])); ?></p>
                    <small>Dernière mise à jour : <?php echo $config['help']['last_updated']; ?></small>
                </div>
            </div>
            
            <!-- Section Vidéo -->
            <div class="admin-section">
                <h2>🎥 Configuration Vidéo</h2>
                <form method="POST" action="" enctype="multipart/form-data">
                    <input type="hidden" name="action" value="save_video">
                    
                    <div class="form-group">
                        <label for="video_title">Titre de la vidéo :</label>
                        <input type="text" id="video_title" name="video_title" class="form-control" 
                               value="<?php echo htmlspecialchars($config['video']['title']); ?>" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="video_description">Description :</label>
                        <textarea id="video_description" name="video_description" class="form-control"><?php echo htmlspecialchars($config['video']['description']); ?></textarea>
                    </div>
                    
                    <div class="form-group">
                        <div class="checkbox-group">
                            <input type="checkbox" id="video_enabled" name="video_enabled" 
                                   <?php echo $config['video']['enabled'] ? 'checked' : ''; ?>>
                            <label for="video_enabled">Activer la vidéo</label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Fichier vidéo (MP4) :</label>
                        <div class="file-upload">
                            <input type="file" id="video_file" name="video_file" accept=".mp4">
                            <label for="video_file">
                                📁 Cliquez pour sélectionner un fichier MP4<br>
                                <small>ou glissez-déposez le fichier ici</small>
                            </label>
                        </div>
                        <?php if ($config['video']['filename'] && file_exists('videos/' . $config['video']['filename'])): ?>
                            <p><strong>Fichier actuel :</strong> <?php echo htmlspecialchars($config['video']['filename']); ?></p>
                        <?php endif; ?>
                    </div>
                    
                    <button type="submit" class="btn btn-success">💾 Sauvegarder Vidéo</button>
                </form>
                
                <!-- Aperçu Vidéo -->
                <?php if ($config['video']['enabled'] && $config['video']['filename'] && file_exists('videos/' . $config['video']['filename'])): ?>
                    <div class="video-preview">
                        <h3>Aperçu de la vidéo :</h3>
                        <video controls width="100%" max-width="600">
                            <source src="videos/<?php echo htmlspecialchars($config['video']['filename']); ?>" type="video/mp4">
                            Votre navigateur ne supporte pas la lecture de vidéos.
                        </video>
                    </div>
                <?php endif; ?>
            </div>
            
            <!-- Section Intégration -->
            <div class="admin-section">
                <h2>🔗 Intégration</h2>
                <p>Pour intégrer le menu HELP et la vidéo dans votre application :</p>
                
                <h3>1. Menu HELP</h3>
                <p>Ajoutez ce code JavaScript pour afficher le menu HELP :</p>
                <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
// Charger les informations HELP
function loadHelpInfo() {
    fetch('admin-config.json')
        .then(response => response.json())
        .then(data => {
            showHelpPopup(data.help.title, data.help.content);
        })
        .catch(error => console.error('Erreur chargement HELP:', error));
}

// Afficher le popup HELP
function showHelpPopup(title, content) {
    const popup = document.createElement('div');
    popup.className = 'help-popup';
    popup.innerHTML = `
        &lt;div class="help-content"&gt;
            &lt;h3&gt;${title}&lt;/h3&gt;
            &lt;p&gt;${content}&lt;/p&gt;
            &lt;button onclick="this.closest('.help-popup').remove()"&gt;Fermer&lt;/button&gt;
        &lt;/div&gt;
    `;
    document.body.appendChild(popup);
}</pre>
                
                <h3>2. Vidéo Popup</h3>
                <p>Ajoutez ce code pour afficher la vidéo en popup :</p>
                <pre style="background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto;">
// Charger et afficher la vidéo
function loadVideoPopup() {
    fetch('admin-config.json')
        .then(response => response.json())
        .then(data => {
            if (data.video.enabled) {
                showVideoPopup(data.video.title, data.video.filename);
            }
        })
        .catch(error => console.error('Erreur chargement vidéo:', error));
}

// Afficher le popup vidéo
function showVideoPopup(title, filename) {
    const popup = document.createElement('div');
    popup.className = 'video-popup';
    popup.innerHTML = `
        &lt;div class="video-content"&gt;
            &lt;h3&gt;${title}&lt;/h3&gt;
            &lt;video controls width="100%"&gt;
                &lt;source src="videos/${filename}" type="video/mp4"&gt;
            &lt;/video&gt;
            &lt;button onclick="this.closest('.video-popup').remove()"&gt;Fermer&lt;/button&gt;
        &lt;/div&gt;
    `;
    document.body.appendChild(popup);
}</pre>
            </div>
        </div>
    </div>

    <script>
        // Amélioration de l'interface de upload
        const fileUpload = document.querySelector('.file-upload');
        const fileInput = document.getElementById('video_file');
        
        if (fileUpload && fileInput) {
            // Drag and drop
            fileUpload.addEventListener('dragover', (e) => {
                e.preventDefault();
                fileUpload.style.background = '#e8f0ff';
                fileUpload.style.borderColor = '#5a6fd8';
            });
            
            fileUpload.addEventListener('dragleave', (e) => {
                e.preventDefault();
                fileUpload.style.background = '#f8f9ff';
                fileUpload.style.borderColor = '#667eea';
            });
            
            fileUpload.addEventListener('drop', (e) => {
                e.preventDefault();
                fileUpload.style.background = '#f8f9ff';
                fileUpload.style.borderColor = '#667eea';
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    updateFileName(files[0].name);
                }
            });
            
            // Changement de fichier
            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    updateFileName(e.target.files[0].name);
                }
            });
            
            function updateFileName(name) {
                const label = fileUpload.querySelector('label');
                label.innerHTML = `📁 Fichier sélectionné : ${name}`;
            }
        }
        
        // Auto-sauvegarde de l'aperçu HELP
        const helpTitle = document.getElementById('help_title');
        const helpContent = document.getElementById('help_content');
        const helpPreview = document.querySelector('.help-preview');
        
        function updateHelpPreview() {
            const title = helpTitle.value;
            const content = helpContent.value;
            
            helpPreview.querySelector('h4').textContent = title;
            helpPreview.querySelector('p').innerHTML = content.replace(/\n/g, '<br>');
        }
        
        if (helpTitle && helpContent) {
            helpTitle.addEventListener('input', updateHelpPreview);
            helpContent.addEventListener('input', updateHelpPreview);
        }
    </script>
</body>
</html>



================================================================================
FICHIER: piano-soloB/check-libraries.php
================================================================================
<?php
/**
 * Script de vérification des bibliothèques
 * Affiche l'état des dossiers et fichiers
 */

// Configuration
$publicDemosDir = 'demospubliques/';
$libraries = ['prayers', 'bhajans', 'brouillon'];

echo "🔍 Vérification des bibliothèques...\n\n";

foreach ($libraries as $library) {
    $libraryDir = $publicDemosDir . $library . '/';
    $indexFile = $libraryDir . 'index.json';
    
    echo "📁 Bibliothèque: $library\n";
    
    // Vérifier si le dossier existe
    if (!is_dir($libraryDir)) {
        echo "   ❌ Dossier non trouvé\n";
        continue;
    }
    
    // Lister les fichiers JSON
    $files = glob($libraryDir . '*.json');
    $jsonFiles = array_filter($files, function($file) {
        return basename($file) !== 'index.json';
    });
    
    echo "   📄 Fichiers JSON: " . count($jsonFiles) . "\n";
    
    // Vérifier l'index.json
    if (file_exists($indexFile)) {
        $indexContent = file_get_contents($indexFile);
        $index = json_decode($indexContent, true);
        
        if ($index === null) {
            echo "   ❌ Index.json invalide (JSON corrompu)\n";
        } else {
            echo "   ✅ Index.json valide (" . count($index) . " entrées)\n";
            
            // Vérifier la cohérence
            $indexFilenames = [];
            if (is_array($index)) {
                foreach ($index as $entry) {
                    if (isset($entry['filename'])) {
                        $indexFilenames[] = $entry['filename'];
                    }
                }
            }
            
            $actualFiles = array_map('basename', $jsonFiles);
            $missingFiles = array_diff($indexFilenames, $actualFiles);
            $orphanFiles = array_diff($actualFiles, $indexFilenames);
            
            if (!empty($missingFiles)) {
                echo "   ⚠️ Fichiers manquants: " . implode(', ', $missingFiles) . "\n";
            }
            
            if (!empty($orphanFiles)) {
                echo "   ⚠️ Fichiers orphelins: " . implode(', ', $orphanFiles) . "\n";
            }
            
            if (empty($missingFiles) && empty($orphanFiles)) {
                echo "   ✅ Cohérence parfaite\n";
            }
        }
    } else {
        echo "   ❌ Index.json manquant\n";
    }
    
    echo "\n";
}

// Vérifier le demos.json principal
$mainDemosFile = $publicDemosDir . 'demos.json';
echo "📋 Demos.json principal:\n";

if (file_exists($mainDemosFile)) {
    $mainContent = file_get_contents($mainDemosFile);
    $mainDemos = json_decode($mainContent, true);
    
    if ($mainDemos === null) {
        echo "   ❌ Fichier invalide (JSON corrompu)\n";
    } else {
        echo "   ✅ Fichier valide (" . count($mainDemos) . " entrées)\n";
        
        // Compter par catégorie
        $categories = [];
        foreach ($mainDemos as $demo) {
            $cat = $demo['category'] ?? 'inconnue';
            $categories[$cat] = ($categories[$cat] ?? 0) + 1;
        }
        
        foreach ($categories as $cat => $count) {
            echo "      - $cat: $count démos\n";
        }
    }
} else {
    echo "   ❌ Fichier manquant\n";
}

echo "\n🎯 Recommandations:\n";
echo "1. Si des fichiers sont manquants ou orphelins, utilisez clean-libraries.php\n";
echo "2. Si les index.json sont corrompus, ils seront réécrits automatiquement\n";
echo "3. Vérifiez les permissions des dossiers si des erreurs persistent\n";
?>







================================================================================
FICHIER: piano-soloB/check-test-demos.php
================================================================================
<?php
// check-test-demos.php
// Script pour vérifier les démos de la catégorie "test"

header('Content-Type: text/plain; charset=utf-8');

echo "🔍 Vérification des démos de la catégorie 'test'...\n\n";

// Lire le fichier demos.json
$demosFile = 'demospubliques/demos.json';
if (!file_exists($demosFile)) {
    echo "❌ Fichier demos.json non trouvé\n";
    exit;
}

$demos = json_decode(file_get_contents($demosFile), true);
if (!$demos) {
    echo "❌ Erreur lors de la lecture de demos.json\n";
    exit;
}

// Filtrer les démos de la catégorie "test"
$testDemos = array_filter($demos, function($demo) {
    return $demo['category'] === 'test';
});

echo "📚 Démos de la catégorie 'test' trouvées: " . count($testDemos) . "\n\n";

$existingTestDemos = [];
$missingTestDemos = [];

foreach ($testDemos as $demo) {
    $filePath = 'demospubliques/' . $demo['filename'];
    if (file_exists($filePath)) {
        $existingTestDemos[] = $demo;
        echo "✅ " . $demo['filename'] . " - " . $demo['name'] . "\n";
    } else {
        $missingTestDemos[] = $demo;
        echo "❌ " . $demo['filename'] . " - " . $demo['name'] . " (MANQUANT)\n";
    }
}

echo "\n📊 Résumé pour la catégorie 'test':\n";
echo "- Fichiers existants: " . count($existingTestDemos) . "\n";
echo "- Fichiers manquants: " . count($missingTestDemos) . "\n";

if (count($missingTestDemos) > 0) {
    echo "\n🗑️ Fichiers de test manquants:\n";
    foreach ($missingTestDemos as $demo) {
        echo "  - " . $demo['filename'] . " (" . $demo['name'] . ")\n";
    }
}

if (count($existingTestDemos) > 0) {
    echo "\n✅ Fichiers de test existants:\n";
    foreach ($existingTestDemos as $demo) {
        echo "  - " . $demo['filename'] . " (" . $demo['name'] . ")\n";
    }
}

echo "\n🎯 Recommandation:\n";
if (count($missingTestDemos) > 0) {
    echo "Supprimez les références aux fichiers manquants avec clean-demos.php\n";
} else {
    echo "Toutes les démos de test existent !\n";
}
?>




================================================================================
FICHIER: piano-soloB/clean-demos.php
================================================================================
<?php
// clean-demos.php
// Script pour nettoyer demos.json et ne garder que les fichiers existants

header('Content-Type: application/json');

echo "🧹 Nettoyage du fichier demos.json...\n\n";

// Lire le fichier demos.json
$demosFile = 'demospubliques/demos.json';
if (!file_exists($demosFile)) {
    echo "❌ Fichier demos.json non trouvé\n";
    exit;
}

$demos = json_decode(file_get_contents($demosFile), true);
if (!$demos) {
    echo "❌ Erreur lors de la lecture de demos.json\n";
    exit;
}

echo "📚 Démos dans le fichier JSON: " . count($demos) . "\n";

// Vérifier quels fichiers existent réellement
$existingDemos = [];
$missingFiles = [];

foreach ($demos as $demo) {
    $filePath = 'demospubliques/' . $demo['filename'];
    if (file_exists($filePath)) {
        $existingDemos[] = $demo;
        echo "✅ " . $demo['filename'] . " - " . $demo['name'] . "\n";
    } else {
        $missingFiles[] = $demo['filename'];
        echo "❌ " . $demo['filename'] . " - " . $demo['name'] . " (MANQUANT)\n";
    }
}

echo "\n📊 Résumé:\n";
echo "- Fichiers existants: " . count($existingDemos) . "\n";
echo "- Fichiers manquants: " . count($missingFiles) . "\n";

if (count($missingFiles) > 0) {
    echo "\n🗑️ Fichiers manquants:\n";
    foreach ($missingFiles as $file) {
        echo "  - " . $file . "\n";
    }
}

// Sauvegarder le fichier nettoyé
$backupFile = 'demospubliques/demos_backup_' . date('Y-m-d_H-i-s') . '.json';
copy($demosFile, $backupFile);
echo "\n💾 Sauvegarde créée: " . basename($backupFile) . "\n";

// Écrire le nouveau fichier
$result = file_put_contents($demosFile, json_encode($existingDemos, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

if ($result !== false) {
    echo "✅ Fichier demos.json nettoyé avec succès!\n";
    echo "📝 " . count($existingDemos) . " démos conservées\n";
} else {
    echo "❌ Erreur lors de l'écriture du fichier\n";
}

echo "\n🎯 Démos conservées:\n";
foreach ($existingDemos as $demo) {
    echo "- " . $demo['name'] . " (" . $demo['filename'] . ")\n";
}
?>




================================================================================
FICHIER: piano-soloB/clean-libraries.php
================================================================================
<?php
/**
 * Script de nettoyage des bibliothèques
 * Vide les dossiers prayers et bhajans et réécrit les index.json
 */

// Configuration
$publicDemosDir = 'demospubliques/';
$libraries = ['prayers', 'bhajans'];

echo "🧹 Début du nettoyage des bibliothèques...\n\n";

foreach ($libraries as $library) {
    $libraryDir = $publicDemosDir . $library . '/';
    $indexFile = $libraryDir . 'index.json';
    
    echo "📁 Traitement de la bibliothèque: $library\n";
    
    // Vérifier si le dossier existe
    if (!is_dir($libraryDir)) {
        echo "   ❌ Dossier $library non trouvé\n";
        continue;
    }
    
    // Supprimer tous les fichiers JSON (sauf index.json)
    $files = glob($libraryDir . '*.json');
    $deletedCount = 0;
    
    foreach ($files as $file) {
        $filename = basename($file);
        if ($filename !== 'index.json') {
            if (unlink($file)) {
                echo "   🗑️ Supprimé: $filename\n";
                $deletedCount++;
            } else {
                echo "   ❌ Erreur lors de la suppression de $filename\n";
            }
        }
    }
    
    // Réécrire l'index.json vide
    $emptyIndex = [];
    if (file_put_contents($indexFile, json_encode($emptyIndex, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE))) {
        echo "   ✅ Index $library réécrit (vide)\n";
    } else {
        echo "   ❌ Erreur lors de l'écriture de l'index $library\n";
    }
    
    echo "   📊 $deletedCount fichiers supprimés\n\n";
}

// Nettoyer aussi le demos.json principal
$mainDemosFile = $publicDemosDir . 'demos.json';
if (file_exists($mainDemosFile)) {
    $mainDemos = json_decode(file_get_contents($mainDemosFile), true);
    
    // Supprimer les entrées des bibliothèques nettoyées
    $cleanedDemos = array_filter($mainDemos, function($demo) use ($libraries) {
        return !in_array($demo['category'], $libraries);
    });
    
    if (file_put_contents($mainDemosFile, json_encode($cleanedDemos, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE))) {
        echo "✅ Demos.json principal nettoyé\n";
        echo "📊 " . count($mainDemos) . " → " . count($cleanedDemos) . " entrées\n";
    } else {
        echo "❌ Erreur lors du nettoyage du demos.json principal\n";
    }
}

echo "\n🎉 Nettoyage terminé !\n";
echo "💡 Vous pouvez maintenant recharger la page admin pour voir les changements.\n";
?>







================================================================================
FICHIER: piano-soloB/cleanup-demos.php
================================================================================
<?php
/**
 * Script de nettoyage des démos - Nettoyage sélectif et sécurisé
 * 
 * Ce script permet de :
 * 1. Voir l'état actuel de tous les répertoires
 * 2. Supprimer sélectivement les démos
 * 3. Créer des backups avant suppression
 */

// Activer l'affichage des erreurs
error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "🧹 SCRIPT DE NETTOYAGE DES DÉMOS\n";
echo str_repeat("=", 50) . "\n\n";

// Chemins
$baseDir = __DIR__;
$aClasserDir = $baseDir . '/a-classer/';
$publicDemosDir = $baseDir . '/demospubliques/';

// Fonction pour lister les fichiers dans un répertoire
function listFiles($dir, $pattern = '*.json') {
    $files = [];
    if (is_dir($dir)) {
        $items = glob($dir . $pattern);
        foreach ($items as $item) {
            if (is_file($item)) {
                $files[] = basename($item);
            }
        }
    }
    return $files;
}

// Fonction pour créer un backup
function createBackup($sourceDir, $backupName) {
    $backupDir = $sourceDir . 'backup_' . date('Y-m-d_H-i-s') . '/';
    if (!is_dir($backupDir)) {
        mkdir($backupDir, 0755, true);
    }
    
    $files = listFiles($sourceDir);
    $backedUp = 0;
    
    foreach ($files as $file) {
        if (copy($sourceDir . $file, $backupDir . $file)) {
            $backedUp++;
        }
    }
    
    return $backedUp;
}

// État actuel
echo "📋 ÉTAT ACTUEL DES RÉPERTOIRES :\n";
echo str_repeat("-", 30) . "\n";

// A Classer
echo "\n📁 A Classer :\n";
$aClasserFiles = listFiles($aClasserDir);
echo "  - " . count($aClasserFiles) . " fichiers JSON\n";
foreach ($aClasserFiles as $file) {
    echo "    • $file\n";
}

// Prayers
echo "\n📁 Prayers :\n";
$prayersFiles = listFiles($publicDemosDir . 'prayers/');
echo "  - " . count($prayersFiles) . " fichiers JSON\n";
foreach ($prayersFiles as $file) {
    echo "    • $file\n";
}

// Bhajans
echo "\n📁 Bhajans :\n";
$bhajansFiles = listFiles($publicDemosDir . 'bhajans/');
echo "  - " . count($bhajansFiles) . " fichiers JSON\n";
foreach ($bhajansFiles as $file) {
    echo "    • $file\n";
}

// Test
echo "\n📁 Test :\n";
$testFiles = listFiles($publicDemosDir . 'test/');
echo "  - " . count($testFiles) . " fichiers JSON\n";
foreach ($testFiles as $file) {
    echo "    • $file\n";
}

// Demos.json principal
echo "\n📁 Demos.json principal :\n";
$mainDemosFile = $publicDemosDir . 'demos.json';
if (file_exists($mainDemosFile)) {
    $mainDemos = json_decode(file_get_contents($mainDemosFile), true);
    echo "  - " . count($mainDemos) . " entrées\n";
} else {
    echo "  - Fichier inexistant\n";
}

echo "\n" . str_repeat("=", 50) . "\n";
echo "🎯 OPTIONS DE NETTOYAGE :\n";
echo str_repeat("=", 50) . "\n";
echo "1. Nettoyer A Classer (garder seulement index.json)\n";
echo "2. Nettoyer toutes les bibliothèques\n";
echo "3. Nettoyer tout sauf les backups\n";
echo "4. Vider demos.json principal\n";
echo "5. Créer un backup complet avant nettoyage\n";
echo "6. Quitter\n\n";

echo "💡 RECOMMANDATION :\n";
echo "- Gardez les démos dans les bibliothèques (elles fonctionnent)\n";
echo "- Vous pouvez nettoyer A Classer si vous voulez repartir à zéro\n";
echo "- Créez toujours un backup avant de supprimer\n\n";

echo "⚠️  ATTENTION :\n";
echo "- Toute suppression est définitive\n";
echo "- Créez un backup avant de nettoyer\n";
echo "- Les démos dans les bibliothèques sont fonctionnelles\n\n";

echo "✅ SCRIPT TERMINÉ - Aucune action automatique effectuée\n";
echo "Pour nettoyer, utilisez l'interface web ou supprimez manuellement les fichiers\n";
?>



================================================================================
FICHIER: piano-soloB/delete-demo.php
================================================================================
<?php
// delete-demo.php
// Script pour supprimer une démo du serveur

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST');
header('Access-Control-Allow-Headers: Content-Type');

// Activer l'affichage des erreurs pour le débogage
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Fonction de log pour le débogage
function debugLog($message) {
    error_log("DELETE-DEMO: " . $message);
}

debugLog("Script de suppression démarré");

// Vérifier la méthode HTTP
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    debugLog("Méthode non autorisée: " . $_SERVER['REQUEST_METHOD']);
    http_response_code(405);
    echo json_encode(['success' => false, 'message' => 'Méthode non autorisée']);
    exit;
}

// Récupérer les données JSON
$rawInput = file_get_contents('php://input');
debugLog("Données reçues: " . $rawInput);

$input = json_decode($rawInput, true);

if (json_last_error() !== JSON_ERROR_NONE) {
    debugLog("Erreur JSON: " . json_last_error_msg());
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => 'Données JSON invalides']);
    exit;
}

if (!isset($input['filename']) || empty($input['filename'])) {
    debugLog("Nom de fichier manquant");
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => 'Nom de fichier manquant']);
    exit;
}

$filename = $input['filename'];
debugLog("Fichier à supprimer: " . $filename);

// Sécuriser le nom de fichier
$originalFilename = $filename;
$filename = basename($filename); // Enlever les chemins
$filename = preg_replace('/[^a-zA-Z0-9._-]/', '', $filename); // Caractères autorisés uniquement

if ($filename !== $originalFilename) {
    debugLog("Nom de fichier nettoyé: " . $originalFilename . " -> " . $filename);
}

// Chemin vers le dossier des démos
$demosDir = 'demospubliques/';
$filePath = $demosDir . $filename;

debugLog("Chemin complet: " . $filePath);

// Vérifier que le dossier existe
if (!is_dir($demosDir)) {
    debugLog("Dossier demospubliques n'existe pas");
    http_response_code(500);
    echo json_encode(['success' => false, 'message' => 'Dossier des démos introuvable']);
    exit;
}

// Vérifier que le fichier existe
if (!file_exists($filePath)) {
    debugLog("Fichier n'existe pas: " . $filePath);
    http_response_code(404);
    echo json_encode(['success' => false, 'message' => 'Fichier non trouvé: ' . $filename]);
    exit;
}

// Vérifier que c'est bien un fichier JSON
if (pathinfo($filename, PATHINFO_EXTENSION) !== 'json') {
    debugLog("Type de fichier non autorisé: " . pathinfo($filename, PATHINFO_EXTENSION));
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => 'Type de fichier non autorisé']);
    exit;
}

// Vérifier les permissions
if (!is_readable($filePath)) {
    debugLog("Fichier non lisible: " . $filePath);
    http_response_code(500);
    echo json_encode(['success' => false, 'message' => 'Fichier non accessible en lecture']);
    exit;
}

if (!is_writable($filePath)) {
    debugLog("Fichier non modifiable: " . $filePath);
    http_response_code(500);
    echo json_encode(['success' => false, 'message' => 'Fichier non accessible en écriture']);
    exit;
}

try {
    debugLog("Tentative de suppression du fichier: " . $filePath);
    
    // Supprimer le fichier
    if (unlink($filePath)) {
        debugLog("Fichier supprimé avec succès");
        
        // Mettre à jour le fichier demos.json
        $updateResult = updateDemosList($filename);
        if ($updateResult) {
            debugLog("Liste demos.json mise à jour");
        } else {
            debugLog("Erreur lors de la mise à jour de demos.json");
        }
        
        echo json_encode(['success' => true, 'message' => 'Démo supprimée avec succès']);
    } else {
        debugLog("Échec de la suppression du fichier");
        http_response_code(500);
        echo json_encode(['success' => false, 'message' => 'Erreur lors de la suppression du fichier']);
    }
} catch (Exception $e) {
    debugLog("Exception lors de la suppression: " . $e->getMessage());
    http_response_code(500);
    echo json_encode(['success' => false, 'message' => 'Erreur: ' . $e->getMessage()]);
}

// Fonction pour mettre à jour la liste des démos
function updateDemosList($deletedFilename) {
    $demosFile = 'demospubliques/demos.json';
    
    debugLog("Mise à jour de la liste: " . $demosFile);
    
    if (!file_exists($demosFile)) {
        debugLog("Fichier demos.json n'existe pas");
        return false;
    }
    
    if (!is_readable($demosFile)) {
        debugLog("Fichier demos.json non lisible");
        return false;
    }
    
    if (!is_writable($demosFile)) {
        debugLog("Fichier demos.json non modifiable");
        return false;
    }
    
    try {
        // Lire la liste actuelle
        $content = file_get_contents($demosFile);
        if ($content === false) {
            debugLog("Impossible de lire demos.json");
            return false;
        }
        
        $demos = json_decode($content, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            debugLog("Erreur JSON dans demos.json: " . json_last_error_msg());
            return false;
        }
        
        if (!is_array($demos)) {
            debugLog("demos.json ne contient pas un tableau valide");
            $demos = [];
        }
        
        debugLog("Démos avant suppression: " . count($demos));
        
        // Supprimer la démo de la liste
        $demos = array_filter($demos, function($demo) use ($deletedFilename) {
            return $demo['filename'] !== $deletedFilename;
        });
        
        // Réindexer le tableau
        $demos = array_values($demos);
        
        debugLog("Démos après suppression: " . count($demos));
        
        // Sauvegarder la liste mise à jour
        $result = file_put_contents($demosFile, json_encode($demos, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        
        if ($result === false) {
            debugLog("Impossible d'écrire dans demos.json");
            return false;
        }
        
        debugLog("demos.json mis à jour avec succès");
        return true;
        
    } catch (Exception $e) {
        debugLog("Exception lors de la mise à jour: " . $e->getMessage());
        return false;
    }
}
?>



================================================================================
FICHIER: piano-soloB/demo-manager-api-simple.php
================================================================================
<?php
// Version simplifiée de l'API pour test
error_reporting(E_ALL);
ini_set('display_errors', 1);

// Headers CORS
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Content-Type: application/json; charset=utf-8');

// Gérer les requêtes OPTIONS (preflight)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

try {
    $action = $_GET['action'] ?? $_POST['action'] ?? '';
    
    switch ($action) {
        case 'getDemosAClasser':
            // Retourner une réponse simple
            echo json_encode([
                'success' => true,
                'demos' => [],
                'message' => 'API fonctionnelle'
            ], JSON_UNESCAPED_UNICODE);
            break;
            
        case 'test':
            // Test simple
            echo json_encode([
                'success' => true,
                'message' => 'API test fonctionnelle',
                'timestamp' => date('c')
            ], JSON_UNESCAPED_UNICODE);
            break;
            
        default:
            echo json_encode([
                'success' => false,
                'message' => 'Action non reconnue: ' . $action
            ], JSON_UNESCAPED_UNICODE);
            break;
    }
    
} catch (Exception $e) {
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => 'Erreur: ' . $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
}
?>



================================================================================
FICHIER: piano-soloB/demo-manager-api.php
================================================================================
<?php
/**
 * API pour le Gestionnaire de Démos - Nouvelle Architecture
 * 
 * Point d'entrée pour les requêtes AJAX du gestionnaire de démos
 */

// Désactiver l'affichage des erreurs pour éviter qu'elles polluent le JSON
error_reporting(E_ALL);
ini_set('display_errors', 0);
ini_set('log_errors', 1);

// Headers CORS
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Content-Type: application/json; charset=utf-8');

// Gérer les requêtes OPTIONS (preflight)
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

// Fonction de log pour le débogage
function debugLog($message) {
    error_log("[DemoManager API] " . $message);
}

// Inclure seulement la classe DemoManager
class DemoManager {
    private $aClasserDir;
    private $indexFile;
    private $publicDemosDir;
    
    public function __construct() {
        // Utiliser le répertoire du script actuel
        $scriptDir = dirname(__FILE__);
        $this->aClasserDir = $scriptDir . '/demospubliques/brouillon/';
        $this->indexFile = $scriptDir . '/demospubliques/brouillon/index.json';
        $this->publicDemosDir = $scriptDir . '/demospubliques/';
        
        // Créer le dossier brouillon s'il n'existe pas
        if (!is_dir($this->aClasserDir)) {
            mkdir($this->aClasserDir, 0755, true);
        }
        
        // Créer l'index s'il n'existe pas
        if (!file_exists($this->indexFile)) {
            $this->createIndexFile();
        }
    }
    
    /**
     * Créer le fichier index initial
     */
    private function createIndexFile() {
        $index = [
            'metadata' => [
                'created' => date('c'),
                'version' => '1.0',
                'description' => 'Index des démos en brouillon - Nouvelle architecture Piano Solo'
            ],
            'demos' => []
        ];
        
        file_put_contents($this->indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
    }
    
    /**
     * Enregistrer une nouvelle démo dans "A Classer"
     */
    public function saveNewDemo($demoData, $originalName = '') {
        try {
            // Générer un nom de fichier unique avec le nom de baptême
            $timestamp = time();
            $randomId = bin2hex(random_bytes(8));
            
            // Créer un nom de fichier sécurisé basé sur le nom original
            if ($originalName && !empty(trim($originalName))) {
                // Nettoyer le nom pour en faire un nom de fichier valide
                $safeName = preg_replace('/[^a-zA-Z0-9\s\-_]/', '', $originalName);
                $safeName = preg_replace('/\s+/', '_', trim($safeName));
                $safeName = strtolower($safeName);
                
                // Limiter la longueur du nom
                if (strlen($safeName) > 30) {
                    $safeName = substr($safeName, 0, 30);
                }
                
                $filename = "demo_{$safeName}_{$timestamp}_{$randomId}.json";
            } else {
                // Fallback si pas de nom
                $filename = "demo_brouillon_{$timestamp}_{$randomId}.json";
            }
            
            $filepath = $this->aClasserDir . $filename;
            
            // Préparer les métadonnées
            $demoInfo = [
                'id' => $timestamp . '_' . $randomId,
                'filename' => $filename,
                'originalName' => $originalName ?: 'Brouillon sans nom',
                'created' => date('c'),
                'status' => 'a_classer',
                'data' => $demoData
            ];
            
            // Sauvegarder le fichier
            file_put_contents($filepath, json_encode($demoInfo, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            // Mettre à jour l'index
            $this->addToIndex($demoInfo);
            
            return [
                'success' => true,
                'filename' => $filename,
                'id' => $demoInfo['id'],
                'message' => 'Démo enregistrée dans "Brouillon"'
            ];
            
        } catch (Exception $e) {
            return [
                'success' => false,
                'message' => 'Erreur lors de l\'enregistrement: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Ajouter une démo à l'index
     */
    private function addToIndex($demoInfo) {
        $index = json_decode(file_get_contents($this->indexFile), true);
        $index['demos'][] = $demoInfo;
        file_put_contents($this->indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
    }
    
    /**
     * Obtenir toutes les démos "A Classer"
     */
    public function getDemosAClasser() {
        if (!file_exists($this->indexFile)) {
            return [];
        }
        
        $index = json_decode(file_get_contents($this->indexFile), true);
        return $index['demos'] ?? [];
    }
    
    /**
     * Obtenir toutes les démos d'une bibliothèque spécifique
     */
    public function getDemosFromLibrary($library) {
        try {
            if ($library === 'brouillon') {
                return $this->getDemosAClasser();
            }
            
            $libraryDir = $this->publicDemosDir . $library . '/';
            $indexFile = $libraryDir . 'index.json';
            
            if (!is_dir($libraryDir) || !file_exists($indexFile)) {
                return [];
            }
            
            $index = json_decode(file_get_contents($indexFile), true);
            return $index['demos'] ?? [];
            
        } catch (Exception $e) {
            debugLog("Erreur getDemosFromLibrary: " . $e->getMessage());
            return [];
        }
    }
    
    /**
     * Déplacer une démo vers une bibliothèque
     */
    public function moveToLibrary($demoId, $libraryName, $newName = '', $sourceType = 'brouillon') {
        try {
            if ($libraryName === 'brouillon') {
                return $this->moveToBrouillon($demoId, $sourceType, $newName);
            } elseif ($sourceType === 'brouillon') {
                return $this->moveFromBrouillon($demoId, $libraryName, $newName);
            } else {
                return $this->moveFromLibrary($demoId, $sourceType, $libraryName, $newName);
            }
        } catch (Exception $e) {
            return ['success' => false, 'message' => 'Erreur: ' . $e->getMessage()];
        }
    }
    
    /**
     * Forcer la synchronisation des fichiers
     */
    private function forceSync() {
        // Vider le cache PHP
        clearstatcache();
        
        // Forcer la synchronisation des fichiers
        foreach (['brouillon', 'prayers', 'bhajans'] as $library) {
            $libraryDir = $this->publicDemosDir . $library . '/';
            if (is_dir($libraryDir)) {
                // Recharger l'index de la bibliothèque
                $indexFile = $libraryDir . 'index.json';
                if (file_exists($indexFile)) {
                    // Lire et réécrire le fichier pour forcer la synchronisation
                    $content = file_get_contents($indexFile);
                    file_put_contents($indexFile, $content);
                }
            }
        }
    }
    
    /**
     * Déplacer depuis le brouillon vers une bibliothèque
     */
    private function moveFromBrouillon($demoId, $libraryName, $newName = '') {
        $index = json_decode(file_get_contents($this->indexFile), true);
        $demoIndex = -1;
        $demo = null;
        
        // Trouver la démo dans l'index par nom technique, ID ou filename
        foreach ($index['demos'] as $i => $d) {
            if (isset($d['technicalName']) && $d['technicalName'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            } elseif (isset($d['id']) && $d['id'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            } elseif (isset($d['filename']) && $d['filename'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            }
        }
        
        if ($demoIndex === -1) {
            return ['success' => false, 'message' => 'Démo non trouvée dans le brouillon'];
        }
            
            // Créer le dossier de la bibliothèque s'il n'existe pas
            $libraryDir = $this->publicDemosDir . $libraryName . '/';
            if (!is_dir($libraryDir)) {
                mkdir($libraryDir, 0755, true);
            }
            
            // Créer un nouveau nom de fichier avec le nom de baptême pour la bibliothèque
            $finalName = $newName ?: $demo['originalName'];
            $timestamp = time();
            $randomId = bin2hex(random_bytes(8));
            
            // Créer un nom de fichier sécurisé basé sur le nom final
            if ($finalName && !empty(trim($finalName))) {
                $safeName = preg_replace('/[^a-zA-Z0-9\s\-_]/', '', $finalName);
                $safeName = preg_replace('/\s+/', '_', trim($safeName));
                $safeName = strtolower($safeName);
                
                // Limiter la longueur du nom
                if (strlen($safeName) > 30) {
                    $safeName = substr($safeName, 0, 30);
                }
                
                $newFilename = "demo_{$safeName}_{$timestamp}_{$randomId}.json";
            } else {
                $newFilename = "demo_{$libraryName}_{$timestamp}_{$randomId}.json";
            }
            
            // Copier le fichier vers la bibliothèque avec le nouveau nom
            $sourceFile = $this->aClasserDir . $demo['filename'];
            $targetFile = $libraryDir . $newFilename;
            
            if (!copy($sourceFile, $targetFile)) {
                return ['success' => false, 'message' => 'Erreur lors de la copie du fichier'];
            }
            
            // Mettre à jour le nom dans le fichier
            $demoData = json_decode(file_get_contents($targetFile), true);
            $demoData['originalName'] = $finalName;
            if (isset($demoData['data'])) {
                $demoData['data']['name'] = $finalName; // Mettre à jour aussi dans les données
            }
            file_put_contents($targetFile, json_encode($demoData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            // Supprimer de l'index "A Classer"
            array_splice($index['demos'], $demoIndex, 1);
            file_put_contents($this->indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            // Supprimer le fichier original
            unlink($sourceFile);
            
            // Mettre à jour demos.json de la bibliothèque
            $this->updateLibraryIndex($libraryName, $newFilename, $finalName);
            
            // Forcer la synchronisation
            $this->forceSync();
            
            return [
                'success' => true,
                'message' => "Brouillon déplacé vers la bibliothèque '$libraryName'"
            ];
        }
        
        /**
         * Déplacer vers le brouillon depuis une bibliothèque
         */
        private function moveToBrouillon($demoId, $sourceLibrary, $newName = '') {
            // Vérifier que la bibliothèque source existe
            $sourceDir = $this->publicDemosDir . $sourceLibrary . '/';
            if (!is_dir($sourceDir)) {
                return ['success' => false, 'message' => "Bibliothèque source '$sourceLibrary' non trouvée"];
            }
            
            // Chercher dans l'index de la bibliothèque source
            $sourceIndexFile = $sourceDir . 'index.json';
            if (!file_exists($sourceIndexFile)) {
                return ['success' => false, 'message' => "Index de la bibliothèque '$sourceLibrary' non trouvé"];
            }
            
            $sourceIndex = json_decode(file_get_contents($sourceIndexFile), true);
            $demoIndex = -1;
            $demo = null;
            
            // Trouver la démo par ID ou filename
            foreach ($sourceIndex as $i => $d) {
                if (isset($d['id']) && $d['id'] === $demoId) {
                    $demoIndex = $i;
                    $demo = $d;
                    break;
                } elseif (isset($d['filename']) && $d['filename'] === $demoId) {
                    $demoIndex = $i;
                    $demo = $d;
                    break;
                }
            }
            
            if ($demoIndex === -1) {
                return ['success' => false, 'message' => "Démo non trouvée dans la bibliothèque '$sourceLibrary'"];
            }
            
            // Créer un nouveau nom de fichier pour le brouillon
            $finalName = $newName ?: ($demo['name'] ?? $demo['originalName'] ?? 'Démo');
            $timestamp = time();
            $randomId = bin2hex(random_bytes(8));
            
            // Créer un nom de fichier sécurisé
            $safeName = preg_replace('/[^a-zA-Z0-9\s\-_]/', '', $finalName);
            $safeName = preg_replace('/\s+/', '_', trim($safeName));
            $safeName = strtolower($safeName);
            
            if (strlen($safeName) > 30) {
                $safeName = substr($safeName, 0, 30);
            }
            
            $newFilename = "demo_{$safeName}_{$timestamp}_{$randomId}.json";
            
            // Copier le fichier vers le brouillon
            $sourceFile = $sourceDir . $demo['filename'];
            $targetFile = $this->aClasserDir . $newFilename;
            
            if (!copy($sourceFile, $targetFile)) {
                return ['success' => false, 'message' => 'Erreur lors de la copie du fichier'];
            }
            
            // Mettre à jour le nom dans le fichier
            $demoData = json_decode(file_get_contents($targetFile), true);
            $demoData['originalName'] = $finalName;
            if (isset($demoData['data'])) {
                $demoData['data']['name'] = $finalName;
            }
            file_put_contents($targetFile, json_encode($demoData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            // Supprimer de l'index source
            array_splice($sourceIndex, $demoIndex, 1);
            file_put_contents($sourceIndexFile, json_encode($sourceIndex, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            // Supprimer le fichier source
            unlink($sourceFile);
            
            // Ajouter au brouillon
            $this->addToBrouillon($newFilename, $finalName);
            
            // Supprimer du demos.json principal
            $this->removeFromMainDemosJson($sourceLibrary, $demo['filename']);
            
            // Forcer la synchronisation
            $this->forceSync();
            
            return [
                'success' => true,
                'message' => "Démo déplacée de '$sourceLibrary' vers le brouillon"
            ];
        }
        
        /**
         * Ajouter une démo au brouillon
         */
        private function addToBrouillon($filename, $name) {
            $index = json_decode(file_get_contents($this->indexFile), true);
            
            $demoEntry = [
                'id' => time() . '_' . bin2hex(random_bytes(8)),
                'filename' => $filename,
                'originalName' => $name,
                'created' => date('c'),
                'status' => 'a_classer'
            ];
            
            $index['demos'][] = $demoEntry;
            file_put_contents($this->indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        }
        
        /**
         * Déplacer depuis une bibliothèque vers une autre
         */
        private function moveFromLibrary($demoId, $sourceLibrary, $targetLibrary, $newName = '') {
            // Vérifier que la bibliothèque source existe
            $sourceDir = $this->publicDemosDir . $sourceLibrary . '/';
            if (!is_dir($sourceDir)) {
                return ['success' => false, 'message' => "Bibliothèque source '$sourceLibrary' non trouvée"];
            }
            
            // Chercher dans l'index de la bibliothèque source
            $sourceIndexFile = $sourceDir . 'index.json';
            if (!file_exists($sourceIndexFile)) {
                return ['success' => false, 'message' => "Index de la bibliothèque '$sourceLibrary' non trouvé"];
            }
            
            $sourceIndex = json_decode(file_get_contents($sourceIndexFile), true);
            $demoIndex = -1;
            $demo = null;
            
            // Trouver la démo par ID ou filename
            foreach ($sourceIndex as $i => $d) {
                if (isset($d['id']) && $d['id'] === $demoId) {
                    $demoIndex = $i;
                    $demo = $d;
                    break;
                } elseif (isset($d['filename']) && $d['filename'] === $demoId) {
                    $demoIndex = $i;
                    $demo = $d;
                    break;
                }
            }
            
            if ($demoIndex === -1) {
                return ['success' => false, 'message' => "Démo non trouvée dans la bibliothèque '$sourceLibrary'"];
            }
            
            // Créer le dossier de la bibliothèque cible s'il n'existe pas
            $targetDir = $this->publicDemosDir . $targetLibrary . '/';
            if (!is_dir($targetDir)) {
                mkdir($targetDir, 0755, true);
            }
            
            // Créer un nouveau nom de fichier
            $finalName = $newName ?: ($demo['name'] ?? $demo['originalName'] ?? 'Démo');
            $timestamp = time();
            $randomId = bin2hex(random_bytes(8));
            
            // Créer un nom de fichier sécurisé
            $safeName = preg_replace('/[^a-zA-Z0-9\s\-_]/', '', $finalName);
            $safeName = preg_replace('/\s+/', '_', trim($safeName));
            $safeName = strtolower($safeName);
            
            if (strlen($safeName) > 30) {
                $safeName = substr($safeName, 0, 30);
            }
            
            $newFilename = "demo_{$safeName}_{$timestamp}_{$randomId}.json";
            
            // Copier le fichier vers la bibliothèque cible
            $sourceFile = $sourceDir . $demo['filename'];
            $targetFile = $targetDir . $newFilename;
            
            if (!copy($sourceFile, $targetFile)) {
                return ['success' => false, 'message' => 'Erreur lors de la copie du fichier'];
            }
            
            // Mettre à jour le nom dans le fichier
            $demoData = json_decode(file_get_contents($targetFile), true);
            $demoData['originalName'] = $finalName;
            if (isset($demoData['data'])) {
                $demoData['data']['name'] = $finalName;
            }
            file_put_contents($targetFile, json_encode($demoData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            // Supprimer de l'index source
            array_splice($sourceIndex, $demoIndex, 1);
            file_put_contents($sourceIndexFile, json_encode($sourceIndex, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            // Supprimer le fichier source
            unlink($sourceFile);
            
            // Mettre à jour l'index de la bibliothèque cible
            $this->updateLibraryIndex($targetLibrary, $newFilename, $finalName);
            
            // Mettre à jour le demos.json principal
            $this->updateMainDemosJson($targetLibrary, $newFilename, $finalName);
            
            // Forcer la synchronisation
            $this->forceSync();
            
            return [
                'success' => true,
                'message' => "Démo déplacée de '$sourceLibrary' vers '$targetLibrary'"
            ];
        }
    
    /**
     * Mettre à jour l'index d'une bibliothèque
     */
    private function updateLibraryIndex($libraryName, $filename, $displayName) {
        // Mettre à jour l'index spécifique de la bibliothèque
        $libraryIndexFile = $this->publicDemosDir . $libraryName . '/index.json';
        
        $libraryIndex = [];
        if (file_exists($libraryIndexFile)) {
            $libraryIndex = json_decode(file_get_contents($libraryIndexFile), true);
        }
        
        $libraryIndex[] = [
            'filename' => $filename,
            'name' => $displayName,
            'added' => date('c')
        ];
        
        file_put_contents($libraryIndexFile, json_encode($libraryIndex, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        
        // Mettre à jour le demos.json principal pour la compatibilité
        $this->updateMainDemosJson($libraryName, $filename, $displayName);
    }
    
    /**
     * Mettre à jour le demos.json principal pour la compatibilité avec l'interface existante
     */
    private function updateMainDemosJson($libraryName, $filename, $displayName) {
        $mainDemosFile = $this->publicDemosDir . 'demos.json';
        
        $mainDemos = [];
        if (file_exists($mainDemosFile)) {
            $mainDemos = json_decode(file_get_contents($mainDemosFile), true);
        }
        
        // Ajouter la démo au demos.json principal
        $mainDemos[] = [
            'filename' => $filename,
            'name' => $displayName,
            'category' => $libraryName,
            'added' => date('c')
        ];
        
        file_put_contents($mainDemosFile, json_encode($mainDemos, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
    }
    
    /**
     * Modifier le nom d'affichage d'une démo (système de noms dual)
     */
    public function editDemo($demoId, $newName) {
        try {
            $index = json_decode(file_get_contents($this->indexFile), true);
            
            // Trouver la démo par nom technique ou ID
            $demoIndex = -1;
            foreach ($index['demos'] as $i => $demo) {
                // Chercher par nom technique d'abord, puis par ID
                if (isset($demo['technicalName']) && $demo['technicalName'] === $demoId) {
                    $demoIndex = $i;
                    break;
                } elseif (isset($demo['id']) && $demo['id'] === $demoId) {
                    $demoIndex = $i;
                    break;
                } elseif (isset($demo['filename']) && $demo['filename'] === $demoId) {
                    $demoIndex = $i;
                    break;
                }
            }
            
            if ($demoIndex === -1) {
                return ['success' => false, 'message' => 'Démo non trouvée'];
            }
            
            $demo = $index['demos'][$demoIndex];
            
            // Nettoyer le nouveau nom pour le fichier (sans extension)
            $safeName = preg_replace('/[^a-zA-Z0-9\s\-_]/', '', $newName);
            $safeName = preg_replace('/\s+/', '_', trim($safeName));
            $safeName = strtolower($safeName);
            
            if (strlen($safeName) > 30) {
                $safeName = substr($safeName, 0, 30);
            }
            
            // Extraire l'ID existant du nom de fichier actuel
            $currentFilename = $demo['filename'];
            $filenameParts = explode('_', $currentFilename);
            
            // Garder les parties timestamp et ID du nom de fichier existant
            $timestamp = '';
            $randomId = '';
            
            // Chercher le timestamp et l'ID dans le nom de fichier existant
            foreach ($filenameParts as $part) {
                if (is_numeric($part) && strlen($part) >= 10) {
                    $timestamp = $part;
                } elseif (strlen($part) === 16 && ctype_xdigit($part)) {
                    $randomId = $part;
                }
            }
            
            // Si on n'a pas trouvé, générer de nouveaux
            if (empty($timestamp)) {
                $timestamp = time();
            }
            if (empty($randomId)) {
                $randomId = bin2hex(random_bytes(8));
            }
            
            // Créer le nouveau nom de fichier en préservant l'ID
            $newFilename = "demo_{$safeName}_{$timestamp}_{$randomId}.json";
            
            // Renommer le fichier
            $oldFilepath = $this->aClasserDir . $demo['filename'];
            $newFilepath = $this->aClasserDir . $newFilename;
            
            if (file_exists($oldFilepath)) {
                rename($oldFilepath, $newFilepath);
                
                // Mettre à jour le contenu du fichier JSON avec le nouveau nom
                $fileContent = json_decode(file_get_contents($newFilepath), true);
                if ($fileContent && isset($fileContent['data'])) {
                    $fileContent['data']['name'] = $newName;
                    file_put_contents($newFilepath, json_encode($fileContent, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
                }
            }
            
            // Mettre à jour l'index avec le système de noms dual
            $index['demos'][$demoIndex]['filename'] = $newFilename;
            $index['demos'][$demoIndex]['displayName'] = $newName; // Nom d'affichage
            $index['demos'][$demoIndex]['name'] = $newName; // Compatibilité
            $index['demos'][$demoIndex]['lastModified'] = date('c');
            if (isset($index['demos'][$demoIndex]['data'])) {
                $index['demos'][$demoIndex]['data']['name'] = $newName;
            }
            
            file_put_contents($this->indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            return ['success' => true, 'message' => 'Nom modifié avec succès', 'newFilename' => $newFilename];
            
        } catch (Exception $e) {
            return ['success' => false, 'message' => 'Erreur: ' . $e->getMessage()];
        }
    }
    
    /**
     * Supprimer une démo (brouillon ou bibliothèque)
     */
    public function deleteDemo($demoId, $sourceType = 'brouillon') {
        try {
            if ($sourceType === 'brouillon') {
                return $this->deleteBrouillonDemo($demoId);
            } else {
                return $this->deleteLibraryDemo($demoId, $sourceType);
            }
        } catch (Exception $e) {
            return ['success' => false, 'message' => 'Erreur: ' . $e->getMessage()];
        }
    }
    
    /**
     * Supprimer une démo du brouillon
     */
    private function deleteBrouillonDemo($demoId) {
        $index = json_decode(file_get_contents($this->indexFile), true);
        $demoIndex = -1;
        $demo = null;
        
        // Trouver la démo par nom technique, ID ou filename
        foreach ($index['demos'] as $i => $d) {
            if (isset($d['technicalName']) && $d['technicalName'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            } elseif (isset($d['id']) && $d['id'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            } elseif (isset($d['filename']) && $d['filename'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            }
        }
        
        if ($demoIndex === -1) {
            return ['success' => false, 'message' => 'Démo non trouvée dans le brouillon'];
        }
        
        // Supprimer le fichier
        $filepath = $this->aClasserDir . $demo['filename'];
        if (file_exists($filepath)) {
            unlink($filepath);
        }
        
        // Supprimer de l'index
        array_splice($index['demos'], $demoIndex, 1);
        file_put_contents($this->indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        
        return ['success' => true, 'message' => 'Brouillon supprimé'];
    }
    
    /**
     * Supprimer une démo d'une bibliothèque
     */
    private function deleteLibraryDemo($demoId, $libraryName) {
        // Vérifier que la bibliothèque existe
        $libraryDir = $this->publicDemosDir . $libraryName . '/';
        if (!is_dir($libraryDir)) {
            return ['success' => false, 'message' => "Bibliothèque '$libraryName' non trouvée"];
        }
        
        // Chercher dans l'index de la bibliothèque
        $libraryIndexFile = $libraryDir . 'index.json';
        if (!file_exists($libraryIndexFile)) {
            return ['success' => false, 'message' => "Index de la bibliothèque '$libraryName' non trouvé"];
        }
        
        $libraryIndex = json_decode(file_get_contents($libraryIndexFile), true);
        $demoIndex = -1;
        $demo = null;
        
        // Trouver la démo par nom technique, ID ou filename
        foreach ($libraryIndex as $i => $d) {
            if (isset($d['technicalName']) && $d['technicalName'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            } elseif (isset($d['id']) && $d['id'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            } elseif (isset($d['filename']) && $d['filename'] === $demoId) {
                $demoIndex = $i;
                $demo = $d;
                break;
            }
        }
        
        if ($demoIndex === -1) {
            return ['success' => false, 'message' => "Démo non trouvée dans la bibliothèque '$libraryName'"];
        }
        
        // Supprimer le fichier
        $filename = $demo['filename'] ?? $demoId;
        $filepath = $libraryDir . $filename;
        if (file_exists($filepath)) {
            unlink($filepath);
        }
        
        // Supprimer de l'index de la bibliothèque
        array_splice($libraryIndex, $demoIndex, 1);
        file_put_contents($libraryIndexFile, json_encode($libraryIndex, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        
        // Supprimer du demos.json principal
        $this->removeFromMainDemosJson($libraryName, $filename);
        
        return ['success' => true, 'message' => "Démo supprimée de la bibliothèque '$libraryName'"];
    }
    
    /**
     * Supprimer une démo du demos.json principal
     */
    private function removeFromMainDemosJson($libraryName, $filename) {
        $mainDemosFile = $this->publicDemosDir . 'demos.json';
        
        if (file_exists($mainDemosFile)) {
            $mainDemos = json_decode(file_get_contents($mainDemosFile), true);
            
            // Trouver et supprimer la démo
            foreach ($mainDemos as $i => $demo) {
                if ($demo['category'] === $libraryName && $demo['filename'] === $filename) {
                    array_splice($mainDemos, $i, 1);
                    break;
                }
            }
            
            file_put_contents($mainDemosFile, json_encode($mainDemos, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        }
    }
}

// Initialiser le gestionnaire
$demoManager = new DemoManager();

try {
    // Lire l'input brut une seule fois
    $rawInput = file_get_contents('php://input');
    debugLog("Input brut: " . $rawInput);
    
    // Essayer de parser l'input JSON
    $jsonInput = null;
    if (!empty($rawInput)) {
        $jsonInput = json_decode($rawInput, true);
        debugLog("JSON parsé: " . json_encode($jsonInput));
    }
    
    // Récupérer l'action depuis GET, POST ou JSON
    $action = $_GET['action'] ?? $_POST['action'] ?? $jsonInput['action'] ?? '';
    
    debugLog("Action reçue: " . $action);
    debugLog("Méthode HTTP: " . $_SERVER['REQUEST_METHOD']);
    debugLog("GET: " . json_encode($_GET));
    debugLog("POST: " . json_encode($_POST));
    
    switch ($action) {
        case 'getDemosAClasser':
            $demos = $demoManager->getDemosAClasser();
            echo json_encode([
                'success' => true,
                'demos' => $demos
            ], JSON_UNESCAPED_UNICODE);
            break;
            
        case 'getDemos':
            $input = $jsonInput ?? json_decode($rawInput, true);
            $library = $input['library'] ?? 'brouillon';
            
            $demos = $demoManager->getDemosFromLibrary($library);
            echo json_encode([
                'success' => true,
                'demos' => $demos,
                'library' => $library
            ], JSON_UNESCAPED_UNICODE);
            break;
            
        case 'saveNewDemo':
            $input = $jsonInput ?? json_decode($rawInput, true);
            $demoData = $input['demoData'] ?? null;
            $originalName = $input['originalName'] ?? '';
            
            if (!$demoData) {
                throw new Exception('Données de démo manquantes');
            }
            
            $result = $demoManager->saveNewDemo($demoData, $originalName);
            echo json_encode($result, JSON_UNESCAPED_UNICODE);
            break;
            
        case 'moveToLibrary':
            $input = $jsonInput ?? json_decode($rawInput, true);
            $demoId = $input['demoId'] ?? '';
            $library = $input['library'] ?? '';
            $newName = $input['newName'] ?? '';
            $sourceType = $input['sourceType'] ?? 'brouillon';
            
            if (!$demoId || !$library) {
                throw new Exception('Paramètres manquants');
            }
            
            $result = $demoManager->moveToLibrary($demoId, $library, $newName, $sourceType);
            echo json_encode($result, JSON_UNESCAPED_UNICODE);
            break;
            
        case 'editDemo':
            $input = $jsonInput ?? json_decode($rawInput, true);
            $demoId = $input['demoId'] ?? '';
            $newName = $input['newName'] ?? '';
            
            if (!$demoId || !$newName) {
                throw new Exception('Paramètres manquants');
            }
            
            $result = $demoManager->editDemo($demoId, $newName);
            echo json_encode($result, JSON_UNESCAPED_UNICODE);
            break;
            
        case 'deleteDemo':
            $input = $jsonInput ?? json_decode($rawInput, true);
            $demoId = $input['demoId'] ?? '';
            $sourceType = $input['sourceType'] ?? 'brouillon';
            
            if (!$demoId) {
                throw new Exception('ID de démo manquant');
            }
            
            $result = $demoManager->deleteDemo($demoId, $sourceType);
            echo json_encode($result, JSON_UNESCAPED_UNICODE);
            break;
            
        default:
            throw new Exception('Action non reconnue: ' . $action);
    }
    
} catch (Exception $e) {
    debugLog("Erreur: " . $e->getMessage());
    http_response_code(500);
    echo json_encode([
        'success' => false,
        'message' => 'Erreur: ' . $e->getMessage()
    ], JSON_UNESCAPED_UNICODE);
}
?>



================================================================================
FICHIER: piano-soloB/diagnostic.php
================================================================================
<?php
/**
 * Diagnostic Piano Solo V1.2
 * Vérification de l'état des fichiers et de la configuration
 */

echo "<!DOCTYPE html>
<html lang='fr'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Diagnostic Piano Solo V1.2</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #8b9dc3 0%, #667eea 100%);
            min-height: 100vh;
            padding: 20px;
            margin: 0;
        }
        .container {
            background: rgba(255, 255, 255, 0.96);
            border-radius: 20px;
            padding: 30px;
            max-width: 1200px;
            margin: 0 auto;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .status-section {
            margin: 20px 0;
            padding: 20px;
            border-radius: 10px;
            border-left: 5px solid;
        }
        .status-ok {
            background: #d4edda;
            border-color: #28a745;
            color: #155724;
        }
        .status-warning {
            background: #fff3cd;
            border-color: #ffc107;
            color: #856404;
        }
        .status-error {
            background: #f8d7da;
            border-color: #dc3545;
            color: #721c24;
        }
        .status-info {
            background: #d1ecf1;
            border-color: #17a2b8;
            color: #0c5460;
        }
        .file-list {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }
        .file-item {
            padding: 5px 0;
            border-bottom: 1px solid #e9ecef;
        }
        .file-item:last-child {
            border-bottom: none;
        }
        .file-exists { color: #28a745; }
        .file-missing { color: #dc3545; }
        .back-link {
            display: inline-block;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 8px;
            margin-top: 20px;
            transition: all 0.3s ease;
        }
        .back-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body>
    <div class='container'>
        <h1>🔍 Diagnostic Piano Solo V1.2</h1>";

// Vérifier les fichiers principaux
echo "<div class='status-section status-info'>
    <h3>📄 Fichiers Principaux</h3>";

$mainFiles = [
    'index.php' => 'Interface Unifiée (Public + Admin)',
    'admin.php' => 'Page Admin (Configuration HELP/VIDEO)',
    'includes/piano-core.php' => 'Module Piano Principal',
    'includes/piano-demo-manager.php' => 'Gestionnaire de Démos',
    'includes/help-video-module.js' => 'Module HELP/VIDEO',
    'admin-config.json' => 'Configuration Admin',
    'demospubliques/brouillon/index.json' => 'Index Brouillon',
    'demospubliques/prayers/index.json' => 'Index Prayers',
    'demospubliques/bhajans/index.json' => 'Index Bhajans'
];

foreach ($mainFiles as $file => $description) {
    $exists = file_exists($file);
    $status = $exists ? 'file-exists' : 'file-missing';
    $icon = $exists ? '✅' : '❌';
    echo "<div class='file-item'>
        <span class='$status'>$icon $file</span> - $description
    </div>";
}

echo "</div>";

// Explication sur index-admin.php
echo "<div class='status-section status-warning'>
    <h3>⚠️ À propos de index-admin.php</h3>
    <p><strong>Le fichier index-admin.php a été supprimé intentionnellement lors de la migration vers l'interface unifiée V1.2.</strong></p>
    <p>✅ <strong>Raison :</strong> L'interface a été fusionnée en un seul fichier <code>index.php</code> qui gère à la fois le mode public et le mode admin.</p>
    <p>✅ <strong>Avantages :</strong></p>
    <ul>
        <li>Une seule page à maintenir</li>
        <li>Transition fluide entre public et admin</li>
        <li>Code plus simple et cohérent</li>
        <li>Pas de duplication de code</li>
    </ul>
    <p>✅ <strong>Fonctionnement actuel :</strong></p>
    <ul>
        <li>Mode public par défaut</li>
        <li>3 clics sur le logo 🎹 + mot de passe pour accéder au mode admin</li>
        <li>Barre de liens admin en bas de page</li>
        <li>Lien 'Mode Public' pour ouvrir l'interface publique dans un nouvel onglet</li>
    </ul>
</div>";

// Vérifier les dossiers de démos
echo "<div class='status-section status-info'>
    <h3>📁 Dossiers de Démonstrations</h3>";

$demoDirs = [
    'demospubliques/brouillon',
    'demospubliques/prayers', 
    'demospubliques/bhajans',
    'videos'
];

foreach ($demoDirs as $dir) {
    $exists = is_dir($dir);
    $status = $exists ? 'file-exists' : 'file-missing';
    $icon = $exists ? '✅' : '❌';
    echo "<div class='file-item'>
        <span class='$status'>$icon $dir/</span>
    </div>";
}

echo "</div>";

// Vérifier les modules JavaScript
echo "<div class='status-section status-info'>
    <h3>🔧 Modules JavaScript</h3>";

$jsModules = [
    'includes/js/module-manager.js' => 'Gestionnaire de Modules',
    'includes/js/demos-loader.js' => 'Chargeur de Démos',
    'includes/js/menu-handlers.js' => 'Gestionnaires de Menu',
    'includes/help-video-module.js' => 'Module HELP/VIDEO'
];

foreach ($jsModules as $file => $description) {
    $exists = file_exists($file);
    $status = $exists ? 'file-exists' : 'file-missing';
    $icon = $exists ? '✅' : '❌';
    echo "<div class='file-item'>
        <span class='$status'>$icon $file</span> - $description
    </div>";
}

echo "</div>";

// Informations système
echo "<div class='status-section status-info'>
    <h3>💻 Informations Système</h3>
    <p><strong>Version PHP :</strong> " . phpversion() . "</p>
    <p><strong>Version Piano Solo :</strong> V1.2 (Interface Unifiée)</p>
    <p><strong>Date de diagnostic :</strong> " . date('d/m/Y H:i:s') . "</p>
    <p><strong>Dossier de travail :</strong> " . getcwd() . "</p>
</div>";

// Instructions
echo "<div class='status-section status-ok'>
    <h3>🎯 Instructions d'Utilisation</h3>
    <p><strong>Mode Public :</strong> Accès direct à <code>index.php</code></p>
    <p><strong>Mode Admin :</strong> 3 clics sur le logo 🎹 + mot de passe 'murali'</p>
    <p><strong>Page Admin :</strong> <code>admin.php</code> pour configurer HELP/VIDEO</p>
    <p><strong>Barre de liens :</strong> Visible en bas de page en mode admin</p>
</div>";

echo "<a href='index.php' class='back-link'>🔙 Retour à l'Interface Principale</a>
    </div>
</body>
</html>";
?>







================================================================================
FICHIER: piano-soloB/edit-display-names.php
================================================================================
<?php
/**
 * Script pour éditer les noms d'affichage des démos
 * Permet à l'utilisateur de modifier les noms visibles sans toucher aux noms techniques
 */

// Configuration
$libraries = [
    'demospubliques/brouillon' => 'Brouillon',
    'demospubliques/prayers' => 'Prayers',
    'demospubliques/bhajans' => 'Bhajans'
];

// Traitement des actions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['action']) && $_POST['action'] === 'update') {
        $library = $_POST['library'];
        $technicalName = $_POST['technical_name'];
        $newDisplayName = trim($_POST['display_name']);
        
        if (!empty($newDisplayName) && isset($libraries[$library])) {
            $indexFile = $library . '/index.json';
            
            if (file_exists($indexFile)) {
                $index = json_decode(file_get_contents($indexFile), true);
                
                foreach ($index as &$demo) {
                    if ($demo['technicalName'] === $technicalName) {
                        $oldName = $demo['displayName'] ?? $demo['name'] ?? 'Sans nom';
                        $demo['displayName'] = $newDisplayName;
                        $demo['name'] = $newDisplayName; // Compatibilité
                        $demo['lastModified'] = date('c');
                        
                        file_put_contents($indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
                        
                        echo json_encode([
                            'success' => true,
                            'message' => "Nom modifié : {$oldName} → {$newDisplayName}"
                        ]);
                        exit;
                    }
                }
            }
        }
        
        echo json_encode([
            'success' => false,
            'message' => 'Erreur lors de la modification'
        ]);
        exit;
    }
}

// Affichage de l'interface
?>
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Édition des Noms d'Affichage - Piano Solo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            margin: 0;
        }
        
        .container {
            background: rgba(255, 255, 255, 0.96);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            max-width: 1200px;
            margin: 0 auto;
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
        }
        
        .library-section {
            margin-bottom: 40px;
            padding: 20px;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            background: #f8f9fa;
        }
        
        .library-title {
            color: #2c3e50;
            font-size: 24px;
            margin-bottom: 20px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        
        .demo-item {
            display: flex;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .demo-item:hover {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .demo-info {
            flex: 1;
            margin-right: 20px;
        }
        
        .demo-display-name {
            font-size: 18px;
            font-weight: bold;
            color: #2c3e50;
            margin-bottom: 5px;
        }
        
        .demo-technical-name {
            font-size: 12px;
            color: #6c757d;
            font-family: monospace;
        }
        
        .demo-filename {
            font-size: 11px;
            color: #adb5bd;
            font-family: monospace;
        }
        
        .edit-form {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .edit-input {
            padding: 8px 12px;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
            min-width: 200px;
        }
        
        .edit-input:focus {
            border-color: #3498db;
            outline: none;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .btn-edit {
            background: #ffc107;
            color: #000;
        }
        
        .btn-edit:hover {
            background: #e0a800;
        }
        
        .btn-save {
            background: #28a745;
            color: white;
        }
        
        .btn-save:hover {
            background: #218838;
        }
        
        .btn-cancel {
            background: #6c757d;
            color: white;
        }
        
        .btn-cancel:hover {
            background: #5a6268;
        }
        
        .status {
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-weight: bold;
        }
        
        .status.success {
            background: #d4edda;
            color: #155724;
        }
        
        .status.error {
            background: #f8d7da;
            color: #721c24;
        }
        
        .back-link {
            display: inline-block;
            margin-bottom: 20px;
            color: #3498db;
            text-decoration: none;
            font-weight: bold;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="index.php" class="back-link">← Retour à l'interface principale</a>
        
        <h1>✏️ Édition des Noms d'Affichage</h1>
        
        <div class="status success">
            <strong>💡 Système de noms dual :</strong> Vous pouvez modifier les noms d'affichage sans affecter la gestion technique des fichiers.
        </div>
        
        <div id="status-message"></div>
        
        <?php foreach ($libraries as $libraryPath => $libraryName): ?>
            <div class="library-section">
                <h2 class="library-title">📁 <?= htmlspecialchars($libraryName) ?></h2>
                
                <?php
                $indexFile = $libraryPath . '/index.json';
                if (file_exists($indexFile)) {
                    $index = json_decode(file_get_contents($indexFile), true);
                    
                    if (is_array($index) && !empty($index)) {
                        foreach ($index as $demo) {
                            $technicalName = $demo['technicalName'] ?? '';
                            $displayName = $demo['displayName'] ?? $demo['name'] ?? 'Sans nom';
                            $filename = $demo['filename'] ?? '';
                            ?>
                            <div class="demo-item">
                                <div class="demo-info">
                                    <div class="demo-display-name"><?= htmlspecialchars($displayName) ?></div>
                                    <div class="demo-technical-name">ID: <?= htmlspecialchars($technicalName) ?></div>
                                    <div class="demo-filename">Fichier: <?= htmlspecialchars($filename) ?></div>
                                </div>
                                
                                <div class="edit-form">
                                    <input type="text" 
                                           class="edit-input" 
                                           value="<?= htmlspecialchars($displayName) ?>" 
                                           placeholder="Nouveau nom d'affichage"
                                           data-original="<?= htmlspecialchars($displayName) ?>"
                                           data-technical="<?= htmlspecialchars($technicalName) ?>"
                                           data-library="<?= htmlspecialchars($libraryPath) ?>">
                                    <button class="btn btn-edit" onclick="editName(this)">✏️ Modifier</button>
                                    <button class="btn btn-save" onclick="saveName(this)" style="display: none;">💾 Sauvegarder</button>
                                    <button class="btn btn-cancel" onclick="cancelEdit(this)" style="display: none;">❌ Annuler</button>
                                </div>
                            </div>
                            <?php
                        }
                    } else {
                        echo '<p>Aucune démo dans cette bibliothèque.</p>';
                    }
                } else {
                    echo '<p>Bibliothèque non trouvée.</p>';
                }
                ?>
            </div>
        <?php endforeach; ?>
    </div>
    
    <script>
        function editName(button) {
            const form = button.parentElement;
            const input = form.querySelector('.edit-input');
            const saveBtn = form.querySelector('.btn-save');
            const cancelBtn = form.querySelector('.btn-cancel');
            
            input.disabled = false;
            input.focus();
            input.select();
            
            button.style.display = 'none';
            saveBtn.style.display = 'inline-block';
            cancelBtn.style.display = 'inline-block';
        }
        
        function saveName(button) {
            const form = button.parentElement;
            const input = form.querySelector('.edit-input');
            const editBtn = form.querySelector('.btn-edit');
            const cancelBtn = form.querySelector('.btn-cancel');
            
            const newName = input.value.trim();
            const originalName = input.dataset.original;
            const technicalName = input.dataset.technical;
            const library = input.dataset.library;
            
            if (newName === originalName) {
                cancelEdit(button);
                return;
            }
            
            if (newName.length < 2) {
                alert('Le nom doit contenir au moins 2 caractères.');
                return;
            }
            
            // Envoyer la modification au serveur
            const formData = new FormData();
            formData.append('action', 'update');
            formData.append('library', library);
            formData.append('technical_name', technicalName);
            formData.append('display_name', newName);
            
            fetch('edit-display-names.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showStatus(data.message, 'success');
                    input.dataset.original = newName;
                    input.disabled = true;
                    button.style.display = 'none';
                    cancelBtn.style.display = 'none';
                    editBtn.style.display = 'inline-block';
                    
                    // Mettre à jour l'affichage
                    const demoInfo = form.parentElement.querySelector('.demo-display-name');
                    demoInfo.textContent = newName;
                } else {
                    showStatus(data.message, 'error');
                }
            })
            .catch(error => {
                showStatus('Erreur lors de la sauvegarde', 'error');
                console.error('Erreur:', error);
            });
        }
        
        function cancelEdit(button) {
            const form = button.parentElement;
            const input = form.querySelector('.edit-input');
            const editBtn = form.querySelector('.btn-edit');
            const saveBtn = form.querySelector('.btn-save');
            
            input.value = input.dataset.original;
            input.disabled = true;
            
            button.style.display = 'none';
            saveBtn.style.display = 'none';
            editBtn.style.display = 'inline-block';
        }
        
        function showStatus(message, type) {
            const statusDiv = document.getElementById('status-message');
            statusDiv.innerHTML = `<div class="status ${type}">${message}</div>`;
            
            setTimeout(() => {
                statusDiv.innerHTML = '';
            }, 3000);
        }
    </script>
</body>
</html>



================================================================================
FICHIER: piano-soloB/fix-brouillon-index.php
================================================================================
<?php
/**
 * Script pour corriger l'index.json du brouillon
 */

$brouillonDir = 'demospubliques/brouillon/';
$indexFile = $brouillonDir . 'index.json';

echo "🔧 Correction de l'index.json du brouillon...\n\n";

// Lire l'index actuel
if (file_exists($indexFile)) {
    $indexContent = file_get_contents($indexFile);
    $index = json_decode($indexContent, true);
    
    echo "📄 Index actuel:\n";
    print_r($index);
    echo "\n";
    
    // Créer un nouvel index avec la structure correcte
    $newIndex = [
        "category" => "brouillon",
        "description" => "Zone de staging pour les démos avant validation",
        "created" => "2025-08-12T15:48:00Z",
        "demos" => []
    ];
    
    // Extraire les démos de l'ancienne structure
    foreach ($index as $key => $value) {
        if (is_numeric($key) && is_array($value)) {
            // C'est une démo
            $newIndex['demos'][] = $value;
        }
    }
    
    // Vérifier que les fichiers existent
    $validDemos = [];
    foreach ($newIndex['demos'] as $demo) {
        $filename = $demo['filename'] ?? '';
        $filepath = $brouillonDir . $filename;
        
        if (file_exists($filepath)) {
            $validDemos[] = $demo;
            echo "✅ Fichier trouvé: $filename\n";
        } else {
            echo "❌ Fichier manquant: $filename\n";
        }
    }
    
    $newIndex['demos'] = $validDemos;
    
    // Écrire le nouvel index
    if (file_put_contents($indexFile, json_encode($newIndex, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE))) {
        echo "\n✅ Index corrigé avec " . count($validDemos) . " démos valides\n";
        echo "📄 Nouvel index:\n";
        print_r($newIndex);
    } else {
        echo "\n❌ Erreur lors de l'écriture de l'index\n";
    }
    
} else {
    echo "❌ Fichier index.json non trouvé\n";
}

echo "\n🎉 Correction terminée !\n";
?>







================================================================================
FICHIER: piano-soloB/fix-demo-names-dual-system.php
================================================================================
<?php
/**
 * Script pour implémenter un système de noms dual
 * - nom technique : pour la gestion système (unique, stable)
 * - nom d'affichage : pour l'utilisateur (lisible, modifiable)
 */

echo "🎯 Implémentation du système de noms dual...\n";

function generateTechnicalName($originalName) {
    // Générer un nom technique unique basé sur le timestamp et un hash
    $timestamp = time();
    $hash = substr(md5($originalName . $timestamp), 0, 8);
    return "demo_{$timestamp}_{$hash}";
}

function extractDisplayName($filename) {
    // Extraire un nom d'affichage lisible du filename
    $filename = str_replace('.json', '', $filename);
    
    // Supprimer le préfixe "demo_"
    $filename = preg_replace('/^demo_/', '', $filename);
    
    // Extraire la partie descriptive (avant le premier timestamp)
    $parts = explode('_', $filename);
    $descriptiveParts = [];
    
    foreach ($parts as $part) {
        // Si c'est un timestamp (10+ chiffres) ou un ID hex (8+ caractères), arrêter
        if (is_numeric($part) && strlen($part) >= 10) {
            break;
        }
        if (strlen($part) >= 8 && ctype_xdigit($part)) {
            break;
        }
        $descriptiveParts[] = $part;
    }
    
    $displayName = implode('_', $descriptiveParts);
    
    // Nettoyer et formater
    $displayName = str_replace('_', ' ', $displayName);
    $displayName = ucwords($displayName);
    $displayName = trim($displayName);
    
    // Si le nom est vide ou trop court, utiliser un nom par défaut
    if (strlen($displayName) < 3) {
        $displayName = 'Démo ' . substr($filename, 0, 10);
    }
    
    return $displayName;
}

function updateLibraryWithDualNames($libraryPath) {
    echo "\n📁 Traitement de: $libraryPath\n";
    
    if (!is_dir($libraryPath)) {
        echo "❌ Dossier non trouvé: $libraryPath\n";
        return;
    }
    
    $indexFile = $libraryPath . '/index.json';
    if (!file_exists($indexFile)) {
        echo "❌ Fichier index.json non trouvé dans: $libraryPath\n";
        return;
    }
    
    $index = json_decode(file_get_contents($indexFile), true);
    if (!$index || !is_array($index)) {
        echo "❌ Format d'index invalide dans: $libraryPath\n";
        return;
    }
    
    $updated = false;
    
    foreach ($index as &$demo) {
        $filename = $demo['filename'] ?? '';
        $currentName = $demo['name'] ?? '';
        
        // Générer un nom technique unique si nécessaire
        if (empty($demo['technicalName'])) {
            $technicalName = generateTechnicalName($currentName ?: $filename);
            $demo['technicalName'] = $technicalName;
            echo "  🔧 Nom technique généré: {$technicalName}\n";
            $updated = true;
        }
        
        // Extraire ou améliorer le nom d'affichage
        $displayName = extractDisplayName($filename);
        
        // Si le nom actuel est technique, le remplacer par le nom d'affichage
        if (empty($currentName) || 
            strpos($currentName, 'demo_') === 0 || 
            preg_match('/^\d+$/', $currentName) ||
            strlen($currentName) < 3 ||
            strpos($currentName, '_') !== false && preg_match('/\d{10,}/', $currentName)) {
            
            if ($displayName !== $currentName) {
                echo "  📝 {$currentName} → {$displayName}\n";
                $demo['name'] = $displayName;
                $demo['displayName'] = $displayName;
                $updated = true;
            }
        } else {
            // Le nom actuel est déjà lisible, le conserver
            $demo['displayName'] = $currentName;
        }
        
        // S'assurer que le filename n'a pas de double extension
        if (strpos($filename, '.json.json') !== false) {
            $cleanFilename = str_replace('.json.json', '.json', $filename);
            echo "  🔧 Correction extension: {$filename} → {$cleanFilename}\n";
            $demo['filename'] = $cleanFilename;
            $updated = true;
        }
        
        // Ajouter des métadonnées utiles
        if (empty($demo['added'])) {
            $demo['added'] = date('c');
        }
        
        if (empty($demo['lastModified'])) {
            $demo['lastModified'] = date('c');
        }
    }
    
    if ($updated) {
        // Sauvegarder l'index mis à jour
        file_put_contents($indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        echo "✅ Index mis à jour pour: $libraryPath\n";
    } else {
        echo "ℹ️ Aucune modification nécessaire pour: $libraryPath\n";
    }
}

// Traiter toutes les bibliothèques
$libraries = [
    'demospubliques/brouillon',
    'demospubliques/prayers',
    'demospubliques/bhajans'
];

foreach ($libraries as $library) {
    updateLibraryWithDualNames($library);
}

echo "\n🎉 Système de noms dual implémenté !\n";
echo "📋 Structure des données :\n";
echo "  - technicalName : nom unique pour le système\n";
echo "  - displayName : nom lisible pour l'utilisateur\n";
echo "  - name : alias vers displayName (compatibilité)\n";
echo "  - filename : nom du fichier physique\n";
?>



================================================================================
FICHIER: piano-soloB/fix-demo-names.php
================================================================================
<?php
/**
 * Script pour nettoyer et corriger les noms de démos existantes
 * Extrait des noms plus lisibles des filenames techniques
 * Corrige les problèmes de double extension et de noms alphanumériques
 */

echo "🧹 Nettoyage et correction des noms de démos...\n";

function extractReadableName($filename) {
    // Supprimer l'extension .json
    $filename = str_replace('.json', '', $filename);
    
    // Supprimer le préfixe "demo_"
    $filename = preg_replace('/^demo_/', '', $filename);
    
    // Extraire la partie descriptive (avant le premier timestamp)
    $parts = explode('_', $filename);
    $descriptiveParts = [];
    
    foreach ($parts as $part) {
        // Si c'est un timestamp (10+ chiffres) ou un ID hex (16 caractères), arrêter
        if (is_numeric($part) && strlen($part) >= 10) {
            break;
        }
        if (strlen($part) === 16 && ctype_xdigit($part)) {
            break;
        }
        $descriptiveParts[] = $part;
    }
    
    $readableName = implode('_', $descriptiveParts);
    
    // Nettoyer et formater
    $readableName = str_replace('_', ' ', $readableName);
    $readableName = ucwords($readableName);
    $readableName = trim($readableName);
    
    // Si le nom est vide ou trop court, utiliser un nom par défaut
    if (strlen($readableName) < 3) {
        $readableName = 'Démo ' . substr($filename, 0, 10);
    }
    
    return $readableName;
}

function cleanLibraryNames($libraryPath) {
    echo "\n📁 Traitement de: $libraryPath\n";
    
    if (!is_dir($libraryPath)) {
        echo "❌ Dossier non trouvé: $libraryPath\n";
        return;
    }
    
    $indexFile = $libraryPath . '/index.json';
    if (!file_exists($indexFile)) {
        echo "❌ Fichier index.json non trouvé dans: $libraryPath\n";
        return;
    }
    
    $index = json_decode(file_get_contents($indexFile), true);
    if (!$index || !isset($index['demos'])) {
        echo "❌ Format d'index invalide dans: $libraryPath\n";
        return;
    }
    
    $updated = false;
    
    foreach ($index['demos'] as &$demo) {
        $originalName = $demo['name'] ?? '';
        $filename = $demo['filename'] ?? '';
        
        // Si le nom actuel est vide ou trop technique, le corriger
        if (empty($originalName) || 
            strpos($originalName, 'demo_') === 0 || 
            preg_match('/^\d+$/', $originalName) ||
            strlen($originalName) < 3) {
            
            $newName = extractReadableName($filename);
            
            if ($newName !== $originalName) {
                echo "  🔄 {$originalName} → {$newName}\n";
                $demo['name'] = $newName;
                $demo['originalName'] = $newName;
                $updated = true;
            }
        }
        
        // S'assurer que le filename n'a pas de double extension
        if (strpos($filename, '.json.json') !== false) {
            $cleanFilename = str_replace('.json.json', '.json', $filename);
            echo "  🔧 Correction extension: {$filename} → {$cleanFilename}\n";
            $demo['filename'] = $cleanFilename;
            $updated = true;
        }
    }
    
    if ($updated) {
        // Sauvegarder l'index mis à jour
        file_put_contents($indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
        echo "✅ Index mis à jour pour: $libraryPath\n";
    } else {
        echo "ℹ️ Aucune modification nécessaire pour: $libraryPath\n";
    }
}

// Traiter toutes les bibliothèques
$libraries = [
    'demospubliques/brouillon',
    'demospubliques/prayers',
    'demospubliques/bhajans'
];

foreach ($libraries as $library) {
    cleanLibraryNames($library);
}

echo "\n🎉 Nettoyage et correction terminés !\n";
echo "📋 Vérifiez maintenant les noms dans l'interface admin.\n";
?>



================================================================================
FICHIER: piano-soloB/index-admin.php
================================================================================
<!-- piano-solo/test-complet.php -->
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Piano Harmonium Complet</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #8b9dc3 0%, #667eea 100%);
            min-height: 100vh;
            padding: 5px;
            margin: 0;
            overflow-x: hidden;
        }

        .container {
            background: rgba(255, 255, 255, 0.96);
            border-radius: 20px;
            padding: 0px 30px 30px 30px;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            max-width: 1400px;
            margin: 0 auto;
            position: relative;
            overflow: visible;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
        }
		
		        h4 {
            text-align: center;
            color: #96bcc5;
            margin-bottom: 5px;
        }
        
        /* Indicateur de synchronisation */
        .sync-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(40, 167, 69, 0.9);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 1000;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }
        
        .sync-indicator.playing {
            background: rgba(220, 53, 69, 0.9);
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .btn-play-admin.playing,
        .btn-play.playing,
        .demo-play-btn.playing,
        .menu-play-btn.playing,
        .keyboard-play-btn.playing,
        .play-btn.playing,
        #playBtn.playing {
            background: #dc3545 !important;
            animation: pulse 1s infinite;
        }
        
        /* Style pour les notes actives en pause */
        .key.active-pause {
            background-color: #ffeb3b !important;
            box-shadow: 0 0 10px #ffeb3b !important;
            animation: none !important;
        }
        
        /* Bouton supprimé - plus nécessaire */
        

    </style>
</head>
<body>
    <!-- Indicateur de synchronisation -->
    <div id="syncIndicator" class="sync-indicator">
        🔄 Synchronisé - Aucune lecture
    </div>

    <!-- Bouton supprimé - le gestionnaire est maintenant toujours visible -->

    <div class="container">
        <?php include 'includes/piano-notation.php'; ?>
        <?php include 'includes/piano-core.php'; ?>
        <?php include 'includes/piano-harmonium.php'; ?>
        <?php include 'includes/piano-recorder.php'; ?>
        <?php include 'includes/piano-save-upload.php'; ?>
        <?php include 'includes/piano-demo-manager.php'; ?>
        <?php include 'includes/piano-midi.php'; ?>
    </div>
    

    
    <!-- Gestionnaire de modules -->
    <script src="includes/js/module-manager.js"></script>
    <!-- Chargeur de démos -->
    <script src="includes/js/demos-loader.js"></script>
    <!-- JavaScript centralisé -->
    <script src="includes/js/menu-handlers.js"></script>
    
    <!-- Initialisation des modules -->
    <script>
        // Variables de synchronisation globales
        let currentPlayingButton = null;
        let currentPlayingDemo = null;
        let playbackTimer = null;
        let playbackProgress = 0;
        
        // Fonction pour arrêter toutes les lectures
        function stopAllPlayback() {
            console.log('🛑 Arrêt de toutes les lectures...');
            
            // Arrêter le bouton actuellement en lecture
            if (currentPlayingButton) {
                currentPlayingButton.classList.remove('playing');
                currentPlayingButton.innerHTML = '▶️';
                currentPlayingButton = null;
            }
            
            // Arrêter TOUS les boutons de lecture qui pourraient être actifs
            document.querySelectorAll('.btn-play.playing, .btn-play-admin.playing, .demo-play-btn.playing, .menu-play-btn.playing, .keyboard-play-btn.playing, .play-btn.playing, #playBtn.playing').forEach(btn => {
                btn.classList.remove('playing');
                btn.innerHTML = '▶️';
            });
            
            // Arrêter le timer
            if (playbackTimer) {
                clearInterval(playbackTimer);
                playbackTimer = null;
            }
            
            currentPlayingDemo = null;
            playbackProgress = 0;
            
            // Mettre à jour l'indicateur visuel
            updateSyncIndicator();
            
            console.log('🛑 Toutes les lectures arrêtées');
        }
        
        // Fonction pour mettre à jour l'indicateur de synchronisation
        function updateSyncIndicator() {
            const indicator = document.getElementById('syncIndicator');
            if (indicator) {
                if (currentPlayingDemo) {
                    indicator.textContent = `🎵 Lecture: ${currentPlayingDemo}`;
                    indicator.classList.add('playing');
                } else {
                    indicator.textContent = '🔄 Synchronisé - Aucune lecture';
                    indicator.classList.remove('playing');
                }
            }
        }
        
        // Fonction pour démarrer une lecture avec synchronisation
        function startSynchronizedPlayback(library, demoId, button) {
            console.log(`🎵 Démarrage lecture synchronisée: ${demoId} (${library})`);
            
            // Arrêter toute lecture en cours
            stopAllPlayback();
            
            // Démarrer la nouvelle lecture
            currentPlayingButton = button;
            currentPlayingDemo = `${demoId} (${library})`;
            
            button.classList.add('playing');
            button.innerHTML = '⏸️';
            
            // Mettre à jour l'indicateur visuel
            updateSyncIndicator();
            
            // Ici on pourrait appeler le vrai système de lecture
            // Pour l'instant, on simule juste la synchronisation
            console.log(`✅ Lecture synchronisée démarrée: ${currentPlayingDemo}`);
        }
        
        // Initialiser les modules après le chargement de la page
        window.addEventListener('load', () => {
            console.log('🎹 Initialisation des modules Piano Solo Admin...');
            
            // Initialiser le gestionnaire de modules
            if (window.MODULE_MANAGER) {
                MODULE_MANAGER.initialize();
            }
            
            // Initialiser les gestionnaires de menus
            if (window.MENU_HANDLERS) {
                MENU_HANDLERS.init();
            }
            
            // Initialiser le chargeur de démos
            if (window.DEMOS_LOADER) {
                DEMOS_LOADER.init();
            }
            
            // Initialiser le gestionnaire de démos
            if (window.DEMO_MANAGER) {
                DEMO_MANAGER.init();
                // Forcer le rechargement des tables après un délai
                setTimeout(() => {
                    console.log('🔄 Forçage du rechargement des tables...');
                    DEMO_MANAGER.loadAllTables();
                }, 2000);
                
                // Forcer un second rechargement pour nettoyer les fantômes
                setTimeout(() => {
                    console.log('🧹 Nettoyage des données fantômes...');
                    DEMO_MANAGER.loadAllTables();
                }, 4000);
            }
            
            // Initialiser le module RECORDER (important pour la lecture des démos)
            if (window.RECORDER_MODULE) {
                console.log('🎵 Initialisation du module RECORDER...');
                window.RECORDER_MODULE.init();
            } else {
                console.error('❌ Module RECORDER non trouvé !');
            }
            
            // Ajouter la synchronisation aux boutons de lecture existants
            setTimeout(() => {
                addSynchronizationToExistingButtons();
            }, 1000);
            
            console.log('🔄 Système de synchronisation initialisé');
        });
        
        // Fonction pour ajouter la synchronisation aux boutons existants
        function addSynchronizationToExistingButtons() {
            // Sélectionner TOUS les types de boutons de lecture
            const playButtons = document.querySelectorAll(
                '.btn-play, .btn-play-admin, .demo-play-btn, .menu-play-btn, .keyboard-play-btn, .play-btn, #playBtn'
            );
            
            console.log(`🔍 Trouvé ${playButtons.length} boutons de lecture à synchroniser`);
            
            playButtons.forEach(button => {
                // Sauvegarder l'ancien onclick
                const oldOnClick = button.onclick;
                
                // Remplacer par la version synchronisée
                button.onclick = function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Identifier le type de bouton et récupérer les informations
                    let demoName = 'Démo';
                    let library = 'unknown';
                    
                    // Boutons des tables admin
                    const demoItem = button.closest('.demo-item-admin, .demo-item, .table-row');
                    if (demoItem) {
                        demoName = demoItem.querySelector('.demo-name-admin, .demo-name, .row-title')?.textContent || 'Démo';
                        library = demoItem.closest('.demo-table-container')?.querySelector('.table-header h4')?.textContent?.trim().split(' ')[1] || 'unknown';
                    }
                    // Boutons des menus dropdown
                    else if (button.closest('.menu-dropdown')) {
                        demoName = button.closest('.demo-item')?.querySelector('.demo-name')?.textContent || 'Démo Menu';
                        library = button.closest('.menu-dropdown')?.querySelector('.menu-header')?.textContent?.trim() || 'menu';
                    }
                    // Boutons de la barre de contrôle
                    else if (button.closest('.demo-controls')) {
                        demoName = 'Démo Clavier';
                        library = 'keyboard';
                    }
                    // Boutons d'enregistrement
                    else if (button.id === 'playBtn') {
                        demoName = 'Enregistrement';
                        library = 'recorder';
                    }
                    
                    console.log(`🎵 Clic sur bouton play: ${demoName} (${library})`);
                    startSynchronizedPlayback(library.toLowerCase(), demoName, button);
                    
                    // Appeler l'ancien onclick si il existe
                    if (oldOnClick) {
                        oldOnClick.call(this, e);
                    }
                };
            });
            
            console.log(`✅ Synchronisation ajoutée à ${playButtons.length} boutons de lecture`);
        }
        
        // Raccourci clavier pour arrêter toutes les lectures
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                e.preventDefault();
                stopAllPlayback();
                console.log('🛑 Arrêt par raccourci clavier (Espace)');
            }
        });
    </script>
</body>
</html>


================================================================================
FICHIER: piano-soloB/index.php
================================================================================
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Piano Solo - Interface Unifiée</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #8b9dc3 0%, #667eea 100%);
            min-height: 100vh;
            padding: 5px;
            margin: 0;
            overflow-x: hidden;
        }

        .container {
            background: rgba(255, 255, 255, 0.96);
            border-radius: 20px;
            padding: 0px 10px 10px 10px;
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
            max-width: 1400px;
            margin: 0 auto;
            position: relative;
            overflow: visible;
        }
        
        /* Ajouter de l'espace en bas quand on est en mode admin pour la barre de liens */
        .admin-mode .container {
            padding-bottom: 100px;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
        }
		
		h4 {
            text-align: center;
            color: #96bcc5;
            margin-bottom: 5px;
        }
        
        /* Indicateur de synchronisation */
        .sync-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(40, 167, 69, 0.9);
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 1000;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }
        
        .sync-indicator.playing {
            background: rgba(220, 53, 69, 0.9);
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .btn-play-admin.playing,
        .btn-play.playing:not(#playBtn),
        .demo-play-btn.playing,
        .menu-play-btn.playing,
        .keyboard-play-btn.playing,
        .play-btn.playing {
            background: #dc3545 !important;
            animation: pulse 1s infinite;
        }
        
        /* Style pour les notes actives en pause */
        .key.active-pause {
            background-color: #ffeb3b !important;
            animation: none !important;
        }
        
        /* ===== MODE ADMIN ===== */
        .admin-only {
            display: none;
        }
        
        .admin-mode .admin-only {
            display: block;
        }
        
        .admin-mode .public-only {
            display: none;
        }
        
        /* Modal de mot de passe */
        .admin-modal {
            position: relative;
            top: 0;
            left: -50;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1502;
        }
        
        .admin-modal.show {
            display: flex;
        }
        
        .admin-modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            max-width: 400px;
            width: 90%;
        }
        
        .admin-modal input {
            width: 100%;
            padding: 10px;
            margin: 15px 0;
            border: 2px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        
        .admin-modal button {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
        
        .admin-modal button:hover {
            background: #218838;
        }
        
        /* Indicateur de mode admin */
        .admin-indicator {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(220, 53, 69, 0.9);
            color: white;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 12px;
            z-index: 1000000000;
            display: none;
        }
        
        .admin-mode .admin-indicator {
            display: block;
        }
        
        /* ===== MODE PUBLIC ===== */
        .public-only {
            display: block;
        }
        
        .admin-mode .public-only {
            display: none;
        }
        
        /* Styles pour les tableaux glissants */
        .student-tables-container {
            position: fixed;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%) translateY(85%);
            width: 90%;
            max-width: 1200px;
            z-index: 999;
            transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            opacity: 0.95;
            backdrop-filter: blur(10px);
            border-top-left-radius: 15px;
            border-top-right-radius: 15px;
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            border: 1px solid rgba(255, 255, 255, 0.1);
            padding-top: 10px;
        }
        
        .student-tables-container.hidden {
            transform: translateX(-50%) translateY(100%);
            opacity: 0;
            transition: all 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }
        
        .student-tables-container.show {
            transform: translateX(-50%) translateY(0);
            opacity: 0.95;
            transition: all 0.7s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }
        
        /* Hover pour faire monter les bandeaux */
        .student-tables-container:hover {
            transform: translateX(-50%) translateY(0);
            opacity: 0.95;
            transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }
        
        /* Garder les tableaux montés quand on survole le contenu */
        .student-tables-container:hover .student-tables-content {
            /* Pas de changement, juste pour maintenir le hover */
        }
        
        .student-tables-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 10px;
        }
        
        .student-demo-table-container {
            background: rgba(248, 249, 250, 0.9);
            border-radius: 15px 15px 0 0;
            overflow: hidden;
            border: 1px solid rgba(233, 236, 239, 0.8);
            box-shadow: 0 -8px 25px rgba(0, 0, 0, 0.15);
            backdrop-filter: blur(15px);
        }
        
        /* En-têtes des tableaux - non cliquables maintenant */
        .student-table-header {
            background: linear-gradient(135deg, #2980b9 0%, #1f5f8b 100%);
            color: white;
            padding: 12px 15px;
            border-radius: 8px 8px 0 0;
            font-weight: bold;
            text-align: center;
            border-bottom: 2px solid #1f5f8b;
            /* Supprimé: cursor: pointer; */
            /* Supprimé: hover effects */
        }
        
        .student-table-header:active {
            transform: translateY(0);
        }
        
        /* Indicateur visuel que le bandeau est cliquable */
        .student-table-header::after {
            content: '👆';
            font-size: 12px;
            margin-left: 8px;
            opacity: 0.7;
            transition: opacity 0.3s ease;
        }
        
        .student-table-header:hover::after {
            opacity: 1;
        }
        
        .student-table-header h4 {
            margin: 0;
            color: white;
            font-size: 14px;
            font-weight: 600;
        }
        
        .student-table-count {
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
        }
        
        .student-demo-table {
            height: 200px;
            overflow-y: auto;
            background: rgba(255, 255, 255, 0.7);
        }
        
        .student-table-content {
            padding: 8px;
        }
        
        .student-demo-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 10px;
            border-bottom: 1px solid rgba(233, 236, 239, 0.6);
            transition: all 0.2s ease;
            border-radius: 8px;
            margin-bottom: 2px;
        }
        
        .student-demo-row:hover {
            background: rgba(248, 249, 250, 0.8);
            transform: translateX(2px);
        }
        
        .student-demo-title {
            font-weight: 600;
            color: #2c3e50;
            flex: 1;
            font-size: 13px;
        }
        
        .student-play-btn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 11px;
            font-weight: 600;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
        }
        
        .student-play-btn:hover {
            background: linear-gradient(135deg, #218838 0%, #1ea085 100%);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);
        }
        
        .student-play-btn.playing {
            background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
            animation: pulse 1s infinite;
        }
        
        .empty-table {
            text-align: center;
            color: #6c757d;
            padding: 20px;
            font-style: italic;
            font-size: 13px;
        }
        
        /* Bouton Synchroniser intégré dans l'en-tête */
        .sync-button-container {
            position: absolute;
            top: -40px;
            right: 0;
            z-index: 1000;
        }
        
        .sync-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 11px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
            opacity: 0.9;
        }
        
        .sync-button:hover {
            opacity: 1;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        /* Animation d'apparition/disparition */
        @keyframes slideUp {
            from {
                transform: translateX(-50%) translateY(100%);
                opacity: 0;
            }
            to {
                transform: translateX(-50%) translateY(0);
                opacity: 0.95;
            }
        }
        
        @keyframes slideDown {
            from {
                transform: translateX(-50%) translateY(0);
                opacity: 0.95;
            }
            to {
                transform: translateX(-50%) translateY(100%);
                opacity: 0;
            }
        }
        
        .slide-up {
            animation: slideUp 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        
        .slide-down {
            animation: slideDown 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        
        /* ===== BARRE DE LIENS ADMIN ===== */
        .admin-links-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 20px;
            display: none;
            z-index: 1000;
            box-shadow: 0 -4px 15px rgba(0, 0, 0, 0.2);
            border-top: 2px solid rgba(255, 255, 255, 0.1);
        }
        
        .admin-mode .admin-links-bar {
            display: block;
        }
        
        .admin-links-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
        }
        
        .admin-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .admin-link:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            color: white;
            text-decoration: none;
        }
        
        .admin-link.active {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.4);
        }
        
        .admin-link-icon {
            font-size: 16px;
        }
        
        @media (max-width: 768px) {
            .admin-links-container {
                gap: 10px;
                flex-direction: column;
            }
            
            .admin-link {
                width: 100%;
                justify-content: center;
                padding: 12px 16px;
            }
        }
        
        /* Indicateur de raccourci clavier */
        .keyboard-hint {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            z-index: 998;
            opacity: 0.8;
            transition: opacity 0.3s ease;
            backdrop-filter: blur(10px);
        }
        
        .keyboard-hint:hover {
            opacity: 1;
        }
        
        .keyboard-hint .key {
            background: rgba(255, 255, 255, 0.2);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: monospace;
            font-weight: bold;
            margin: 0 2px;
        }
        

    </style>
</head>
<body>
    <!-- Indicateur de synchronisation -->
    <div id="syncIndicator" class="sync-indicator">
        🔄 Synchronisé - Aucune lecture
    </div>
    
    <!-- Indicateur de mode admin -->
    <div class="admin-indicator" id="adminIndicator">🔧 Mode Admin</div>
    


    <!-- Modal de mot de passe admin -->
    <div class="admin-modal" id="adminModal">
        <div class="admin-modal-content">
            <h3>🔐 Accès Administrateur</h3>
            <p>Entrez le mot de passe pour accéder aux outils d'administration :</p>
            <input type="password" id="adminPassword" placeholder="Mot de passe" />
            <div>
                <button onclick="validateAdminPassword()">🔓 Accéder</button>
                <button onclick="closeAdminModal()">❌ Annuler</button>
            </div>
        </div>
    </div>

    <div class="container" id="mainContainer">

        
        <!-- Mode Public -->
        <div class="public-only">
            <!-- Titre supprimé - Vignette admin uniquement -->
        </div>
        
        <!-- Mode Admin -->
        <div class="admin-only">
            <!-- Titre supprimé - Vignette admin uniquement -->
        </div>

        <!-- Piano Core (toujours visible) -->
        <?php include 'includes/piano-core.php'; ?>
        
        <!-- Modules Admin (cachés par défaut) -->
        <div class="admin-only">
            <?php include 'includes/piano-notation.php'; ?>
            <?php include 'includes/piano-harmonium.php'; ?>
            <?php include 'includes/piano-recorder.php'; ?>
            <?php include 'includes/piano-save-upload.php'; ?>
            <?php include 'includes/piano-demo-manager.php'; ?>
            <s?php include 'includes/piano-midi.php'; ?>
        </div>
        
        <!-- Interface Élève (visible par défaut) -->
        <div class="public-only">
        <!-- Tableaux de démos pour les élèves (READ-ONLY) -->
        <div id="studentDemoTables">
                <div class="student-tables-container" id="studentTablesContainer">
                    <!-- Bouton Synchroniser intégré -->
                    <div class="sync-button-container">
                        <button class="sync-button" onclick="forceReloadStudentTables()">
                            🔄 Synchroniser
                        </button>
                    </div>
                
                <!-- Grille des 2 tableaux -->
                <div class="student-tables-grid">
                    <!-- Tableau Prayers -->
                    <div class="student-demo-table-container">
                            <div class="student-table-header">
                            <h4>🙏 Prayers</h4>
                            <div class="student-table-count" id="studentPrayersCount">0</div>
                        </div>
                        <div class="student-demo-table" id="studentPrayersTable">
                            <div class="student-table-content">
                                <!-- Les prayers seront chargés ici -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- Tableau Bhajans -->
                    <div class="student-demo-table-container">
                            <div class="student-table-header">
                            <h4>🎶 Bhajans</h4>
                            <div class="student-table-count" id="studentBhajansCount">0</div>
                        </div>
                        <div class="student-demo-table" id="studentBhajansTable">
                            <div class="student-table-content">
                                <!-- Les bhajans seront chargés ici -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Barre de liens Admin (visible uniquement en mode admin) -->
    <div class="admin-links-bar">
        <div class="admin-links-container">
            <a href="admin.php" class="admin-link" target="_blank">
                <span class="admin-link-icon">🔧</span>
                Page Admin
            </a>
            <a href="index.php?mode=public" class="admin-link" target="_blank">
                <span class="admin-link-icon">🌐</span>
                Mode Public
            </a>
            <a href="test-admin-help-video.html" class="admin-link" target="_blank">
                <span class="admin-link-icon">🧪</span>
                Test HELP/VIDEO
            </a>
            <a href="test-synchronisation-v1.2.html" class="admin-link" target="_blank">
                <span class="admin-link-icon">🔄</span>
                Test Synchronisation
            </a>
            <a href="diagnostic.php" class="admin-link" target="_blank">
                <span class="admin-link-icon">🔍</span>
                Diagnostic
            </a>
            <a href="edit-display-names.php" class="admin-link" target="_blank">
                <span class="admin-link-icon">✏️</span>
                Éditer Noms Démo
            </a>
            <a href="cleanup-demos.php" class="admin-link" target="_blank">
                <span class="admin-link-icon">🧹</span>
                Nettoyage
            </a>
            <a href="check-libraries.php" class="admin-link" target="_blank">
                <span class="admin-link-icon">📋</span>
                Vérif Bibliothèques
            </a>
            <a href="upload-demo.php" class="admin-link" target="_blank">
                <span class="admin-link-icon">📤</span>
                Upload Démo
            </a>
        </div>
    </div>
    
    <!-- Gestionnaire de modules -->
    <script src="includes/js/module-manager.js"></script>
    <!-- Chargeur de démos -->
    <script src="includes/js/demos-loader.js"></script>
    <!-- JavaScript centralisé -->
    <script src="includes/js/menu-handlers.js"></script>
    <!-- Module HELP et VIDÉO -->
    <script src="includes/help-video-module.js"></script>
    
    <!-- Initialisation des modules -->
    <script>
        // Variables de synchronisation globales
        let currentPlayingButton = null;
        let currentPlayingDemo = null;
        let playbackTimer = null;
        let playbackProgress = 0;
        
        // Variables pour le mode admin
        let adminMode = false;
        let adminClickCount = 0;
        let adminClickTimer = null;
        const ADMIN_PASSWORD = 'murali'; // À changer en production
        
        // Vérifier si on doit forcer le mode public
        function checkForcedPublicMode() {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('mode') === 'public') {
                console.log('🌐 Mode public forcé via URL');
                // Désactiver complètement le mode admin
                adminMode = false;
                document.body.classList.remove('admin-mode');
                localStorage.removeItem('adminMode');
                
                // Masquer le logo admin
                const adminLogo = document.getElementById('adminLogo');
                if (adminLogo) {
                    adminLogo.style.display = 'none';
                }
                
                // Masquer l'indicateur admin
                const adminIndicator = document.getElementById('adminIndicator');
                if (adminIndicator) {
                    adminIndicator.style.display = 'none';
                }
                
                return true; // Mode public forcé
            }
            return false; // Mode normal
        }
        
        // Arrêter toutes les lectures
        window.stopAllPlayback = function() {
            console.log('🛑 Arrêt de toutes les lectures');
            
            // Arrêter la lecture en cours
            if (window.RECORDER_MODULE) {
                window.RECORDER_MODULE.stopPlayback();
            }
            
            // Arrêter toutes les notes
            if (window.stopAllNotes) {
                window.stopAllNotes();
            }
            
            // Garder les tableaux en position bandeau bas (pas de setTimeout)
            const container = document.getElementById('studentTablesContainer');
            if (container) {
                container.classList.remove('show');
                container.classList.remove('hidden');
                // Retour à la position initiale : juste le bandeau visible
            }
            
            console.log('✅ Toutes les lectures arrêtées');
        };
        
        // Fonction pour mettre à jour l'indicateur de synchronisation
        function updateSyncIndicator() {
            const indicator = document.getElementById('syncIndicator');
            if (indicator) {
                if (currentPlayingDemo) {
                    indicator.textContent = `🎵 Lecture: ${currentPlayingDemo}`;
                    indicator.classList.add('playing');
                } else {
                    indicator.textContent = '🔄 Synchronisé - Aucune lecture';
                    indicator.classList.remove('playing');
                }
            }
        }
        
        // ===== GESTION DU MODE ADMIN =====
        
        // Initialiser le système admin
        function initAdminSystem() {
            console.log('🔧 Initialisation du système admin...');
            
            // Vérifier d'abord si le mode public est forcé
            if (checkForcedPublicMode()) {
                console.log('🌐 Mode public forcé - système admin désactivé');
                return; // Ne pas initialiser le système admin
            }
            
            const adminLogo = document.getElementById('adminLogo');
            if (adminLogo) {
                console.log('🎹 Logo admin trouvé, ajout de l\'écouteur de clic');
                adminLogo.addEventListener('click', handleAdminLogoClick);
                console.log('✅ Écouteur de clic ajouté au logo admin');
            } else {
                console.error('❌ Logo admin non trouvé');
            }
            
            // Vérifier si on est déjà en mode admin (session)
            if (localStorage.getItem('adminMode') === 'true') {
                console.log('🔧 Mode admin déjà actif en session');
                activateAdminMode();
            } else {
                console.log('👤 Mode public par défaut');
            }
        }
        
        // Gérer les clics sur le logo admin
        function handleAdminLogoClick() {
            console.log('🎹 Clic sur le logo admin, compteur:', adminClickCount + 1);
            adminClickCount++;
            const adminLogo = document.getElementById('adminLogo');
            
            // Ajouter l'effet visuel
            adminLogo.classList.add('clicked');
            setTimeout(() => adminLogo.classList.remove('clicked'), 200);
            
            // Réinitialiser le timer
            if (adminClickTimer) {
                clearTimeout(adminClickTimer);
            }
            
            // Si 3 clics, ouvrir le modal
            if (adminClickCount >= 3) {
                console.log('🎹 3 clics détectés, ouverture du modal admin');
                openAdminModal();
                adminClickCount = 0;
            } else {
                console.log('🎹 Clic', adminClickCount, 'sur 3, timer démarré');
                // Timer pour réinitialiser le compteur
                adminClickTimer = setTimeout(() => {
                    console.log('🎹 Timer expiré, réinitialisation du compteur');
                    adminClickCount = 0;
                }, 2000);
            }
        }
        
        // Ouvrir le modal admin
        function openAdminModal() {
            console.log('🔐 Ouverture du modal admin');
            const modal = document.getElementById('adminModal');
            if (modal) {
                modal.classList.add('show');
                const passwordInput = document.getElementById('adminPassword');
                if (passwordInput) {
                    passwordInput.focus();
                }
                console.log('✅ Modal admin ouvert');
            } else {
                console.error('❌ Modal admin non trouvé');
            }
        }
        
        // Fermer le modal admin
        function closeAdminModal() {
            const modal = document.getElementById('adminModal');
            modal.classList.remove('show');
            document.getElementById('adminPassword').value = '';
        }
        
        // Valider le mot de passe admin
        function validateAdminPassword() {
            const password = document.getElementById('adminPassword').value;
            
            if (password === ADMIN_PASSWORD) {
                activateAdminMode();
                closeAdminModal();
                localStorage.setItem('adminMode', 'true');
            } else {
                alert('❌ Mot de passe incorrect');
                document.getElementById('adminPassword').value = '';
            }
        }
        
        // Activer le mode admin
        function activateAdminMode() {
            adminMode = true;
            document.body.classList.add('admin-mode');
            console.log('🔧 Mode admin activé');
            
            // Initialiser les modules admin
            if (window.MODULE_MANAGER) {
                MODULE_MANAGER.initialize();
            }
            
            if (window.MENU_HANDLERS) {
                MENU_HANDLERS.init();
            }
            
            if (window.DEMOS_LOADER) {
                DEMOS_LOADER.init();
            }
        }
        
        // Désactiver le mode admin
        function deactivateAdminMode() {
            adminMode = false;
            document.body.classList.remove('admin-mode');
            localStorage.removeItem('adminMode');
            console.log('👤 Mode public activé');
        }
        
        // Exposer les fonctions admin globalement
        window.initAdminSystem = initAdminSystem;
        window.activateAdminMode = activateAdminMode;
        window.deactivateAdminMode = deactivateAdminMode;
        window.openAdminModal = openAdminModal;
        window.closeAdminModal = closeAdminModal;
        window.validateAdminPassword = validateAdminPassword;
        window.handleAdminLogoClick = handleAdminLogoClick;
        
        // ===== FONCTIONS POUR L'INTERFACE ÉLÈVE =====
        
        // Charger les tableaux de démos élèves
        function loadStudentDemoTables() {
            console.log('📚 Chargement des tableaux de démos pour les élèves...');
            
            // Ajouter un timestamp pour éviter le cache
            const timestamp = Date.now();
            
            // Afficher un indicateur de chargement
            showLoadingIndicator();
            
            // Charger les Prayers
            fetch(`demospubliques/prayers/index.json?t=${timestamp}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('📊 Données Prayers:', data);
                    populateStudentTable('studentPrayersTable', 'studentPrayersCount', data, 'prayers');
                })
                .catch(error => {
                    console.error('Erreur chargement Prayers:', error);
                    // Essayer de recharger après un délai
                    setTimeout(() => {
                        console.log('🔄 Nouvelle tentative de chargement Prayers...');
                        loadStudentDemoTables();
                    }, 2000);
                });
            
            // Charger les Bhajans
            fetch(`demospubliques/bhajans/index.json?t=${timestamp}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('📊 Données Bhajans:', data);
                    populateStudentTable('studentBhajansTable', 'studentBhajansCount', data, 'bhajans');
                })
                .catch(error => {
                    console.error('Erreur chargement Bhajans:', error);
                    // Essayer de recharger après un délai
                    setTimeout(() => {
                        console.log('🔄 Nouvelle tentative de chargement Bhajans...');
                        loadStudentDemoTables();
                    }, 2000);
                })
                .finally(() => {
                    // Masquer l'indicateur de chargement
                    hideLoadingIndicator();
                });
        }
        
        // Peupler un tableau élève
        function populateStudentTable(tableId, countId, data, libraryType) {
            console.log(`🎯 Peupler ${tableId} avec ${data.length} démos`);
            
            const table = document.getElementById(tableId);
            const countElement = document.getElementById(countId);
            
            if (!table) {
                console.error(`❌ Table ${tableId} non trouvé`);
                return;
            }
            
            if (countElement) {
                countElement.textContent = data.length;
            }
            
            const content = table.querySelector('.student-table-content');
            if (!content) {
                console.error(`❌ Contenu non trouvé pour ${tableId}`);
                return;
            }
            
            if (!data || data.length === 0) {
                content.innerHTML = '<div class="empty-table">Aucun contenu disponible</div>';
                return;
            }
            
            content.innerHTML = '';
            
            data.forEach(demo => {
                // Priorité pour le nom : originalName > name > filename nettoyé
                let demoName = 'Démo sans nom';
                
                // 1. Utiliser originalName si disponible et différent du filename
                if (demo.originalName && demo.originalName !== demo.filename && demo.originalName.length > 2) {
                    demoName = demo.originalName;
                } 
                // 2. Utiliser name si disponible et différent du filename
                else if (demo.name && demo.name !== demo.filename && demo.name.length > 2) {
                    demoName = demo.name;
                } 
                // 3. Extraire un nom lisible du filename si nécessaire
                else if (demo.filename) {
                    // Nettoyer le filename pour extraire un nom lisible
                    let cleanName = demo.filename;
                    
                    // Supprimer l'extension .json
                    cleanName = cleanName.replace(/\.json$/, '');
                    
                    // Supprimer le préfixe "demo_"
                    cleanName = cleanName.replace(/^demo_/, '');
                    
                    // Supprimer les timestamps et IDs hexadécimaux
                    cleanName = cleanName.replace(/_\d{10,}_[a-f0-9]{16}$/, '');
                    cleanName = cleanName.replace(/_\d{10,}$/, '');
                    cleanName = cleanName.replace(/_[a-f0-9]{16}$/, '');
                    
                    // Remplacer les underscores par des espaces
                    cleanName = cleanName.replace(/_/g, ' ');
                    
                    // Capitaliser
                    cleanName = cleanName.charAt(0).toUpperCase() + cleanName.slice(1);
                    
                    // Si le nom est trop court, utiliser un nom par défaut
                    if (cleanName.length < 3) {
                        demoName = 'Démo ' + demo.filename.substring(0, 8);
                    } else {
                        demoName = cleanName;
                    }
                }
                
                // S'assurer que le filename n'a pas d'extension .json
                let demoFilename = demo.filename || demo.id || 'demo';
                if (demoFilename.endsWith('.json')) {
                    demoFilename = demoFilename.replace('.json', '');
                }
                
                const row = document.createElement('div');
                row.className = 'student-demo-row';
                row.innerHTML = `
                    <div class="student-demo-title">${demoName}</div>
                    <div class="student-demo-actions">
                        <button class="student-play-btn" onclick="playStudentDemo('${demoFilename}', '${libraryType}')">
                            ▶️ Écouter
                        </button>
                    </div>
                `;
                content.appendChild(row);
            });
            
            console.log(`✅ Tableau ${tableId} peuplé avec ${data.length} démos`);
        }
        
        // Lancer la lecture de la démo
        function playStudentDemo(demoId, libraryType) {
            console.log(`🎵 Lecture de démo élève: ${demoId} (${libraryType})`);
            
            // Arrêter toute lecture en cours
            stopAllPlayback();
            
            // Garder les tableaux en position bandeau bas (pas de hideStudentTables)
            const container = document.getElementById('studentTablesContainer');
            if (container) {
                container.classList.remove('show');
                container.classList.remove('hidden');
                // Reste en position initiale : juste le bandeau visible
            }
            
            // Ajouter la classe playing au bouton cliqué
            const buttonElement = document.querySelector(`.student-play-btn[onclick="playStudentDemo('${demoId}', '${libraryType}')"]`);
            if (buttonElement) {
                buttonElement.classList.add('playing');
                buttonElement.innerHTML = '⏸️ Écouter';
            }
            
            // S'assurer que le demoId n'a pas déjà l'extension .json
            let cleanDemoId = demoId;
            if (cleanDemoId.endsWith('.json')) {
                cleanDemoId = cleanDemoId.replace('.json', '');
            }
            
            // Charger et jouer la démo
            fetch(`demospubliques/${libraryType}/${cleanDemoId}.json`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(demoData => {
                    console.log('📄 Données de démo chargées:', demoData);
                    
                    if (window.RECORDER_MODULE && window.RECORDER_MODULE.playRecording) {
                        // Utiliser la méthode playRecording standard
                        if (demoData && demoData.data && demoData.data.recording) {
                            console.log('🎵 Lecture de la démo via RECORDER_MODULE');
                            window.RECORDER_MODULE.playRecording(demoData.data.recording, buttonElement);
                        } else {
                            console.error('Format de démo invalide:', demoData);
                            const buttonElement = document.querySelector(`.student-play-btn[onclick="playStudentDemo('${demoId}', '${libraryType}')"]`);
                            if (buttonElement) {
                                buttonElement.classList.remove('playing');
                                buttonElement.innerHTML = '▶️ Écouter';
                            }
                            alert('Format de démo invalide');
                        }
                    } else {
                        console.error('Module RECORDER non disponible');
                        const buttonElement = document.querySelector(`.student-play-btn[onclick="playStudentDemo('${demoId}', '${libraryType}')"]`);
                        if (buttonElement) {
                            buttonElement.classList.remove('playing');
                            buttonElement.innerHTML = '▶️ Écouter';
                        }
                        alert('Module de lecture non disponible');
                    }
                })
                .catch(error => {
                    console.error('Erreur lors du chargement de la démo:', error);
                    const buttonElement = document.querySelector(`.student-play-btn[onclick="playStudentDemo('${demoId}', '${libraryType}')"]`);
                    if (buttonElement) {
                        buttonElement.classList.remove('playing');
                        buttonElement.innerHTML = '▶️ Écouter';
                    }
                    
                    // Afficher un message d'erreur à l'utilisateur
                    alert(`Erreur lors du chargement de la démo: ${error.message}`);
                });
        }
        
        // Fonction pour afficher les tableaux (maintenant gérée par CSS hover)
        function showStudentTables() {
            const container = document.getElementById('studentTablesContainer');
            if (container && !container.classList.contains('show')) {
                container.classList.add('show');
                container.classList.remove('hidden');
                // Pas d'animation slide-up, transition CSS directe
            }
            console.log('📊 Tableaux élèves affichés');
        }
        
        // Fonction pour cacher les tableaux (maintenant gérée par CSS)
        function hideStudentTables() {
            const container = document.getElementById('studentTablesContainer');
            if (container && container.classList.contains('show')) {
                container.classList.remove('show');
                container.classList.add('hidden');
                // Transition CSS directe vers le bas
            }
            console.log('📊 Tableaux élèves cachés');
        }
        
        // Fonction pour gérer les clics sur les bandeaux des tableaux
        function handleTableHeaderClick() {
            const container = document.getElementById('studentTablesContainer');
            if (container && !container.classList.contains('show')) {
                showStudentTables();
            }
        }

        // Fonction pour forcer le rechargement des tableaux élèves
        function forceReloadStudentTables() {
            console.log('🔄 Forçage du rechargement des tableaux de démos élèves...');
            
            // Afficher un message de synchronisation
            const syncButton = document.querySelector('button[onclick="forceReloadStudentTables()"]');
            if (syncButton) {
                const originalText = syncButton.innerHTML;
                syncButton.innerHTML = '🔄 Synchronisation...';
                syncButton.disabled = true;
                
                setTimeout(() => {
                    syncButton.innerHTML = originalText;
                    syncButton.disabled = false;
                }, 2000);
            }
            
            // Vider le cache du navigateur si possible
            if ('caches' in window) {
                caches.keys().then(names => {
                    names.forEach(name => {
                        caches.delete(name);
                    });
                });
            }
            
            // Recharger après un délai pour s'assurer que le cache est vidé
            setTimeout(() => {
                loadStudentDemoTables();
            }, 100);
        }
        
        // Synchronisation automatique périodique (toutes les 30 secondes)
        function startAutoSync() {
            setInterval(() => {
                console.log('🔄 Synchronisation automatique des tableaux...');
                loadStudentDemoTables();
            }, 30000); // 30 secondes
        }
        
        // Détecter les changements de fichiers et synchroniser
        function detectChangesAndSync() {
            // Vérifier si les fichiers ont changé en comparant les timestamps
            const timestamp = Date.now();
            
            Promise.all([
                fetch(`demospubliques/prayers/index.json?t=${timestamp}`).then(r => r.headers.get('last-modified')),
                fetch(`demospubliques/bhajans/index.json?t=${timestamp}`).then(r => r.headers.get('last-modified'))
            ]).then(timestamps => {
                // Si les timestamps ont changé, recharger
                if (timestamps[0] || timestamps[1]) {
                    console.log('📋 Changements détectés, synchronisation...');
                    loadStudentDemoTables();
                }
            }).catch(error => {
                console.log('📋 Vérification des changements:', error);
            });
        }
        
        // Fonction pour vérifier si les fichiers existent
        function checkFilesExist() {
            const timestamp = Date.now();
            
            // Vérifier les fichiers index.json
            Promise.all([
                fetch(`demospubliques/prayers/index.json?t=${timestamp}`).then(r => r.ok),
                fetch(`demospubliques/bhajans/index.json?t=${timestamp}`).then(r => r.ok)
            ]).then(results => {
                console.log('📋 Vérification des fichiers:', {
                    prayers: results[0],
                    bhajans: results[1]
                });
                
                if (!results[0] || !results[1]) {
                    console.warn('⚠️ Certains fichiers index.json sont manquants');
                }
            }).catch(error => {
                console.error('❌ Erreur lors de la vérification des fichiers:', error);
            });
        }
        
        // Afficher un indicateur de chargement
        function showLoadingIndicator() {
            const prayersContent = document.querySelector('#studentPrayersTable .student-table-content');
            const bhajansContent = document.querySelector('#studentBhajansTable .student-table-content');
            
            if (prayersContent) {
                prayersContent.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">🔄 Chargement...</div>';
            }
            if (bhajansContent) {
                bhajansContent.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">🔄 Chargement...</div>';
            }
        }
        
        // Masquer l'indicateur de chargement
        function hideLoadingIndicator() {
            // L'indicateur est remplacé par le contenu lors du populateStudentTable
        }
        
        // ===== INITIALISATION =====
        
        // Initialisation au chargement avec gestionnaire de modules
        window.addEventListener('DOMContentLoaded', async () => {
            console.log('✅ JavaScript des menus chargé');
            
            // Attendre un peu pour s'assurer que toutes les fonctions sont définies
            setTimeout(() => {
                // Initialiser le système admin (toujours)
                if (window.initAdminSystem) {
                    window.initAdminSystem();
                }
                
                // Vérifier si on doit forcer le mode admin
                const urlParams = new URLSearchParams(window.location.search);
                if (urlParams.get('forceAdmin') === '1') {
                    console.log('🔧 Mode admin forcé via URL');
                    // Activer le mode admin automatiquement
                    setTimeout(() => {
                        if (window.activateAdminMode) {
                            window.activateAdminMode();
                        }
                    }, 1000);
                }
            }, 100);
            
            // Attendre que le gestionnaire de modules soit disponible
            if (window.MODULE_MANAGER) {
                await MODULE_MANAGER.initialize();
            }
            
            // Initialiser le module de lecture élève
            if (window.RECORDER_MODULE) {
                window.RECORDER_MODULE.init();
            }
            
            // Fonction globale pour arrêter toutes les notes
            window.stopAllNotes = function() {
                console.log('🔇 Arrêt de toutes les notes');
                // Retirer la classe active de toutes les touches
                document.querySelectorAll('.key.active').forEach(key => {
                    key.classList.remove('active');
                });
            };
            
            // Fonction globale pour arrêter toutes les lectures
            window.stopAllPlayback = function() {
                console.log('🛑 Arrêt de toutes les lectures');
                if (window.RECORDER_MODULE && window.RECORDER_MODULE.stopPlayback) {
                    window.RECORDER_MODULE.stopPlayback();
                }
            };
            
            // Charger les tableaux de démos élèves
            loadStudentDemoTables();
            
            // Les tableaux restent descendus au chargement (juste les bandeaux visibles)
            // Pas d'affichage automatique
            
            // Écouter les événements de rechargement depuis l'interface admin
            window.addEventListener('reloadStudentTables', () => {
                console.log('🔄 Événement de rechargement reçu, mise à jour des tableaux...');
                loadStudentDemoTables();
            });
            
            // Gestion des touches clavier pour le modal admin
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeAdminModal();
                }
                if (e.key === 'Enter' && document.getElementById('adminModal').classList.contains('show')) {
                    validateAdminPassword();
                }
                

            });
            


            // Démarrer la synchronisation automatique
            startAutoSync();
            
            // Initialisation alternative du système admin (en cas d'échec de la première)
            setTimeout(() => {
                console.log('🔄 Tentative d\'initialisation alternative du système admin...');
                const adminLogo = document.getElementById('adminLogo');
                if (adminLogo && !adminLogo.hasAttribute('data-initialized')) {
                    console.log('🎹 Initialisation alternative du logo admin');
                    adminLogo.setAttribute('data-initialized', 'true');
                    adminLogo.addEventListener('click', handleAdminLogoClick);
                    console.log('✅ Logo admin initialisé via méthode alternative');
                }
            }, 2000);
        });
    </script>
</body>
</html>



================================================================================
FICHIER: piano-soloB/migrate-to-dual-system-robust.php
================================================================================
<?php
/**
 * Script de migration robuste vers le système de noms dual
 * Applique le système de noms dual à toutes les démos existantes
 */

// Configuration
error_reporting(E_ALL);
ini_set('display_errors', 1);
ini_set('log_errors', 1);

echo "🎯 Migration robuste vers le système de noms dual...\n";
echo "==================================================\n\n";

class RobustMigration {
    private $libraries = [
        'demospubliques/brouillon' => 'Brouillon',
        'demospubliques/prayers' => 'Prayers', 
        'demospubliques/bhajans' => 'Bhajans'
    ];
    
    private $backupDir = 'backups/';
    private $migrationLog = [];
    
    public function __construct() {
        // Créer le dossier de backup
        if (!is_dir($this->backupDir)) {
            mkdir($this->backupDir, 0755, true);
        }
        
        // Créer le fichier de log
        $this->migrationLog[] = "=== Migration démarrée le " . date('Y-m-d H:i:s') . " ===";
    }
    
    /**
     * Générer un nom technique unique
     */
    private function generateTechnicalName($originalName = '') {
        $timestamp = time();
        $hash = substr(md5($originalName . $timestamp . uniqid()), 0, 8);
        return "demo_{$timestamp}_{$hash}";
    }
    
    /**
     * Extraire un nom d'affichage lisible
     */
    private function extractDisplayName($demo) {
        // Priorité 1: originalName
        if (!empty($demo['originalName'])) {
            return $this->cleanDisplayName($demo['originalName']);
        }
        
        // Priorité 2: name dans data
        if (isset($demo['data']['name']) && !empty($demo['data']['name'])) {
            return $this->cleanDisplayName($demo['data']['name']);
        }
        
        // Priorité 3: extraire du filename
        if (!empty($demo['filename'])) {
            return $this->extractNameFromFilename($demo['filename']);
        }
        
        // Fallback
        return 'Démo sans nom';
    }
    
    /**
     * Nettoyer un nom d'affichage
     */
    private function cleanDisplayName($name) {
        // Supprimer les extensions
        $name = preg_replace('/\.json$/', '', $name);
        
        // Supprimer les préfixes techniques
        $name = preg_replace('/^demo_/', '', $name);
        
        // Nettoyer les caractères spéciaux
        $name = preg_replace('/[^a-zA-Z0-9\s\-_]/', '', $name);
        
        // Remplacer les underscores par des espaces
        $name = str_replace('_', ' ', $name);
        
        // Capitaliser
        $name = ucwords(trim($name));
        
        // Limiter la longueur
        if (strlen($name) > 50) {
            $name = substr($name, 0, 47) . '...';
        }
        
        return $name ?: 'Démo sans nom';
    }
    
    /**
     * Extraire un nom du filename
     */
    private function extractNameFromFilename($filename) {
        // Supprimer l'extension
        $filename = str_replace('.json', '', $filename);
        
        // Supprimer le préfixe demo_
        $filename = preg_replace('/^demo_/', '', $filename);
        
        // Extraire la partie descriptive (avant le premier timestamp)
        $parts = explode('_', $filename);
        $descriptiveParts = [];
        
        foreach ($parts as $part) {
            // Si c'est un timestamp (10+ chiffres) ou un ID hex (8+ caractères), arrêter
            if (is_numeric($part) && strlen($part) >= 10) {
                break;
            }
            if (strlen($part) >= 8 && ctype_xdigit($part)) {
                break;
            }
            $descriptiveParts[] = $part;
        }
        
        $name = implode(' ', $descriptiveParts);
        return $this->cleanDisplayName($name);
    }
    
    /**
     * Créer un backup avant modification
     */
    private function createBackup($filepath) {
        $backupPath = $this->backupDir . basename($filepath) . '.backup.' . date('Y-m-d_H-i-s');
        
        if (file_exists($filepath)) {
            if (copy($filepath, $backupPath)) {
                $this->migrationLog[] = "✅ Backup créé: " . basename($backupPath);
                return true;
            } else {
                $this->migrationLog[] = "❌ Erreur backup: " . $filepath;
                return false;
            }
        }
        return true; // Pas de fichier à sauvegarder
    }
    
    /**
     * Migrer une bibliothèque
     */
    public function migrateLibrary($libraryPath) {
        echo "\n📁 Migration de: $libraryPath\n";
        echo str_repeat('-', 50) . "\n";
        
        if (!is_dir($libraryPath)) {
            echo "❌ Dossier non trouvé: $libraryPath\n";
            return false;
        }
        
        $indexFile = $libraryPath . '/index.json';
        if (!file_exists($indexFile)) {
            echo "❌ Fichier index.json non trouvé: $indexFile\n";
            return false;
        }
        
        // Créer un backup
        if (!$this->createBackup($indexFile)) {
            echo "❌ Impossible de créer le backup\n";
            return false;
        }
        
        // Lire l'index
        $index = json_decode(file_get_contents($indexFile), true);
        if (!$index) {
            echo "❌ Erreur de lecture JSON: $indexFile\n";
            return false;
        }
        
        $updated = false;
        $demos = isset($index['demos']) ? $index['demos'] : $index;
        
        foreach ($demos as &$demo) {
            $originalDemo = $demo;
            
            // Générer un nom technique si nécessaire
            if (empty($demo['technicalName'])) {
                $technicalName = $this->generateTechnicalName($demo['originalName'] ?? $demo['filename'] ?? '');
                $demo['technicalName'] = $technicalName;
                echo "  🔧 Nom technique généré: {$technicalName}\n";
                $updated = true;
            }
            
            // Extraire ou améliorer le nom d'affichage
            $displayName = $this->extractDisplayName($demo);
            
            // Mettre à jour le nom d'affichage si nécessaire
            if (empty($demo['displayName']) || $demo['displayName'] !== $displayName) {
                $oldName = $demo['displayName'] ?? $demo['name'] ?? 'Sans nom';
                $demo['displayName'] = $displayName;
                $demo['name'] = $displayName; // Compatibilité
                echo "  📝 {$oldName} → {$displayName}\n";
                $updated = true;
            }
            
            // Ajouter des métadonnées utiles
            if (empty($demo['added'])) {
                $demo['added'] = $demo['created'] ?? date('c');
            }
            
            if (empty($demo['lastModified'])) {
                $demo['lastModified'] = date('c');
            }
            
            // S'assurer que le filename n'a pas de double extension
            if (isset($demo['filename']) && strpos($demo['filename'], '.json.json') !== false) {
                $cleanFilename = str_replace('.json.json', '.json', $demo['filename']);
                echo "  🔧 Correction extension: {$demo['filename']} → {$cleanFilename}\n";
                $demo['filename'] = $cleanFilename;
                $updated = true;
            }
        }
        
        // Mettre à jour la structure si nécessaire
        if (isset($index['demos'])) {
            $index['demos'] = $demos;
        } else {
            $index = $demos;
        }
        
        // Ajouter des métadonnées de migration
        $index['migration'] = [
            'version' => '2.0',
            'date' => date('c'),
            'system' => 'dual-names',
            'description' => 'Migration vers le système de noms dual'
        ];
        
        if ($updated) {
            // Sauvegarder l'index mis à jour
            $result = file_put_contents($indexFile, json_encode($index, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
            
            if ($result !== false) {
                echo "✅ Index mis à jour: $indexFile\n";
                $this->migrationLog[] = "✅ Migration réussie: $libraryPath";
                return true;
            } else {
                echo "❌ Erreur d'écriture: $indexFile\n";
                $this->migrationLog[] = "❌ Erreur d'écriture: $libraryPath";
                return false;
            }
        } else {
            echo "ℹ️ Aucune modification nécessaire\n";
            $this->migrationLog[] = "ℹ️ Aucune modification: $libraryPath";
            return true;
        }
    }
    
    /**
     * Exécuter la migration complète
     */
    public function run() {
        echo "🚀 Démarrage de la migration robuste...\n\n";
        
        $successCount = 0;
        $totalCount = count($this->libraries);
        
        foreach ($this->libraries as $libraryPath => $libraryName) {
            if ($this->migrateLibrary($libraryPath)) {
                $successCount++;
            }
        }
        
        // Sauvegarder le log
        $this->saveLog();
        
        echo "\n" . str_repeat('=', 60) . "\n";
        echo "🎉 Migration terminée !\n";
        echo "✅ Succès: $successCount/$totalCount\n";
        echo "📁 Backups: " . $this->backupDir . "\n";
        echo "📋 Log: migration-log-" . date('Y-m-d_H-i-s') . ".txt\n";
        echo str_repeat('=', 60) . "\n";
        
        return $successCount === $totalCount;
    }
    
    /**
     * Sauvegarder le log de migration
     */
    private function saveLog() {
        $logFile = 'migration-log-' . date('Y-m-d_H-i-s') . '.txt';
        file_put_contents($logFile, implode("\n", $this->migrationLog));
    }
}

// Exécuter la migration
try {
    $migration = new RobustMigration();
    $success = $migration->run();
    
    if ($success) {
        echo "\n🎯 Migration réussie ! Le système de noms dual est maintenant actif.\n";
        echo "📋 Prochaines étapes:\n";
        echo "  1. Tester les fonctions de modification/déplacement/suppression\n";
        echo "  2. Vérifier l'affichage dans les interfaces\n";
        echo "  3. Tester la lecture des démos\n";
    } else {
        echo "\n⚠️ Migration partielle. Vérifiez les erreurs ci-dessus.\n";
    }
    
} catch (Exception $e) {
    echo "\n❌ Erreur critique: " . $e->getMessage() . "\n";
    echo "📋 Vérifiez les logs pour plus de détails.\n";
}
?>



================================================================================
FICHIER: piano-soloB/upload-demo.php
================================================================================
<?php
// piano-solo/upload-demo.php
// Script d'upload pour les démos

header('Content-Type: application/json');

// Configuration
$uploadDir = 'demospubliques/';
$maxFileSize = 5 * 1024 * 1024; // 5 MB

// Créer le dossier si nécessaire
if (!is_dir($uploadDir)) {
    mkdir($uploadDir, 0755, true);
}

// Traitement de l'upload
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_FILES['demo_file'])) {
        $file = $_FILES['demo_file'];
        
        // Vérifications
        if ($file['error'] !== UPLOAD_ERR_OK) {
            http_response_code(400);
            echo json_encode(['error' => 'Erreur upload']);
            exit;
        }
        
        if ($file['size'] > $maxFileSize) {
            http_response_code(400);
            echo json_encode(['error' => 'Fichier trop volumineux']);
            exit;
        }
        
        // Lire les métadonnées
        $metadata = json_decode($_POST['metadata'], true);
        
        // Créer un nom de fichier basé sur le nom de la démo
        $safeName = preg_replace('/[^a-zA-Z0-9\s\-_]/', '', $metadata['name']);
        $safeName = str_replace(' ', '_', $safeName);
        $filename = $safeName . '_' . time() . '.json';
        $filepath = $uploadDir . $filename;
        
        if (move_uploaded_file($file['tmp_name'], $filepath)) {
            // Mettre à jour demos.json
            $demosFile = $uploadDir . 'demos.json';
            $demos = [];
            
            if (file_exists($demosFile)) {
                $demos = json_decode(file_get_contents($demosFile), true) ?: [];
            }
            
            // Lire le contenu du fichier uploadé
            $content = json_decode(file_get_contents($filepath), true);
            
            // Ajouter à la liste
            $demos[] = [
                'filename' => $filename,
                'name' => $content['name'],
                'category' => $metadata['category'],
                'description' => $metadata['description'] ?? '',
                'duration' => $content['duration'],
                'noteCount' => $content['noteCount'],
                'uploadedAt' => date('c')
            ];
            
            // Sauvegarder
            file_put_contents($demosFile, json_encode($demos, JSON_PRETTY_PRINT));
            
            echo json_encode(['success' => true, 'filename' => $filename]);
        } else {
            http_response_code(500);
            echo json_encode(['error' => 'Erreur serveur']);
        }
    } else {
        http_response_code(400);
        echo json_encode(['error' => 'Aucun fichier']);
    }
} else {
    http_response_code(405);
    echo json_encode(['error' => 'Méthode non autorisée']);
}
?>


================================================================================
FICHIER: piano-soloB/includes/help-video-module.js
================================================================================
/**
 * Module HELP et VIDÉO - Piano Solo V1.2
 * Gestion des popups d'aide et de vidéo tutoriel
 */

window.HELP_VIDEO_MODULE = {
    init: function() {
        console.log('🎹 Initialisation du module HELP/VIDEO...');
        this.createStyles();
        this.setupEventListeners();
        console.log('✅ Module HELP/VIDEO initialisé');
    },
    
    createStyles: function() {
        // Créer les styles CSS pour les popups
        const styles = `
            .help-popup, .video-popup {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
                animation: fadeIn 0.3s ease;
            }
            
            .help-content, .video-content {
                background: white;
                border-radius: 15px;
                padding: 30px;
                max-width: 600px;
                width: 90%;
                max-height: 80vh;
                overflow-y: auto;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                animation: slideIn 0.3s ease;
            }
            
            .video-content {
                max-width: 800px;
            }
            
            .help-content h3, .video-content h3 {
                color: #667eea;
                margin-bottom: 20px;
                font-size: 1.5em;
            }
            
            .help-content p {
                line-height: 1.6;
                color: #333;
                margin-bottom: 20px;
            }
            
            .help-content button, .video-content button {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.3s ease;
            }
            
            .help-content button:hover, .video-content button:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            }
            
            .video-content video {
                width: 100%;
                border-radius: 8px;
                margin-bottom: 20px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            }
            
            .close-btn {
                position: absolute;
                top: 15px;
                right: 20px;
                background: rgba(255, 255, 255, 0.2);
                border: none;
                color: white;
                font-size: 20px;
                cursor: pointer;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
            }
            
            .close-btn:hover {
                background: rgba(255, 255, 255, 0.3);
                transform: scale(1.1);
            }
            
            @keyframes fadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }
            
            @keyframes slideIn {
                from { 
                    opacity: 0;
                    transform: translateY(-50px) scale(0.9);
                }
                to { 
                    opacity: 1;
                    transform: translateY(0) scale(1);
                }
            }
            
            @media (max-width: 768px) {
                .help-content, .video-content {
                    width: 95%;
                    padding: 20px;
                    max-height: 90vh;
                }
                
                .help-content h3, .video-content h3 {
                    font-size: 1.3em;
                }
            }
        `;
        
        const styleSheet = document.createElement('style');
        styleSheet.textContent = styles;
        document.head.appendChild(styleSheet);
    },
    
    setupEventListeners: function() {
        // Les boutons sont maintenant dans le dropdown HELP, pas besoin d'event listeners globaux
        // Les boutons utilisent directement onclick="window.HELP_VIDEO_MODULE.showHelp()" et "window.HELP_VIDEO_MODULE.showVideo()"
        
        // Fermer les popups avec Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeAllPopups();
            }
        });
    },
    
    showHelp: function() {
        console.log('📚 Affichage du popup HELP...');
        
        fetch('admin-config.json')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Configuration HELP non trouvée');
                }
                return response.json();
            })
            .then(data => {
                this.createHelpPopup(data.help.title, data.help.content);
            })
            .catch(error => {
                console.error('Erreur chargement HELP:', error);
                this.createHelpPopup('Aide Piano Solo', 'Aide non disponible pour le moment.');
            });
    },
    
    showVideo: function() {
        console.log('🎥 Affichage du popup VIDÉO...');
        
        fetch('admin-config.json')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Configuration vidéo non trouvée');
                }
                return response.json();
            })
            .then(data => {
                if (data.video.enabled) {
                    this.createVideoPopup(data.video.title, data.video.filename, data.video.description);
                } else {
                    alert('La vidéo tutoriel n\'est pas activée.');
                }
            })
            .catch(error => {
                console.error('Erreur chargement vidéo:', error);
                alert('Vidéo tutoriel non disponible pour le moment.');
            });
    },
    
    createHelpPopup: function(title, content) {
        // Fermer les popups existants
        this.closeAllPopups();
        
        const popup = document.createElement('div');
        popup.className = 'help-popup';
        popup.innerHTML = `
            <button class="close-btn" onclick="window.HELP_VIDEO_MODULE.closeAllPopups()">✕</button>
            <div class="help-content">
                <h3>${this.escapeHtml(title)}</h3>
                <div>${this.formatContent(content)}</div>
                <button onclick="window.HELP_VIDEO_MODULE.closeAllPopups()">Fermer</button>
            </div>
        `;
        
        document.body.appendChild(popup);
        
        // Fermer en cliquant à l'extérieur
        popup.addEventListener('click', (e) => {
            if (e.target === popup) {
                this.closeAllPopups();
            }
        });
    },
    
    createVideoPopup: function(title, filename, description) {
        // Fermer les popups existants
        this.closeAllPopups();
        
        const popup = document.createElement('div');
        popup.className = 'video-popup';
        popup.innerHTML = `
            <button class="close-btn" onclick="window.HELP_VIDEO_MODULE.closeAllPopups()">✕</button>
            <div class="video-content">
                <h3>${this.escapeHtml(title)}</h3>
                ${description ? `<p>${this.escapeHtml(description)}</p>` : ''}
                <video controls autoplay>
                    <source src="videos/${this.escapeHtml(filename)}" type="video/mp4">
                    Votre navigateur ne supporte pas la lecture de vidéos.
                </video>
                <button onclick="window.HELP_VIDEO_MODULE.closeAllPopups()">Fermer</button>
            </div>
        `;
        
        document.body.appendChild(popup);
        
        // Fermer en cliquant à l'extérieur
        popup.addEventListener('click', (e) => {
            if (e.target === popup) {
                this.closeAllPopups();
            }
        });
    },
    
    closeAllPopups: function() {
        const popups = document.querySelectorAll('.help-popup, .video-popup');
        popups.forEach(popup => {
            popup.remove();
        });
    },
    
    escapeHtml: function(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    },
    
    formatContent: function(content) {
        // Convertir les retours à la ligne en <br>
        return content.replace(/\n/g, '<br>');
    }
};

// Initialisation automatique
document.addEventListener('DOMContentLoaded', function() {
    window.HELP_VIDEO_MODULE.init();
});



================================================================================
FICHIER: piano-soloB/includes/menu-dropdowns.php
================================================================================
<!-- /includes/menu-dropdowns.php -->

<!-- KEY ASSIST Dropdown -->
<div id="keyassist-dropdown" class="menu-dropdown">
    <div class="dropdown-header">
        <span class="dropdown-title">KEY ASSIST</span>
        <button class="dropdown-close" onclick="closeDropdown('keyassist')">×</button>
    </div>
    <div class="dropdown-content">
        <div class="toggle-item" onclick="selectKeyMode('none')">
            <span>NO LABELS</span>
            <div class="toggle-switch" id="toggle-none"></div>
        </div>
        <div class="toggle-item" onclick="selectKeyMode('labels-fr')">
            <span>NOTES FR</span>
            <div class="toggle-switch" id="toggle-labels-fr"></div>
        </div>
        <div class="toggle-item" onclick="selectKeyMode('labels-en')">
            <span>NOTES EN</span>
            <div class="toggle-switch on" id="toggle-labels-en"></div>
        </div>
        <div class="toggle-item" onclick="selectKeyMode('octaves')">
            <span>OCTAVES (C)</span>
            <div class="toggle-switch" id="toggle-octaves"></div>
        </div>

        

     
    </div>
</div>

<!-- SOUND Dropdown -->
<div id="sound-dropdown" class="menu-dropdown">
    <div class="dropdown-header">
        <span class="dropdown-title">SOUND</span>
        <button class="dropdown-close" onclick="closeDropdown('sound')">×</button>
    </div>
    <div class="dropdown-content">
        <div class="sound-item selected" onclick="selectSound('harmonium')">
            <span class="sound-name">🎹 Harmonium de rue</span>
            <span class="sound-info">3 octaves - Son authentique</span>
        </div>
        <div class="sound-item" onclick="selectSound('harmonium-paul-and-co')">
            <span class="sound-name">🎹 Harmonium Paul and Co</span>
            <span class="sound-info">3 octaves - Son premium</span>
        </div>
        
        <!-- Séparateur -->
        <div style="border-top: 1px solid #444; margin: 15px 0;"></div>
        
        <!-- MIDI Device -->
        <div class="audio-control">
            <label class="control-label">🎹 SELECT MIDI DEVICE</label>
            <select class="midi-select" id="midi-device-select" onchange="changeMidiDevice(this.value)">
                <option value="">Aucun périphérique MIDI</option>
            </select>
        </div>
        
        <!-- Volume -->
        <div class="audio-control" style="margin-top: 15px;">
            <label class="control-label">🔊 VOLUME</label>
            <input type="range" class="volume-slider" id="volume-control" 
                   min="0" max="100" value="75" 
                   oninput="changeVolume(this.value)">
            <span class="volume-value" id="volume-display">75%</span>
        </div>
    </div>
</div>



<!-- HELP Dropdown -->
<div id="help-dropdown" class="menu-dropdown">
    <div class="dropdown-header">
        <span class="dropdown-title">HELP</span>
        <button class="dropdown-close" onclick="closeDropdown('help')">×</button>
    </div>
    <div class="dropdown-content">
        <!-- Boutons Aide et Tutoriel -->
        <div class="help-actions">
            <button class="help-btn dropdown-help-btn" onclick="window.HELP_VIDEO_MODULE.showHelp()">
                <span class="help-icon">❓</span>
                Aide
            </button>
            <button class="video-btn dropdown-video-btn" onclick="window.HELP_VIDEO_MODULE.showVideo()">
                <span class="help-icon">🎥</span>
                Tutoriel Vidéo
            </button>
            <button class="admin-btn dropdown-admin-btn" onclick="openAdminPiano()">
                <span class="help-icon">🔧</span>
                Piano Solo Admin
            </button>
            <button class="admin-btn dropdown-admin-btn" onclick="window.open('admin.php', '_blank')">
                <span class="help-icon">🎹</span>
                Page Admin
            </button>
        </div>
        
        <div class="help-section">
            <h4>Raccourcis clavier</h4>
            <p>Utilisez les touches A-Z pour jouer</p>
        </div>
        <div class="help-section">
            <h4>Navigation</h4>
            <p>Shift + flèches pour changer d'octave</p>
        </div>
        <div class="help-section">
            <h4>Contact</h4>
            <p>harmonium@example.com</p>
        </div>
    </div>
</div>

<script>
// Fonction pour ouvrir la page piano en mode admin
function openAdminPiano() {
    // Ouvrir avec un paramètre pour forcer le mode admin
    window.open('index.php?forceAdmin=1', '_blank');
}
</script>

<style>
.menu-dropdown {
    display: none;
    position: fixed;
    top: 80px;
    left: 50%;
    transform: translateX(-50%);
    background: #2a2a2a;
    border: 1px solid #444;
    border-radius: 8px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.8);
    z-index: 9999;
    min-width: 280px;
    max-width: 400px;
}

.menu-dropdown.show {
    display: block;
}

.dropdown-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    border-bottom: 1px solid #444;
}

.dropdown-title {
    color: #fff;
    font-weight: 600;
    font-size: 14px;
    letter-spacing: 1px;
}

.dropdown-close {
    background: none;
    border: none;
    color: #ff6b35;
    font-size: 28px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    border-radius: 4px;
}

.dropdown-close:hover {
    color: #fff;
    background: #ff6b35;
    transform: rotate(90deg);
}

.dropdown-content {
    padding: 12px;
    max-height: 280px;  /* Environ 7 items de 40px */
    overflow-y: auto;
    overflow-x: hidden;
}

/* Styles pour les éléments toggle du menu KEY ASSIST */
.toggle-item {
    display: flex !important;
    justify-content: space-between;
    align-items: center;
    padding: 12px 15px !important;
    border-bottom: 1px solid #444;
    cursor: pointer;
    transition: background-color 0.2s ease;
    color: #ccc;
}

.toggle-item:hover {
    background-color: #3a3a3a;
}

.toggle-item:last-child {
    border-bottom: none;
}

.toggle-switch {
    width: 40px;
    height: 20px;
    background: #555;
    border-radius: 10px;
    position: relative;
    transition: background-color 0.3s ease;
}

.toggle-switch.on {
    background: #4CAF50;
}

.toggle-switch::after {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    width: 16px;
    height: 16px;
    background: white;
    border-radius: 50%;
    transition: transform 0.3s ease;
}

.toggle-switch.on::after {
    transform: translateX(20px);
}

/* Scrollbar personnalisée */
.dropdown-content::-webkit-scrollbar {
    width: 6px;
}

.dropdown-content::-webkit-scrollbar-track {
    background: #333;
    border-radius: 3px;
}

.dropdown-content::-webkit-scrollbar-thumb {
    background: #666;
    border-radius: 3px;
}

.dropdown-content::-webkit-scrollbar-thumb:hover {
    background: #888;
}

/* Styles pour les éléments de son */
.sound-item {
    display: flex !important;
    flex-direction: column;
    padding: 12px 15px !important;
    border-bottom: 1px solid #444;
    cursor: pointer;
    transition: background-color 0.2s ease;
    color: #ccc;
}

.sound-item:hover {
    background-color: #3a3a3a;
}

.sound-item.selected {
    background-color: #2c5aa0;
    color: white;
}

.sound-item:last-child {
    border-bottom: none;
}

.sound-name {
    font-weight: 500;
    color: inherit;
    margin-bottom: 2px;
}

.sound-info {
    font-size: 12px;
    color: #aaa;
    font-style: italic;
}

/* Styles pour les éléments de démo dans les menus */
.demo-item {
    display: flex !important;
    justify-content: space-between;
    align-items: center;
    padding: 12px 15px !important;
    border-bottom: 1px solid #444;
    cursor: pointer;
    transition: background-color 0.2s ease;
    color: #ccc;
}

.demo-item:hover {
    background-color: #3a3a3a;
}

/* Styles pour les boutons Aide et Tutoriel dans le dropdown HELP */
.help-actions {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #444;
}

.dropdown-help-btn,
.dropdown-video-btn,
.dropdown-admin-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 12px 16px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 10px;
    text-align: left;
    width: 100%;
}

.dropdown-help-btn:hover,
.dropdown-video-btn:hover,
.dropdown-admin-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
}

.dropdown-admin-btn {
    background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
}

.dropdown-admin-btn:hover {
    background: linear-gradient(135deg, #d63031 0%, #b71540 100%);
}

/* Style spécial pour le bouton d'enregistrement */
.dropdown-admin-btn:last-child {
    background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
}

.dropdown-admin-btn:last-child:hover {
    background: linear-gradient(135deg, #e67e22 0%, #d35400 100%);
}

.help-icon {
    font-size: 16px;
    min-width: 20px;
    text-align: center;
}

/* Styles pour les sections d'aide */
.help-section {
    padding: 12px 0;
    border-bottom: 1px solid #444;
}

.help-section:last-child {
    border-bottom: none;
}

.help-section h4 {
    color: #fff;
    margin: 0 0 8px 0;
    font-size: 14px;
    font-weight: 600;
}

.help-section p {
    color: #ccc;
    margin: 0;
    font-size: 13px;
    line-height: 1.4;
}

/* Styles pour les modes de surlignage */
body.highlight-mode .key:active,
body.highlight-mode .key.active {
    background: linear-gradient(to bottom, #4CAF50, #45a049) !important;
    box-shadow: 0 0 15px rgba(76, 175, 80, 0.6) !important;
}

body.highlight-mode .key.highlighted {
    background: linear-gradient(to bottom, #ffeb3b, #ffc107) !important;
    box-shadow: 0 0 20px rgba(255, 235, 59, 0.8) !important;
    transform: translateY(2px);
    transition: all 0.1s ease;
}

.piano-container.keyboard-highlight-mode {
    box-shadow: inset 0 0 30px rgba(76, 175, 80, 0.3);
    background: linear-gradient(to bottom, #3e4a5c 0%, #2c3e50 50%, #263d2f 100%);
}

.piano-container.keyboard-highlight-mode .key {
    transition: all 0.3s ease;
}

.piano-container.keyboard-highlight-mode .key.pulse {
    animation: keyPulse 1s ease-in-out;
}

@keyframes keyPulse {
    0%, 100% { transform: scale(1); }
    50% { 
        transform: scale(1.05);
        box-shadow: 0 5px 20px rgba(255, 255, 255, 0.3);
    }
}

/* Style des labels */
.key-label {
    position: absolute;
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 14px;
    font-weight: 600;
    color: #666;
    pointer-events: none;
    user-select: none;
    background: rgba(255, 255, 255, 0.9);
    padding: 2px 6px;
    border-radius: 3px;
}

.key.black .key-label {
    color: #fff;
    background: transparent; /* Plus de fond noir */
    bottom: 10px;
    font-size: 11px;
    font-weight: bold;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.8); /* Ombre pour la lisibilité */
}

/* Effet de surbrillance du clavier complet */
.piano-container.keyboard-highlight-mode::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, 
        transparent 30%, 
        rgba(255, 255, 255, 0.1) 50%, 
        transparent 70%);
    animation: shimmer 3s infinite;
    pointer-events: none;
}

@keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

/* Mode Aurore Boréale */
.piano-container.aurora-mode {
    background: linear-gradient(135deg, #000428 0%, #004e92 50%, #000428 100%);
    position: relative;
    overflow: hidden;
}

.piano-container.aurora-mode::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, 
        rgba(0, 255, 136, 0.1) 0%, 
        rgba(0, 255, 255, 0.1) 25%, 
        rgba(255, 0, 255, 0.1) 50%, 
        transparent 70%);
    animation: auroraRotate 20s linear infinite;
}

@keyframes auroraRotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.aurora-wave {
    animation: auroraGlow 3s ease-in-out infinite alternate;
}

@keyframes auroraGlow {
    0% { filter: brightness(1); }
    100% { filter: brightness(1.3); }
}

/* Nouveaux modes KEY ASSIST */
.key.scale-note {
    animation: scalePulse 2s ease-in-out infinite;
}

@keyframes scalePulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.02); }
}

.key.chord-note {
    animation: chordGlow 1.5s ease-in-out infinite;
}

@keyframes chordGlow {
    0%, 100% { box-shadow: 0 0 15px rgba(255, 152, 0, 0.6); }
    50% { box-shadow: 0 0 25px rgba(255, 152, 0, 0.8); }
}

.key.finger-guide {
    position: relative;
}

.finger-number {
    animation: fingerBounce 0.5s ease-out;
}

@keyframes fingerBounce {
    0% { transform: translateX(-50%) scale(0.8); opacity: 0; }
    50% { transform: translateX(-50%) scale(1.1); }
    100% { transform: translateX(-50%) scale(1); opacity: 1; }
}

/* Mode pratique amélioré */
.piano-container.practice-mode {
    position: relative;
}

.piano-container.practice-mode::after {
    content: '🎯 PRACTICE MODE';
    position: absolute;
    top: 10px;
    right: 10px;
    background: rgba(52, 152, 219, 0.9);
    color: white;
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: bold;
    z-index: 10;
}

        /* Contrôles audio dans menu SOUND */
        
        /* Style pour le select MIDI */
        .midi-select {
            width: 100%;
            padding: 8px 12px;
            border: 2px solid #444;
            border-radius: 5px;
            background: #2c2c2c;
            color: #fff;
            font-size: 14px;
            cursor: pointer;
            transition: border-color 0.3s ease;
        }
        
        .midi-select:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .midi-select option {
            background: #2c2c2c;
            color: #fff;
        }
        
        /* Styles pour les éléments de démo */
        .demo-item {
            cursor: pointer;
            transition: all 0.2s ease;
            border-left: 3px solid transparent;
        }
        
        .demo-item:hover {
            background: rgba(102, 126, 234, 0.1);
            border-left-color: #667eea;
            transform: translateX(5px);
        }
        
        .demo-item-play {
            color: #28a745;
            font-weight: 600;
            font-size: 12px;
            padding: 4px 8px;
            border-radius: 4px;
            background: rgba(40, 167, 69, 0.1);
            transition: all 0.2s ease;
        }
        
        .demo-item:hover .demo-item-play {
            background: rgba(40, 167, 69, 0.2);
            transform: scale(1.05);
        }
.audio-control {
    margin: 10px 0;
}

.control-label {
    display: block;
    color: #999;
    font-size: 11px;
    font-weight: 600;
    letter-spacing: 0.5px;
    margin-bottom: 8px;
    text-transform: uppercase;
}

.midi-select {
    width: 100%;
    background: #333;
    border: 1px solid #555;
    color: #fff;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
}

.midi-select:hover {
    border-color: #666;
    background: #3a3a3a;
}

.volume-slider {
    width: calc(100% - 45px);
    height: 4px;
    background: #444;
    border-radius: 2px;
    outline: none;
    -webkit-appearance: none;
    vertical-align: middle;
}

.volume-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 16px;
    height: 16px;
    background: #fff;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.volume-slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    background: #fff;
    border-radius: 50%;
    cursor: pointer;
    border: none;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.volume-value {
    display: inline-block;
    width: 35px;
    text-align: right;
    color: #999;
    font-size: 11px;
    margin-left: 8px;
}

/* Styles pour les éléments toggle du menu KEY ASSIST */
.toggle-item {
    display: flex !important;
    justify-content: space-between;
    align-items: center;
    padding: 12px 15px !important;
    border-bottom: 1px solid #444;
    cursor: pointer;
    transition: background-color 0.2s ease;
    color: #ccc;
}

.toggle-item:hover {
    background-color: #3a3a3a;
}

.toggle-item:last-child {
    border-bottom: none;
}

.toggle-switch {
    width: 40px;
    height: 20px;
    background: #555;
    border-radius: 10px;
    position: relative;
    transition: background-color 0.3s ease;
}

.toggle-switch.on {
    background: #4CAF50;
}

.toggle-switch::after {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    width: 16px;
    height: 16px;
    background: white;
    border-radius: 50%;
    transition: transform 0.3s ease;
}

.toggle-switch.on::after {
    transform: translateX(20px);
}

</style>


================================================================================
FICHIER: piano-soloB/includes/menu-toolbar.php
================================================================================
<!-- includes/menu-toolbar.php -->
<div class="menu-toolbar">
    <button class="menu-btn" onclick="toggleDropdown('keyassist')">KEY ASSIST</button>
    <button class="menu-btn" onclick="toggleDropdown('sound')">SOUND</button>
    <button class="menu-btn" onclick="toggleDropdown('help')">HELP</button>
</div>

<style>
.menu-toolbar {
    background: transparent;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 50px;
    border-radius: 0;
    gap: 2px;
    flex: 1;
}

.menu-btn {
    background: transparent;
    color: #999;
    border: none;
    padding: 15px 25px;
    font-size: 13px;
    font-weight: 600;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.2s ease;
    height: 100%;
    border-radius: 0;
}

.menu-btn:first-child {
    border-radius: 12px 0 0 0;
}

.menu-btn:last-child {
    border-radius: 0 12px 0 0;
}

.menu-btn:hover {
    background: #333;
    color: #fff;
}

.menu-btn.active {
    background: #444;
    color: #fff;
}
</style>


================================================================================
FICHIER: piano-soloB/includes/piano-core.php
================================================================================
<!-- /includes/piano-core.php -->
<!-- Module de base du piano virtuel - 3 octaves (C3 à C6) avec sons synthétisés >> oscillator -->

<style>
/* Styles du piano */
.piano-container {
    background: linear-gradient(to bottom, #3e4a5c 0%, #2c3e50 100%);
    border-radius: 15px;
    padding: 0;
    margin: 0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    overflow-x: auto;
    overflow-y: visible;
    position: relative;
}

/* Container pour la barre de menu intégrée */
.piano-header {
    background: #1a1a1a;
    padding: 0;
    border-radius: 15px 15px 0 0;
    position: relative;
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 50px;
    z-index: 1000;
}

/* Zone pour le piano */
.piano-content {
    padding: 0;
    margin: 0;
}

/* Barre de contrôle des démos */
.demo-controls {
    position: relative;
    margin: 20px auto 0 auto;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 25px;
    padding: 12px 25px;
    display: flex;
    align-items: center;
    gap: 15px;
    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1);
    z-index: 100;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    max-width: 400px;
    justify-content: center;
}

.demo-controls button {
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    color: #2c3e50;
    font-size: 18px;
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 40px;
    min-height: 40px;
}

.demo-controls button:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: scale(1.1);
}

.demo-controls button:active {
    transform: scale(0.95);
}

.demo-controls button:disabled {
    opacity: 0.4;
    cursor: not-allowed;
    transform: none;
}

.demo-controls button:disabled:hover {
    background: none;
    transform: none;
}

.demo-controls .play-btn {
    background: rgba(46, 204, 113, 0.2);
    border: 1px solid rgba(46, 204, 113, 0.3);
}

.demo-controls .play-btn:hover {
    background: rgba(46, 204, 113, 0.3);
}

.demo-controls .pause-btn {
    background: rgba(241, 196, 15, 0.2);
    border: 1px solid rgba(241, 196, 15, 0.3);
}

.demo-controls .pause-btn:hover {
    background: rgba(241, 196, 15, 0.3);
}

.demo-controls .stop-btn {
    background: rgba(231, 76, 60, 0.2);
    border: 1px solid rgba(231, 76, 60, 0.3);
}

.demo-controls .stop-btn:hover {
    background: rgba(231, 76, 60, 0.3);
}

.demo-controls .rewind-btn {
    background: rgba(52, 152, 219, 0.2);
    border: 1px solid rgba(52, 152, 219, 0.3);
}

.demo-controls .rewind-btn:hover {
    background: rgba(52, 152, 219, 0.3);
}

.demo-controls .demo-info {
    color: #2c3e50;
    font-size: 12px;
    margin-left: 10px;
    opacity: 0.9;
    font-weight: 500;
}

.demo-controls .progress-bar {
    width: 120px;
    height: 4px;
    background: rgba(44, 62, 80, 0.2);
    border-radius: 2px;
    overflow: hidden;
    margin: 0 10px;
}

.demo-controls .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #3498db, #2ecc71);
    width: 0%;
    transition: width 0.1s ease;
}

/* NOUVELLE BARRE DE CONTRÔLE UNIFIÉE - STYLES SÉPARÉS */
.unified-controls {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 8px 15px;
    margin-top: 8px;
}

.unified-controls .music-icon {
    color: #333;
    font-weight: 600;
    margin-right: 12px;
    font-size: 14px;
}

.unified-btn {
    margin: 2px;
    padding: 6px 10px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    font-size: 13px;
    transition: all 0.2s ease;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
}

.unified-btn:hover {
    transform: scale(1.05);
}

.unified-btn:active {
    transform: scale(0.95);
}

.unified-btn.pause-btn {
    background: #ffc107 !important;
    color: #000 !important;
    font-size: 13px !important;
    padding: 8px 12px !important;
    width: 30px !important;
    min-width: 30px !important;
    max-width: 30px !important;
    height: 30px !important;
    min-height: 30px !important;
    max-height: 30px !important;
    box-sizing: border-box !important;
    border-radius: 6px !important;
    cursor: pointer !important;
}

.unified-btn.resume-btn {
    background: #28a745;
    color: #fff;
}

.unified-btn.stop-btn {
    background: #dc3545;
    color: #fff;
}

.unified-controls .timeline-container {
    margin-left: 12px;
    display: flex;
    align-items: center;
    gap: 8px;
}

.unified-controls .timeline-slider {
    width: 150px;
    height: 4px;
    border-radius: 2px;
    background: #e0e0e0;
    outline: none;
    cursor: pointer;
}

.unified-controls .time-display {
    font-size: 11px;
    color: #666;
    font-weight: 500;
    min-width: 80px;
    text-align: center;
}

.piano {
    position: relative;
    width: 1150px; /* 23 touches blanches × 50px */
    height: 200px;
    margin: 0 auto;
}

/* Touches du piano */
.key {
    position: absolute;
    cursor: pointer;
    user-select: none;
    transition: all 0.1s ease;
    border-radius: 0 0 6px 6px;
}

.key.white {
    width: 50px;
    height: 200px;
    background: linear-gradient(to bottom, #ffffff 0%, #fafafa 100%);
    border: 1px solid #e0e0e0;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 1;
}

.key.white:hover {
    background: linear-gradient(to bottom, #fafafa 0%, #f0f0f0 100%);
    transform: translateY(1px);
}

.key.black {
    width: 32px;
    height: 130px;
    background: linear-gradient(to bottom, #2c3e50 0%, #1e2a38 100%);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    z-index: 2;
}

.key.black:hover {
    background: linear-gradient(to bottom, #34495e 0%, #2c3e50 100%);
    transform: translateY(1px);
}

/* Styles pour les touches actives - SANS EFFET DE LUMIÈRE */
.key.active {
    background-color: #ffeb3b !important;
    /* SUPPRIMÉ: box-shadow: 0 0 10px #ffeb3b !important; */
    transform: translateY(2px);
    transition: all 0.1s ease;
}

/* Labels des notes */
.key-label {
    position: absolute;
    bottom: 8px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 14px;
    font-weight: 600;
    color: #666;
    display: none;
}

.key.black .key-label {
    color: #aaa;
    bottom: 6px;
    font-size: 11px;
}

/* Calisson orange (indicateur) */
.calisson {
    position: absolute;
    width: 35px;
    height: 45px;
    background: radial-gradient(ellipse at center, #ff8c00 0%, #ff6b00 70%);
    border-radius: 50%;
    transform: scaleX(0.65);
    opacity: 0;
    animation: calissonAppear 0.2s ease-out forwards;
    pointer-events: none;
    box-shadow: 0 3px 10px rgba(255, 140, 0, 0.6);
    z-index: 10;
}

.calisson.white-key {
    bottom: 25px;
    left: 50%;
    transform: translateX(-50%) scaleX(0.65);
}

.calisson.black-key {
    bottom: 15px;
    left: 50%;
    transform: translateX(-50%) scaleX(0.65);
}

.calisson.fadeout {
    animation: calissonDisappear 0.3s ease-out forwards;
}

@keyframes calissonAppear {
    0% {
        opacity: 0;
        transform: translateX(-50%) scaleX(0.65) scale(0.8);
    }
    100% {
        opacity: 1;
        transform: translateX(-50%) scaleX(0.65) scale(1);
    }
}

@keyframes calissonDisappear {
    0% {
        opacity: 1;
        transform: translateX(-50%) scaleX(0.65) scale(1);
    }
    100% {
        opacity: 0;
        transform: translateX(-50%) scaleX(0.65) scale(0.8);
    }
}

@media (max-width: 768px) {
    .piano-container {
        padding: 20px 10px;
    }
}

.ajout {
            text-align: center;
            color: #96bcc5;
            margin-bottom: 5px;
        }
</style>

<div class="piano-container">
    <!-- Header avec barre de menu intégrée -->
    <div class="piano-header">
        <!-- Barre de menus -->
        <?php include 'menu-toolbar.php'; ?>
        <!-- Dropdowns -->
        <?php include 'menu-dropdowns.php'; ?>
    </div>
    
    <!-- Contenu du piano -->
    <div class="piano-content">
        <div id="piano" class="piano"></div>
        
        <!-- BARRE DE CONTRÔLE UNIFIÉE - POSITIONNÉE SOUS LE CLAVIER -->
        <div class="unified-controls" id="unifiedControls" style="display: flex; margin-top: 15px;">
            <button id="unifiedPauseBtn" class="unified-btn pause-btn" title="Pause"></button>
            <button id="unifiedResumeBtn" class="unified-btn resume-btn">▶️</button>
            <button id="unifiedStopBtn" class="unified-btn stop-btn">⏹️</button>
            <div class="timeline-container">
                <input type="range" id="unifiedTimelineSlider" class="timeline-slider" min="0" max="100" value="0">
                <div id="unifiedTimeDisplay" class="time-display">00:00 / 00:00</div>
            </div>
        </div>
    </div>
</div>

<script>
// Configuration - Contexte audio global
let audioContext;

// Créer un contexte audio global unique
if (!window.globalAudioContext) {
    window.globalAudioContext = new (window.AudioContext || window.webkitAudioContext)();
    console.log('🎵 Contexte audio global créé');
}
audioContext = window.globalAudioContext;

// Fréquences des notes
const noteFrequencies = {
    'C': 261.63, 'C#': 277.18, 'D': 293.66, 'D#': 311.13,
    'E': 329.63, 'F': 349.23, 'F#': 369.99, 'G': 392.00,
    'G#': 415.30, 'A': 440.00, 'A#': 466.16, 'B': 493.88
};

// Initialisation audio
function initAudio() {
    if (!audioContext) {
        // Utiliser le contexte audio global
        if (window.globalAudioContext) {
            audioContext = window.globalAudioContext;
        } else {
            window.globalAudioContext = new (window.AudioContext || window.webkitAudioContext)();
            audioContext = window.globalAudioContext;
            console.log('🎵 Contexte audio global créé dans initAudio');
        }
    }
}

// Création du piano (3 octaves: C3 à B5 + C6)
function createPiano() {
    const piano = document.getElementById('piano');
    const notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];
    
    let whiteKeyIndex = 0;
    
    // 3 octaves de touches blanches
    for (let octave = 3; octave <= 5; octave++) {
        notes.forEach((note, index) => {
            const key = document.createElement('div');
            key.className = 'key white';
            key.dataset.note = note + octave;
            key.style.left = (whiteKeyIndex * 50) + 'px';
            
            const label = document.createElement('div');
            label.className = 'key-label';
            label.textContent = note;
            key.appendChild(label);
            
            // Événements
            key.addEventListener('mousedown', () => playNote(note + octave, key));
            key.addEventListener('mouseup', () => stopNote(note + octave, key));
            key.addEventListener('mouseleave', () => stopNote(note + octave, key));
            
            piano.appendChild(key);
            whiteKeyIndex++;
        });
    }
    
    // Ajouter le Do final (C6)
    const finalKey = document.createElement('div');
    finalKey.className = 'key white';
    finalKey.dataset.note = 'C6';
    finalKey.style.left = (whiteKeyIndex * 50) + 'px';
    
    const finalLabel = document.createElement('div');
    finalLabel.className = 'key-label';
    finalLabel.textContent = 'C';
    finalKey.appendChild(finalLabel);
    
    // Événements
    finalKey.addEventListener('mousedown', () => playNote('C6', finalKey));
    finalKey.addEventListener('mouseup', () => stopNote('C6', finalKey));
    finalKey.addEventListener('mouseleave', () => stopNote('C6', finalKey));
    
    piano.appendChild(finalKey);
    
    // Touches noires pour 3 octaves
    const blackKeyPattern = [
        { note: 'C#', offset: 35 },
        { note: 'D#', offset: 85 },
        { note: 'F#', offset: 185 },
        { note: 'G#', offset: 235 },
        { note: 'A#', offset: 285 }
    ];
    
    for (let octave = 3; octave <= 5; octave++) {
        blackKeyPattern.forEach(({ note, offset }) => {
            const key = document.createElement('div');
            key.className = 'key black';
            key.dataset.note = note + octave;
            key.style.left = (offset + (octave - 3) * 350) + 'px';
            
            const label = document.createElement('div');
            label.className = 'key-label';
            label.textContent = note;
            key.appendChild(label);
            
            // Événements
            key.addEventListener('mousedown', () => playNote(note + octave, key));
            key.addEventListener('mouseup', () => stopNote(note + octave, key));
            key.addEventListener('mouseleave', () => stopNote(note + octave, key));
            
            piano.appendChild(key);
        });
    }
}

// Jouer une note
function playNote(noteId, keyElement) {
    initAudio();
    
    keyElement.classList.add('active');
    
    // Nettoyer tout calisson existant avant d'en créer un nouveau
    const existingCalissons = keyElement.querySelectorAll('.calisson');
    existingCalissons.forEach(calisson => calisson.remove());
    
    // Créer et afficher le calisson
    const calisson = document.createElement('div');
    calisson.className = 'calisson';
    calisson.classList.add(keyElement.classList.contains('black') ? 'black-key' : 'white-key');
    keyElement.appendChild(calisson);
    
    // Jouer le son
    const note = noteId.slice(0, -1);
    const octave = parseInt(noteId.slice(-1));
    const frequency = noteFrequencies[note] * Math.pow(2, octave - 4);
    
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    
    // Utiliser le gain master si disponible
    if (window.masterGainNode) {
        gainNode.connect(window.masterGainNode);
    } else {
        gainNode.connect(audioContext.destination);
    }
    
    oscillator.frequency.value = frequency;
    oscillator.type = 'triangle';
    
    // Appliquer le volume global
    const globalVolume = window.masterVolume || 0.75;
    gainNode.gain.setValueAtTime(0, audioContext.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.3 * globalVolume, audioContext.currentTime + 0.01);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 1);
    
    oscillator.start();
    oscillator.stop(audioContext.currentTime + 1);
    
    // Stocker pour arrêt
    keyElement.oscillator = { oscillator, gainNode };
}

// Arrêter une note
function stopNote(noteId, keyElement) {
    keyElement.classList.remove('active');
    
    // Faire disparaître TOUS les calissons de cette touche
    const calissons = keyElement.querySelectorAll('.calisson');
    calissons.forEach(calisson => {
        if (!calisson.classList.contains('fadeout')) {
            calisson.classList.add('fadeout');
            // Utiliser un data-attribute pour éviter les doublons de timeout
            if (!calisson.dataset.removing) {
                calisson.dataset.removing = 'true';
                setTimeout(() => calisson.remove(), 300);
            }
        }
    });
    
    // Arrêter le son
    if (keyElement.oscillator) {
        const { gainNode } = keyElement.oscillator;
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        delete keyElement.oscillator;
    }
}

// Hook pour modules externes
window.PIANO_HOOKS = {
    audioContext: null
};

// Exposer les fonctions globalement
window.playNote = playNote;
window.stopNote = stopNote;
window.initAudio = initAudio;
window.audioContext = audioContext;

// Initialisation
window.addEventListener('DOMContentLoaded', () => {
    createPiano();
    // Mettre à jour le hook après init
    window.PIANO_HOOKS.audioContext = audioContext;
    
    // Initialiser le masterGainNode si pas déjà fait
    if (audioContext && !window.masterGainNode) {
        window.masterGainNode = audioContext.createGain();
        window.masterGainNode.connect(audioContext.destination);
        window.masterVolume = 0.75; // Volume par défaut
        console.log('🎵 Master gain node initialisé');
    }
});

// ===== BARRE DE CONTRÔLE DES DÉMOS =====

// Variables globales pour la gestion des démos
let currentDemo = null;
let demoIsPlaying = false;
let demoStartTime = 0;
let demoProgressInterval = null;

// Afficher la barre de contrôle
function showDemoControls() {
    const controls = document.getElementById('demoControls');
    if (controls) {
        controls.style.display = 'flex';
    }
}

// Masquer la barre de contrôle
function hideDemoControls() {
    const controls = document.getElementById('demoControls');
    if (controls) {
        controls.style.display = 'none';
    }
}

// Mettre à jour les informations de la démo
function updateDemoInfo(demoName = 'Aucune démo sélectionnée') {
    const info = document.getElementById('demoInfo');
    if (info) {
        info.textContent = demoName;
    }
}

// Mettre à jour la barre de progression
function updateDemoProgress(progress = 0) {
    const progressBar = document.getElementById('demoProgress');
    if (progressBar) {
        progressBar.style.width = `${progress}%`;
    }
}

// Contrôles de lecture
function demoPlay() {
    if (!currentDemo) return;
    
    demoIsPlaying = true;
    demoStartTime = Date.now();
    
    // Afficher le bouton pause, masquer play
    const playBtn = document.querySelector('.play-btn');
    const pauseBtn = document.querySelector('.pause-btn');
    if (playBtn) playBtn.style.display = 'none';
    if (pauseBtn) pauseBtn.style.display = 'flex';
    
    // Démarrer la mise à jour de la progression
    demoProgressInterval = setInterval(() => {
        if (demoIsPlaying && currentDemo) {
            const elapsed = Date.now() - demoStartTime;
            const progress = Math.min((elapsed / currentDemo.duration) * 100, 100);
            updateDemoProgress(progress);
            
            // Arrêter automatiquement à la fin
            if (progress >= 100) {
                demoStop();
            }
        }
    }, 100);
    
    console.log('🎵 Lecture de la démo:', currentDemo.name);
}

function demoPause() {
    demoIsPlaying = false;
    
    // Afficher le bouton play, masquer pause
    const playBtn = document.querySelector('.play-btn');
    const pauseBtn = document.querySelector('.pause-btn');
    if (playBtn) playBtn.style.display = 'flex';
    if (pauseBtn) pauseBtn.style.display = 'none';
    
    // Arrêter la mise à jour de la progression
    if (demoProgressInterval) {
        clearInterval(demoProgressInterval);
        demoProgressInterval = null;
    }
    
    console.log('⏸️ Démos en pause');
}

function demoStop() {
    demoIsPlaying = false;
    
    // Afficher le bouton play, masquer pause
    const playBtn = document.querySelector('.play-btn');
    const pauseBtn = document.querySelector('.pause-btn');
    if (playBtn) playBtn.style.display = 'flex';
    if (pauseBtn) pauseBtn.style.display = 'none';
    
    // Réinitialiser la progression
    updateDemoProgress(0);
    
    // Arrêter la mise à jour de la progression
    if (demoProgressInterval) {
        clearInterval(demoProgressInterval);
        demoProgressInterval = null;
    }
    
    console.log('⏹️ Démos arrêtée');
}

function demoRewind() {
    if (!currentDemo) return;
    
    demoStop();
    demoStartTime = Date.now();
    updateDemoProgress(0);
    
    console.log('⏮️ Retour au début de la démo');
}

// Fonction pour charger une démo dans la barre de contrôle
function loadDemoInControls(demo) {
    currentDemo = demo;
    showDemoControls();
    updateDemoInfo(demo.name);
    updateDemoProgress(0);
    
    // Réinitialiser les boutons
    const playBtn = document.querySelector('.play-btn');
    const pauseBtn = document.querySelector('.pause-btn');
    if (playBtn) playBtn.style.display = 'flex';
    if (pauseBtn) pauseBtn.style.display = 'none';
    
    console.log('📀 Démo chargée dans les contrôles:', demo.name);
}

// Exposer les fonctions globalement
window.showDemoControls = showDemoControls;
window.hideDemoControls = hideDemoControls;
window.loadDemoInControls = loadDemoInControls;
window.demoPlay = demoPlay;
window.demoPause = demoPause;
window.demoStop = demoStop;
window.demoRewind = demoRewind;
</script>


================================================================================
FICHIER: piano-soloB/includes/piano-demo-manager.php
================================================================================
<!-- Interface du Gestionnaire de Brouillons - NOUVELLE ARCHITECTURE -->
<div id="demoManagerInterface">
    <div class="demo-manager-container">
        <h3>🎵 Gestionnaire de Contenu - Interface Admin</h3>
        
        <!-- Bouton de synchronisation -->
        <div class="sync-controls">
            <button class="sync-btn" onclick="window.DEMO_MANAGER.forceSync()" title="Synchroniser avec les fichiers">
                🔄 Synchroniser
            </button>
        </div>
        
        <!-- Grille des 3 tableaux -->
        <div class="tables-grid">
            <!-- Tableau Brouillon -->
            <div class="demo-table-container">
                <div class="table-header">
                    <h4>📝 Brouillon</h4>
                    <div class="table-count" id="brouillonCount">0</div>
                </div>
                <div class="demo-table" id="brouillonTable">
                    <div class="table-content">
                        <!-- Les brouillons seront chargés ici -->
                    </div>
                </div>
            </div>
            
            <!-- Tableau Prayers -->
            <div class="demo-table-container">
                <div class="table-header">
                    <h4>🙏 Prayers</h4>
                    <div class="table-count" id="prayersCount">0</div>
                </div>
                <div class="demo-table" id="prayersTable">
                    <div class="table-content">
                        <!-- Les prayers seront chargés ici -->
                    </div>
                </div>
            </div>
            
            <!-- Tableau Bhajans -->
            <div class="demo-table-container">
                <div class="table-header">
                    <h4>🎶 Bhajans</h4>
                    <div class="table-count" id="bhajansCount">0</div>
                </div>
                <div class="demo-table" id="bhajansTable">
                    <div class="table-content">
                        <!-- Les bhajans seront chargés ici -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.demo-manager-container {
    background: rgba(255, 255, 255, 0.98);
    border-radius: 15px;
    padding: 25px;
    margin: 20px 0;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.sync-controls {
    display: flex;
    justify-content: flex-end;
    margin-bottom: 15px;
}

.sync-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.sync-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.sync-btn:active {
    transform: translateY(0);
}

.tables-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-top: 20px;
}

.demo-table-container {
    background: #f8f9fa;
    border-radius: 10px;
    border: 1px solid #e9ecef;
    overflow: hidden;
}

.table-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Bandeau orange spécial pour le tableau Brouillon */
.demo-table-container:first-child .table-header {
    background: linear-gradient(135deg, #ff8c00 0%, #ff6b35 100%);
}

.table-header h4 {
    margin: 0;
    font-size: 1.1em;
    font-weight: 600;
}

.table-count {
    background: rgba(255, 255, 255, 0.2);
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.9em;
    font-weight: 600;
}

.demo-table {
    height: 350px;
    overflow: hidden;
}

.table-content {
    height: 100%;
    overflow-y: auto;
    padding: 0;
}

.table-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 6px 15px;
    border-bottom: 1px solid #e9ecef;
    min-height: 25px;
    transition: background-color 0.2s ease;
}

.table-row:nth-child(even) {
    background-color: #f8f9fa;
}

.table-row:nth-child(odd) {
    background-color: #ffffff;
}

.table-row:hover {
    background-color: #e3f2fd;
}

.row-info {
    flex: 1;
    min-width: 0;
}

.row-title {
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 3px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 150px;
}

.row-meta {
    font-size: 11px;
    color: #6c757d;
}

.row-actions {
    display: flex;
    gap: 4px;
    align-items: center;
    flex-shrink: 0;
}

 .action-btn {
     width: 28px;
     height: 28px;
     border: none;
     border-radius: 4px;
     cursor: pointer;
     display: flex;
     align-items: center;
     justify-content: center;
     font-size: 12px;
     transition: all 0.2s ease;
     background: transparent;
     position: relative;
     z-index: 10002;
 }

.action-btn:hover {
    transform: scale(1.1);
}

.btn-play {
    color: #28a745;
}

.btn-play:hover {
    background: #d4edda;
}

.btn-stop {
    color: #dc3545;
}

.btn-stop:hover {
    background: #f8d7da;
}

.btn-edit {
    color: #ffc107;
}

.btn-edit:hover {
    background: #fff3cd;
}

.btn-move {
    color: #17a2b8;
}

.btn-move:hover {
    background: #d1ecf1;
}

.btn-delete {
    color: #dc3545;
}

.btn-delete:hover {
    background: #f8d7da;
}

.empty-table {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6c757d;
    font-style: italic;
    font-size: 14px;
}

.loading-state, .error-state {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: #6c757d;
    font-style: italic;
    font-size: 14px;
}

/* Responsive */
@media (max-width: 1200px) {
    .tables-grid {
        grid-template-columns: 1fr;
        gap: 15px;
    }
    
    .demo-table {
        height: 250px;
    }
}

@media (max-width: 768px) {
    .demo-manager-container {
        padding: 15px;
    }
    
    .table-header {
        padding: 12px;
    }
    
    .table-row {
        padding: 5px 12px;
        min-height: 22px;
    }
    
    .demo-table {
        height: 200px;
    }
    
    .row-title {
        max-width: 120px;
    }
    
    .action-btn {
        width: 26px;
        height: 26px;
        font-size: 11px;
    }
}
</style>

<script>
// Module de gestion des brouillons - NOUVELLE ARCHITECTURE
window.DEMO_MANAGER = {
    init: function() {
        console.log('🎵 Initialisation du gestionnaire de contenu...');
        this.loadAllTables();
        this.setupEventListeners();
        this.initialized = true;
        console.log('✅ DEMO_MANAGER initialisé');
    },
    
    loadAllTables: function() {
        console.log('🔄 Rechargement de tous les tableaux...');
        
        // Afficher des indicateurs de chargement
        this.showLoadingStates();
        
        // Forcer un rechargement complet avec un délai minimal
        // pour s'assurer que les fichiers sont bien synchronisés
        setTimeout(() => {
            this.loadTable('brouillon');
            this.loadTable('prayers');
            this.loadTable('bhajans');
        }, 100);
    },
    
    // Fonction pour forcer la synchronisation avec les fichiers réels
    forceSync: function() {
        console.log('🔄 Synchronisation forcée avec les fichiers...');
        
        // Vider le cache du navigateur pour les fichiers JSON
        if ('caches' in window) {
            caches.keys().then(names => {
                names.forEach(name => {
                    caches.delete(name);
                });
            });
        }
        
        // Recharger tous les tableaux avec un délai
        setTimeout(() => {
            this.loadAllTables();
        }, 200);
    },
    
    showLoadingStates: function() {
        // Afficher des indicateurs de chargement pour chaque tableau
        ['brouillon', 'prayers', 'bhajans'].forEach(tableType => {
            const container = document.querySelector(`#${tableType}Table .table-content`);
            const countElement = document.getElementById(`${tableType}Count`);
            
            if (container) {
                container.innerHTML = '<div class="loading-state">🔄 Chargement...</div>';
            }
            if (countElement) {
                countElement.textContent = '...';
            }
        });
    },
    
    loadTable: function(tableType) {
        console.log(`📋 Chargement du tableau: ${tableType}`);
        
        if (tableType === 'brouillon') {
            this.loadBrouillonTable();
        } else {
            this.loadLibraryTable(tableType);
        }
    },
    
    loadBrouillonTable: function() {
        fetch('demo-manager-api.php?action=getDemos&library=brouillon')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    this.displayTableContent('brouillon', data.demos, 'brouillon');
                } else {
                    this.displayTableContent('brouillon', [], 'brouillon');
                }
            })
            .catch(error => {
                console.error('Erreur lors du chargement des brouillons:', error);
                this.displayTableContent('brouillon', [], 'brouillon');
            });
    },
    
    loadLibraryTable: function(library) {
        console.log(`📋 Chargement de la bibliothèque: ${library}`);
        
        // Ajouter un timestamp pour éviter le cache
        const timestamp = Date.now();
        const url = `demospubliques/${library}/index.json?t=${timestamp}`;
        
        fetch(url)
            .then(response => {
                console.log(`📄 Réponse pour ${library}:`, response.status);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log(`📊 Données reçues pour ${library}:`, data);
                
                // Traiter les données reçues
                if (Array.isArray(data)) {
                    // Si c'est un tableau, l'utiliser directement
                    this.displayTableContent(library, data, library);
                } else if (data && data.demos) {
                    // Si c'est un objet avec des démos, les afficher
                    this.displayTableContent(library, data.demos, library);
                } else {
                    // Sinon, afficher vide
                    this.displayTableContent(library, [], library);
                }
            })
            .catch(error => {
                console.error(`Erreur lors du chargement de ${library}:`, error);
                // En cas d'erreur, afficher un message d'erreur
                this.displayTableContent(library, [], library, error.message);
            });
    },
    
    displayTableContent: function(tableType, demos, sourceType, errorMessage = null) {
        console.log(`🎯 displayTableContent: ${tableType}, ${demos.length} démos, source: ${sourceType}`);
        
        const container = document.querySelector(`#${tableType}Table .table-content`);
        const countElement = document.getElementById(`${tableType}Count`);
        
        console.log(`🔍 Container trouvé:`, !!container);
        console.log(`🔍 CountElement trouvé:`, !!countElement);
        
        if (!container) {
            console.error(`❌ Container non trouvé pour ${tableType}Table`);
            return;
        }
        
        // Mettre à jour le compteur
        if (countElement) {
            countElement.textContent = demos.length;
        }
        
        // Afficher un message d'erreur si nécessaire
        if (errorMessage) {
            container.innerHTML = `<div class="error-state">❌ Erreur: ${errorMessage}</div>`;
            return;
        }
        
        if (!demos || demos.length === 0) {
            container.innerHTML = '<div class="empty-table">Aucun contenu</div>';
            return;
        }
        
        container.innerHTML = demos.map((demo, index) => {
            const isEven = index % 2 === 0;
            
            // Système de noms dual : priorité displayName > name > fallback
            let demoName = 'Démo sans nom';
            let demoId = demo.filename || 'unknown';
            
            // Utiliser le nom d'affichage en priorité
            if (demo.displayName) {
                demoName = demo.displayName;
            } else if (demo.name && demo.name !== demo.filename) {
                demoName = demo.name;
            } else if (demo.filename) {
                // Fallback : extraire un nom lisible du filename
                demoName = extractReadableName(demo.filename);
            }
            
            // Utiliser le nom technique pour l'ID si disponible
            if (demo.technicalName) {
                demoId = demo.technicalName;
            } else if (demo.filename) {
                demoId = demo.filename.replace('.json', '');
            }
            
            const demoDate = demo.created || demo.added || demo.lastModified || Date.now();
            
            // Fonction pour extraire un nom lisible du filename (fallback)
            function extractReadableName(filename) {
                if (!filename) return 'Démo sans nom';
                
                // Supprimer l'extension .json
                let name = filename.replace(/\.json$/, '');
                
                // Supprimer le préfixe "demo_"
                name = name.replace(/^demo_/, '');
                
                // Extraire la partie descriptive (avant le premier timestamp)
                const parts = name.split('_');
                const descriptiveParts = [];
                
                for (let part of parts) {
                    // Si c'est un timestamp (10+ chiffres) ou un ID hex (8+ caractères), arrêter
                    if (/^\d{10,}$/.test(part) || /^[a-f0-9]{8,}$/i.test(part)) {
                        break;
                    }
                    descriptiveParts.push(part);
                }
                
                let readableName = descriptiveParts.join('_');
                
                // Nettoyer et formater
                readableName = readableName.replace(/_/g, ' ');
                readableName = readableName.charAt(0).toUpperCase() + readableName.slice(1);
                readableName = readableName.trim();
                
                // Si le nom est vide ou trop court, utiliser un nom par défaut
                if (readableName.length < 3) {
                    readableName = 'Démo ' + filename.substring(0, 10);
                }
                
                return readableName;
            }
            
            return `
                <div class="table-row ${isEven ? 'even' : 'odd'}" data-id="${demoId}" data-type="${sourceType}" data-filename="${demo.filename}" data-technical-name="${demo.technicalName || ''}">
                    <div class="row-info">
                        <div class="row-title" title="${demoName}">${demoName}</div>
                        <div class="row-meta">${new Date(demoDate).toLocaleDateString()}</div>
                    </div>
                    <div class="row-actions">
                        <button class="action-btn btn-play" onclick="window.DEMO_MANAGER.playDemo('${demoId}', '${sourceType}', this)" title="Lecture">
                            ▶️
                        </button>
                        <button class="action-btn btn-edit" onclick="window.DEMO_MANAGER.editDemo('${demoId}', '${demoName}', '${sourceType}')" title="Modifier">
                            ✏️
                        </button>
                        <button class="action-btn btn-move" onclick="window.DEMO_MANAGER.moveDemo('${demoId}', '${demoName}', '${sourceType}')" title="Déplacer">
                            📁
                        </button>
                        <button class="action-btn btn-delete" onclick="window.DEMO_MANAGER.deleteDemo('${demoId}', '${sourceType}')" title="Supprimer">
                            🗑️
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    },
    
    playDemo: function(demoId, sourceType, buttonElement = null) {
        console.log(`▶️ Lecture de ${demoId} depuis ${sourceType}`);
        
        // Arrêter toute lecture en cours
        if (window.stopAllPlayback) {
            window.stopAllPlayback();
        }
        
        // Trouver la démo dans les données du tableau pour obtenir le bon filename
        const tableContainer = document.querySelector(`#${sourceType}Table .table-content`);
        if (!tableContainer) {
            console.error('Tableau non trouvé:', sourceType);
            return;
        }
        
        // Chercher par nom technique d'abord, puis par ID
        let demoRow = tableContainer.querySelector(`[data-technical-name="${demoId}"][data-type="${sourceType}"]`);
        if (!demoRow) {
            demoRow = tableContainer.querySelector(`[data-id="${demoId}"][data-type="${sourceType}"]`);
        }
        
        if (!demoRow) {
            console.error('Démo non trouvée dans le tableau:', demoId);
            return;
        }
        
        // Récupérer les données de la démo depuis l'attribut data
        const demoData = demoRow.dataset;
        const filename = demoData.filename || demoId;
        
        // Charger le fichier JSON de la démo
        let demoFile = '';
        if (sourceType === 'brouillon') {
            demoFile = `demospubliques/brouillon/${filename}`;
        } else {
            demoFile = `demospubliques/${sourceType}/${filename}`;
        }
        
        console.log(`📁 Tentative de chargement: ${demoFile}`);
        
        // Mettre à jour le bouton pour indiquer la lecture
        if (buttonElement) {
            buttonElement.classList.add('playing');
            buttonElement.innerHTML = '⏸️';
        }
        
        fetch(demoFile)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('📄 Données de démo chargées:', data);
                
                if (data && data.data && data.data.recording) {
                    console.log('🔍 Vérification du module RECORDER...');
                    
                    // Utiliser le module RECORDER pour jouer la démo
                    if (window.RECORDER_MODULE && window.RECORDER_MODULE.playRecording) {
                        console.log('✅ Module RECORDER disponible, lancement de la lecture...');
                        
                        // Récupérer le nom de la démo pour l'affichage
                        const demoName = demoRow.querySelector('.row-title')?.textContent || 'Démo';
                        
                        // Mettre à jour l'indicateur de synchronisation si disponible
                        if (window.updateSyncIndicator) {
                            window.currentPlayingDemo = `${demoName} (${sourceType})`;
                            window.currentPlayingButton = buttonElement;
                            window.updateSyncIndicator();
                        }
                        
                        // Lancer la lecture
                        window.RECORDER_MODULE.playRecording(data.data.recording, buttonElement);
                        
                    } else {
                        console.error('❌ Module RECORDER non disponible');
                        alert('Module de lecture non disponible - Vérifiez la console pour plus de détails');
                        
                        // Réinitialiser le bouton
                        if (buttonElement) {
                            buttonElement.classList.remove('playing');
                            buttonElement.innerHTML = '▶️';
                        }
                    }
                } else {
                    console.error('Format de démo invalide:', data);
                    alert('Format de démo non reconnu - données manquantes');
                    
                    // Réinitialiser le bouton
                    if (buttonElement) {
                        buttonElement.classList.remove('playing');
                        buttonElement.innerHTML = '▶️';
                    }
                }
            })
            .catch(error => {
                console.error('Erreur lors du chargement de la démo:', error);
                alert(`Erreur lors du chargement de la démo: ${error.message}`);
                
                // Réinitialiser le bouton
                if (buttonElement) {
                    buttonElement.classList.remove('playing');
                    buttonElement.innerHTML = '▶️';
                }
            });
    },
    
    stopDemo: function() {
        console.log('⏹️ Arrêt de la lecture');
        
        // Arrêter la lecture via le module RECORDER
        if (window.RECORDER_MODULE && window.RECORDER_MODULE.stopPlayback) {
            window.RECORDER_MODULE.stopPlayback();
        }
    },
    
    editDemo: function(demoId, currentName, sourceType) {
        const newName = prompt('Nouveau nom:', currentName);
        if (newName === null || newName.trim() === '') return;
        
        console.log(`✏️ Modification de ${demoId} vers "${newName}"`);
        
        // Appeler l'API pour modifier le nom
        fetch('demo-manager-api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'editDemo',
                demoId: demoId,
                newName: newName
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Nom modifié: "${newName}"`, 'success');
                }
                
                // Recharger le tableau correspondant
                setTimeout(() => {
                    this.loadTable(sourceType);
                }, 500);
            } else {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Erreur: ${data.message}`, 'error');
                }
            }
        })
        .catch(error => {
            console.error('Erreur lors de la modification:', error);
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification('Erreur lors de la modification', 'error');
            }
        });
    },
    
    moveDemo: function(demoId, demoName, sourceType) {
        // Créer une interface moderne pour choisir la bibliothèque
        this.showLibrarySelector(demoId, demoName, sourceType);
    },
    
    showLibrarySelector: function(demoId, demoName, sourceType) {
        // Créer le modal de sélection
        const modal = document.createElement('div');
        modal.className = 'library-selector-modal';
        modal.innerHTML = `
            <div class="library-selector-content">
                <div class="library-selector-header">
                    <h3>📁 Déplacer "${demoName}"</h3>
                    <button class="close-btn" onclick="this.closest('.library-selector-modal').remove()">✕</button>
                </div>
                <div class="library-selector-body">
                    <p>Choisissez la bibliothèque de destination :</p>
                    <div class="library-options">
                        <button class="library-option" data-library="brouillon" onclick="window.DEMO_MANAGER.executeMove('${demoId}', '${demoName}', '${sourceType}', 'brouillon', this)">
                            <div class="library-icon">📝</div>
                            <div class="library-info">
                                <div class="library-name">Brouillon</div>
                                <div class="library-desc">Zone de travail temporaire</div>
                            </div>
                        </button>
                        <button class="library-option" data-library="prayers" onclick="window.DEMO_MANAGER.executeMove('${demoId}', '${demoName}', '${sourceType}', 'prayers', this)">
                            <div class="library-icon">🙏</div>
                            <div class="library-info">
                                <div class="library-name">Prayers</div>
                                <div class="library-desc">Bibliothèque de prières</div>
                            </div>
                        </button>
                        <button class="library-option" data-library="bhajans" onclick="window.DEMO_MANAGER.executeMove('${demoId}', '${demoName}', '${sourceType}', 'bhajans', this)">
                            <div class="library-icon">🎶</div>
                            <div class="library-info">
                                <div class="library-name">Bhajans</div>
                                <div class="library-desc">Bibliothèque de chants</div>
                            </div>
                        </button>
                    </div>
                </div>
                <div class="library-selector-footer">
                    <button class="cancel-btn" onclick="this.closest('.library-selector-modal').remove()">Annuler</button>
                </div>
            </div>
        `;
        
        // Ajouter les styles CSS
        if (!document.getElementById('library-selector-styles')) {
            const style = document.createElement('style');
            style.id = 'library-selector-styles';
            style.textContent = `
                .library-selector-modal {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.5);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 10001;
                    animation: fadeIn 0.3s ease;
                }
                
                .library-selector-content {
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
                    max-width: 500px;
                    width: 90%;
                    animation: slideIn 0.3s ease;
                }
                
                .library-selector-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 20px 25px;
                    border-bottom: 1px solid #e9ecef;
                }
                
                .library-selector-header h3 {
                    margin: 0;
                    color: #2c3e50;
                    font-size: 1.2em;
                }
                
                .close-btn {
                    background: none;
                    border: none;
                    font-size: 20px;
                    cursor: pointer;
                    color: #6c757d;
                    padding: 5px;
                    border-radius: 50%;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .close-btn:hover {
                    background: #f8f9fa;
                    color: #dc3545;
                }
                
                .library-selector-body {
                    padding: 25px;
                }
                
                .library-selector-body p {
                    margin: 0 0 20px 0;
                    color: #6c757d;
                    font-size: 14px;
                }
                
                .library-options {
                    display: flex;
                    flex-direction: column;
                    gap: 12px;
                }
                
                .library-option {
                    display: flex;
                    align-items: center;
                    padding: 15px;
                    border: 2px solid #e9ecef;
                    border-radius: 10px;
                    background: white;
                    cursor: pointer;
                    transition: all 0.2s ease;
                    text-align: left;
                }
                
                .library-option:hover {
                    border-color: #007bff;
                    background: #f8f9ff;
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.15);
                }
                
                .library-option.selected {
                    border-color: #28a745;
                    background: #f8fff9;
                }
                
                .library-icon {
                    font-size: 24px;
                    margin-right: 15px;
                    width: 40px;
                    text-align: center;
                }
                
                .library-info {
                    flex: 1;
                }
                
                .library-name {
                    font-weight: 600;
                    color: #2c3e50;
                    font-size: 16px;
                    margin-bottom: 4px;
                }
                
                .library-desc {
                    color: #6c757d;
                    font-size: 13px;
                }
                
                .library-selector-footer {
                    padding: 20px 25px;
                    border-top: 1px solid #e9ecef;
                    text-align: right;
                }
                
                .cancel-btn {
                    background: #6c757d;
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 6px;
                    cursor: pointer;
                    font-size: 14px;
                    transition: background 0.2s ease;
                }
                
                .cancel-btn:hover {
                    background: #5a6268;
                }
                
                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                
                @keyframes slideIn {
                    from { transform: translateY(-20px); opacity: 0; }
                    to { transform: translateY(0); opacity: 1; }
                }
                
                @media (max-width: 768px) {
                    .library-selector-content {
                        width: 95%;
                        margin: 20px;
                    }
                    
                    .library-selector-header,
                    .library-selector-body,
                    .library-selector-footer {
                        padding: 15px;
                    }
                }
            `;
            document.head.appendChild(style);
        }
        
        // Ajouter le modal au DOM
        document.body.appendChild(modal);
        
        // Fermer le modal en cliquant à l'extérieur
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.remove();
            }
        });
        
        // Fermer avec la touche Escape
        document.addEventListener('keydown', function closeOnEscape(e) {
            if (e.key === 'Escape') {
                modal.remove();
                document.removeEventListener('keydown', closeOnEscape);
            }
        });
    },
    
    executeMove: function(demoId, demoName, sourceType, targetLibrary, buttonElement) {
        // Ajouter un effet visuel de sélection
        const options = document.querySelectorAll('.library-option');
        options.forEach(opt => opt.classList.remove('selected'));
        buttonElement.classList.add('selected');
        
        console.log(`📁 Déplacement de ${demoId} vers ${targetLibrary}`);
        
        // Fermer le modal
        const modal = document.querySelector('.library-selector-modal');
        if (modal) modal.remove();
        
        // Masquer visuellement la ligne source immédiatement
        const sourceRow = document.querySelector(`[data-id="${demoId}"][data-type="${sourceType}"]`);
        if (sourceRow) {
            sourceRow.style.opacity = '0.3';
            sourceRow.style.backgroundColor = '#e8f5e8';
            sourceRow.style.transition = 'all 0.3s ease';
        }
        
        // Afficher un indicateur de chargement
        if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
            window.SAVE_UPLOAD_MODULE.showNotification(`Déplacement en cours vers ${targetLibrary}...`, 'info');
        }
        
        // Appeler l'API pour déplacer la démo
        fetch('demo-manager-api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'moveToLibrary',
                demoId: demoId,
                library: targetLibrary,
                newName: demoName,
                sourceType: sourceType
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Démo déplacée vers ${targetLibrary}`, 'success');
                }
                
                // Forcer un rechargement complet après un délai
                // pour s'assurer que les fichiers sont bien synchronisés
                setTimeout(() => {
                    console.log('🔄 Rechargement complet après déplacement...');
                    this.loadAllTables();
                    
                    // Recharger l'interface élève
                    this.reloadStudentInterface();
                }, 500);
            } else {
                // Restaurer l'apparence de la ligne en cas d'erreur
                if (sourceRow) {
                    sourceRow.style.opacity = '1';
                    sourceRow.style.backgroundColor = '';
                }
                
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Erreur: ${data.message}`, 'error');
                }
            }
        })
        .catch(error => {
            console.error('Erreur lors du déplacement:', error);
            
            // Restaurer l'apparence de la ligne en cas d'erreur
            if (sourceRow) {
                sourceRow.style.opacity = '1';
                sourceRow.style.backgroundColor = '';
            }
            
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification('Erreur lors du déplacement', 'error');
            }
        });
    },
    
    deleteDemo: function(demoId, sourceType) {
        if (!confirm('Êtes-vous sûr de vouloir supprimer cet élément ?')) return;
        
        console.log(`🗑️ Suppression de ${demoId} depuis ${sourceType}`);
        
        // Masquer visuellement la ligne immédiatement
        const row = document.querySelector(`[data-id="${demoId}"][data-type="${sourceType}"]`);
        if (row) {
            row.style.opacity = '0.5';
            row.style.backgroundColor = '#ffe6e6';
            row.style.transition = 'all 0.3s ease';
        }
        
        // Appeler l'API pour supprimer la démo
        fetch('demo-manager-api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'deleteDemo',
                demoId: demoId,
                sourceType: sourceType
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification('Démo supprimée avec succès', 'success');
                }
                
                // Forcer un rechargement complet après un délai
                // pour s'assurer que les fichiers sont bien synchronisés
                setTimeout(() => {
                    console.log('🔄 Rechargement complet après suppression...');
                    this.loadAllTables();
                    
                    // Recharger l'interface élève
                    this.reloadStudentInterface();
                }, 500);
            } else {
                // Restaurer l'apparence de la ligne en cas d'erreur
                if (row) {
                    row.style.opacity = '1';
                    row.style.backgroundColor = '';
                }
                
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Erreur: ${data.message}`, 'error');
                }
            }
        })
        .catch(error => {
            console.error('Erreur lors de la suppression:', error);
            
            // Restaurer l'apparence de la ligne en cas d'erreur
            if (row) {
                row.style.opacity = '1';
                row.style.backgroundColor = '';
            }
            
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification('Erreur lors de la suppression', 'error');
            }
        });
    },
    
        // Fonction globale pour recharger l'interface élève
    reloadStudentInterface: function() {
        console.log('🔄 Rechargement de l\'interface élève...');
        
        // Méthode 1: Fonction directe
        if (typeof loadStudentDemoTables === 'function') {
            loadStudentDemoTables();
            return;
        }
        
        // Méthode 2: Événement personnalisé
        if (window.dispatchEvent) {
            window.dispatchEvent(new CustomEvent('reloadStudentTables'));
            return;
        }
        
        // Méthode 3: Rechargement forcé de la page élève
        console.log('🔄 Tentative de rechargement forcé...');
        try {
            // Essayer de recharger la page élève si elle est dans un autre onglet
            if (window.opener && window.opener.location.href.includes('index.php')) {
                window.opener.location.reload();
            }
            // Essayer de recharger les frames
            const studentFrames = window.frames;
            for (let i = 0; i < studentFrames.length; i++) {
                try {
                    if (studentFrames[i].location.href.includes('index.php')) {
                        studentFrames[i].location.reload();
                    }
                } catch (e) {
                    // Ignorer les erreurs de sécurité cross-origin
                }
            }
        } catch (e) {
            console.log('⚠️ Impossible de recharger l\'interface élève automatiquement');
        }
    },

    editDemo: function(demoId, currentName, sourceType) {
        const newName = prompt('Nouveau nom:', currentName);
        if (newName === null || newName.trim() === '') return;
        
        console.log(`✏️ Modification de ${demoId} vers "${newName}"`);
        
        // Appeler l'API pour modifier le nom
        fetch('demo-manager-api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'editDemo',
                demoId: demoId,
                newName: newName
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Nom modifié: "${newName}"`, 'success');
                }
                
                // Recharger le tableau correspondant
                setTimeout(() => {
                    this.loadTable(sourceType);
                }, 500);
                
                // Recharger l'interface élève
                setTimeout(() => {
                    this.reloadStudentInterface();
                }, 1000);
            } else {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Erreur: ${data.message}`, 'error');
                }
            }
        })
        .catch(error => {
            console.error('Erreur lors de la modification:', error);
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification('Erreur lors de la modification', 'error');
            }
        });
    },
    
    moveDemo: function(demoId, demoName, sourceType) {
        // Créer une interface moderne pour choisir la bibliothèque
        this.showLibrarySelector(demoId, demoName, sourceType);
    },
    
    deleteDemo: function(demoId, sourceType) {
        if (!confirm(`Êtes-vous sûr de vouloir supprimer "${demoId}" ?\n\nCette action est irréversible.`)) {
            return;
        }
        
        console.log(`🗑️ Suppression de ${demoId} depuis ${sourceType}`);
        
        // Appeler l'API pour supprimer
        fetch('demo-manager-api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'deleteDemo',
                demoId: demoId,
                sourceType: sourceType
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Démo supprimée: "${demoId}"`, 'success');
                }
                
                // Recharger le tableau correspondant
                setTimeout(() => {
                    this.loadTable(sourceType);
                }, 500);
                
                // Recharger l'interface élève
                setTimeout(() => {
                    this.reloadStudentInterface();
                }, 1000);
            } else {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Erreur: ${data.message}`, 'error');
                }
            }
        })
        .catch(error => {
            console.error('Erreur lors de la suppression:', error);
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification('Erreur lors de la suppression', 'error');
            }
        });
    },

    setupEventListeners: function() {
         // Écouter les clics sur les en-têtes de tableaux pour recharger
         document.querySelectorAll('.table-header').forEach(header => {
             header.addEventListener('click', function() {
                 const tableType = this.closest('.demo-table-container').querySelector('.demo-table').id.replace('Table', '');
                 window.DEMO_MANAGER.loadTable(tableType);
             });
         });
         
         // SYNCHRONISATION DÉSACTIVÉE POUR TEST - CONFLIT AVEC index-admin.php
         // this.ensureButtonsAccessible();
     },
     
           ensureButtonsAccessible: function() {
          // SYNCHRONISATION DÉSACTIVÉE POUR TEST - CONFLIT AVEC index-admin.php
          /*
          // Fermer tous les menus dropdown quand on clique sur un bouton de lecture
          document.addEventListener('click', function(e) {
              if (e.target.classList.contains('btn-play') || e.target.closest('.btn-play')) {
                  // Fermer tous les menus dropdown
                  document.querySelectorAll('.menu-dropdown.show').forEach(dropdown => {
                      dropdown.classList.remove('show');
                  });
              }
          });
          
          // S'assurer que les boutons de lecture ont un z-index élevé
          setInterval(() => {
              document.querySelectorAll('.btn-play').forEach(btn => {
                  if (btn.style.zIndex !== '10002') {
                      btn.style.zIndex = '10002';
                      btn.style.position = 'relative';
                  }
              });
          }, 1000);
          
          // Synchroniser avec les menus dropdown
          this.syncWithDropdownMenus();
          */
      },
      
             // syncWithDropdownMenus: function() {
             // SYNCHRONISATION DÉSACTIVÉE POUR TEST - CONFLIT AVEC index-admin.php
             // },
       
   
    
    resetKeyboardPlayerBar: function() {
           // Réinitialiser le bouton play de la barre de lecture sous le clavier
           const playBtn = document.getElementById('playBtn');
           if (playBtn) {
               playBtn.classList.remove('playing');
               playBtn.innerHTML = '▶ Écouter';
               playBtn.disabled = true; // Désactiver car pas d'enregistrement en cours
           }
           
           // Réinitialiser le bouton stop
           const stopBtn = document.getElementById('stopBtn');
           if (stopBtn) {
               stopBtn.disabled = true;
           }
           
           // Réinitialiser le compteur de temps
           const timeCounter = document.getElementById('timeCounter');
           if (timeCounter) {
               timeCounter.textContent = '00:00';
           }
       }
};

// Initialisation gérée par index-admin.php pour éviter les conflits
console.log('🎯 DEMO_MANAGER défini, en attente d\'initialisation par index-admin.php');
</script>



================================================================================
FICHIER: piano-soloB/includes/piano-harmonium.php
================================================================================
<!-- /includes/piano-harmonium.php -->
<!-- Module Harmonium avec fixes Android et sans affichage MIDI parasite - Chargement des Samples -->
<!-- Le Badge "Harmonium" s'affiche en haut à droite du clavier si tout les samples sont chargés -->
<style>
/* Styles principaux */
.harmonium-loader {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: rgba(255, 255, 255, 0.95);
    padding: 30px;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    text-align: center;
    z-index: 1000;
    min-width: 300px;
}

.harmonium-loader h3 {
    margin: 0 0 20px 0;
    color: #2c3e50;
}

.harmonium-progress {
    width: 100%;
    height: 20px;
    background: #e0e0e0;
    border-radius: 10px;
    overflow: hidden;
    margin: 10px 0;
}

.harmonium-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    width: 0%;
    transition: width 0.3s ease;
}

.harmonium-status {
    font-size: 14px;
    color: #666;
    margin-top: 10px;
}

.harmonium-badge {
    position: static;
    background: #9d794e;
    color: white;
    padding: 5px 15px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: bold;
    display: none;
    z-index: 10;
    margin-right: 15px;
}

.harmonium-badge.active {
    display: block;
    animation: fadeIn 0.5s ease;
}

/* Bouton mobile simple */
.mobile-audio-init {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(52, 152, 219, 0.95);
    color: white;
    padding: 15px 30px;
    border-radius: 25px;
    font-size: 16px;
    font-weight: bold;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    z-index: 1001;
    display: none;
}

@keyframes fadeIn {
    from { opacity: 0; transform: scale(0.8); }
    to { opacity: 1; transform: scale(1); }
}
</style>

<div class="harmonium-loader" id="harmoniumLoader">
    <h3>🎹 Chargement de l'harmonium...</h3>
    <div class="harmonium-progress">
        <div class="harmonium-progress-bar" id="harmoniumProgressBar"></div>
    </div>
    <div class="harmonium-status" id="harmoniumStatus">Initialisation...</div>
</div>

<div class="mobile-audio-init" id="mobileAudioInit">
    🔊 Touchez n'importe où pour activer le son
</div>

<script>
// Module Harmonium - Version finale avec tous les fixes
const HARMONIUM_MODULE = (function() {
    'use strict';
    
    // Configuration
    const config = {
        samplePath: 'samples/harmonium/',
        notes: [],
        loaded: false,
        samples: {},
        activeSources: new Map(),
        audioInitialized: false,
        isMobile: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
        playbackMethod: null, // 'samples' ou 'oscillator'
        currentPreset: 'harmonium' // Preset actuel
    };
    
    // Presets disponibles
    const presets = {
        'harmonium': {
            name: 'Harmonium de rue',
            path: 'samples/harmonium/',
            description: '3 octaves - Son authentique'
        },
        'harmonium-paul-and-co': {
            name: 'Harmonium Paul and Co',
            path: 'samples/hamonium-paul-and-co/',
            description: '3 octaves - Son premium'
        }
    };
    
    // Générer la liste des notes
    function generateNoteList() {
        const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
        const notes = [];
        
        for (let octave = 3; octave <= 5; octave++) {
            noteNames.forEach(note => {
                notes.push(note + octave);
            });
        }
        notes.push('C6');
        
        config.notes = notes;
        console.log(`Harmonium: ${notes.length} notes à charger`);
    }
    
    // Initialiser l'audio (spécial mobile)
    function initializeAudio() {
        if (config.audioInitialized) return;
        
        if (!window.audioContext) {
            // Utiliser le contexte audio global
            if (window.globalAudioContext) {
                window.audioContext = window.globalAudioContext;
            } else {
                window.globalAudioContext = new (window.AudioContext || window.webkitAudioContext)();
                window.audioContext = window.globalAudioContext;
                console.log('🎵 Contexte audio global créé dans harmonium (initializeAudio)');
            }
        }
        
        // Jouer un son silencieux pour débloquer
        const buffer = window.audioContext.createBuffer(1, 1, 22050);
        const source = window.audioContext.createBufferSource();
        source.buffer = buffer;
        source.connect(window.audioContext.destination);
        source.start(0);
        
        // Reprendre si suspendu
        if (window.audioContext.state === 'suspended') {
            window.audioContext.resume();
        }
        
        config.audioInitialized = true;
        
        // Masquer le message mobile
        const mobileInit = document.getElementById('mobileAudioInit');
        if (mobileInit) {
            mobileInit.style.display = 'none';
        }
        
        console.log('✅ Audio initialisé');
    }
    
    // Charger un sample
    async function loadSample(note, audioContext) {
        const fileNote = note.replace('#', 's');
        const possibleNames = [
            `harmonium_${fileNote}.mp3`,
            `harmonium_${note}.mp3`
        ];
        
        for (const filename of possibleNames) {
            const url = `${config.samplePath}${filename}`;
            
            try {
                const response = await fetch(url);
                if (response.ok) {
                    const arrayBuffer = await response.arrayBuffer();
                    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);
                    
                    config.samples[note] = audioBuffer;
                    return true;
                }
            } catch (error) {
                continue;
            }
        }
        
        return false;
    }
    
    // Changer de preset
    async function changePreset(presetId) {
        if (!presets[presetId]) {
            console.error('Preset non trouvé:', presetId);
            return false;
        }
        
        console.log(`🔄 Changement vers le preset: ${presets[presetId].name}`);
        
        // Arrêter toutes les notes actives
        config.activeSources.forEach((source, noteId) => {
            if (source.source) {
                source.source.stop();
            }
        });
        config.activeSources.clear();
        
        // Vider les samples actuels
        config.samples = {};
        config.loaded = false;
        
        // Changer le chemin
        config.samplePath = presets[presetId].path;
        config.currentPreset = presetId;
        
        // Recharger les samples
        if (window.audioContext) {
            await loadAllSamples(window.audioContext);
        }
        
        // Mettre à jour l'interface
        updateSoundMenuUI(presetId);
        
        console.log(`✅ Preset changé: ${presets[presetId].name}`);
        return true;
    }
    
    // Mettre à jour l'interface du menu SOUND
    function updateSoundMenuUI(selectedPreset) {
        const soundItems = document.querySelectorAll('.sound-item');
        soundItems.forEach(item => {
            item.classList.remove('selected');
        });
        
        // Trouver et sélectionner le bon item
        const selectedItem = document.querySelector(`[onclick*="${selectedPreset}"]`);
        if (selectedItem) {
            selectedItem.classList.add('selected');
        }
    }
    
    // Charger tous les samples
    async function loadAllSamples(audioContext) {
        const loader = document.getElementById('harmoniumLoader');
        const progressBar = document.getElementById('harmoniumProgressBar');
        const status = document.getElementById('harmoniumStatus');
        
        let loadedCount = 0;
        const totalNotes = config.notes.length;
        const batchSize = 6;
        
        for (let i = 0; i < totalNotes; i += batchSize) {
            const batch = config.notes.slice(i, i + batchSize);
            const promises = batch.map(note => loadSample(note, audioContext));
            
            const results = await Promise.all(promises);
            loadedCount += results.filter(r => r).length;
            
            const progress = (loadedCount / totalNotes) * 100;
            progressBar.style.width = progress + '%';
            status.textContent = `Chargement : ${loadedCount}/${totalNotes} notes`;
        }
        
        // Décider de la méthode de lecture
        if (loadedCount === totalNotes) {
            config.loaded = true;
            config.playbackMethod = 'samples';
            status.textContent = `✅ ${loadedCount} notes chargées !`;
            console.log('✅ Mode : Samples harmonium');
        } else {
            config.playbackMethod = 'oscillator';
            status.textContent = `⚠️ Mode dégradé : Synthé (${loadedCount}/${totalNotes})`;
            console.log('⚠️ Mode : Oscillateur de secours');
        }
        
        // Masquer le loader
        setTimeout(() => {
            loader.style.display = 'none';
            
            // Badge harmonium seulement si tous les samples sont chargés
            if (config.playbackMethod === 'samples') {
                const pianoHeader = document.querySelector('.piano-header');
                if (pianoHeader) {
                    // Supprimer l'ancien badge s'il existe
                    const existingBadge = pianoHeader.querySelector('.harmonium-badge');
                    if (existingBadge) {
                        existingBadge.remove();
                    }
                    
                    // Créer le nouveau badge avec le nom du preset
                    const badge = document.createElement('div');
                    badge.className = 'harmonium-badge active';
                    
                    // Personnaliser le badge selon le preset
                    const currentPreset = presets[config.currentPreset];
                    if (currentPreset) {
                        badge.textContent = `🎹 ${currentPreset.name}`;
                        badge.title = currentPreset.description; // Tooltip avec la description
                    } else {
                        badge.textContent = '🎹 Harmonium';
                    }
                    
                    pianoHeader.appendChild(badge);
                }
            }
            
            // Sur mobile, afficher le message d'init
            if (config.isMobile && !config.audioInitialized) {
                const mobileInit = document.getElementById('mobileAudioInit');
                if (mobileInit) {
                    mobileInit.style.display = 'block';
                }
            }
            
            // Remplacer les fonctions
            overridePianoFunctions();
        }, 500);
        
        return true;
    }
    
    // Jouer avec samples
    function playWithSample(noteId, keyElement) {
        const source = window.audioContext.createBufferSource();
        const gainNode = window.audioContext.createGain();
        
        source.buffer = config.samples[noteId];
        source.connect(gainNode);
        
        // Utiliser le gain master si disponible, sinon destination directe
        if (window.masterGainNode) {
            gainNode.connect(window.masterGainNode);
        } else {
            gainNode.connect(window.audioContext.destination);
        }
        
        // Appliquer le volume global
        const globalVolume = window.masterVolume || 0.75;
        gainNode.gain.value = 0.7 * globalVolume;
        source.start(0);
        
        config.activeSources.set(noteId, { source, gainNode });
        
        source.onended = () => {
            config.activeSources.delete(noteId);
        };
    }
    
    // Nouvelle fonction playNote universelle
    function playNoteHarmonium(noteId, keyElement) {
        // Sur mobile, initialiser l'audio au premier touch
        if (config.isMobile && !config.audioInitialized) {
            initializeAudio();
        }
        
        // S'assurer que le contexte existe
        if (!window.audioContext) {
            // Utiliser le contexte audio global
            if (window.globalAudioContext) {
                window.audioContext = window.globalAudioContext;
            } else {
                window.globalAudioContext = new (window.AudioContext || window.webkitAudioContext)();
                window.audioContext = window.globalAudioContext;
                console.log('🎵 Contexte audio global créé dans harmonium (playNote)');
            }
        }
        
        // Reprendre si suspendu
        if (window.audioContext.state === 'suspended') {
            window.audioContext.resume();
        }
        
        // Ne pas rejouer si déjà active
        if (config.activeSources.has(noteId)) return;
        
        // Visuel (toujours)
        if (keyElement) {
            keyElement.classList.add('active');
            
            if (!keyElement.querySelector('.calisson')) {
                const calisson = document.createElement('div');
                calisson.className = 'calisson';
                calisson.classList.add(keyElement.classList.contains('black') ? 'black-key' : 'white-key');
                keyElement.appendChild(calisson);
            }
        }
        
        try {
            // Choisir la méthode selon ce qui est disponible
            if (config.playbackMethod === 'samples' && config.samples[noteId]) {
                playWithSample(noteId, keyElement);
            } else if (window.playNoteOriginal) {
                // Utiliser l'oscillateur original
                window.playNoteOriginal(noteId, keyElement);
            }
        } catch (error) {
            console.error(`Erreur playNote ${noteId}:`, error);
        }
    }
    
    // Nouvelle fonction stopNote
    function stopNoteHarmonium(noteId, keyElement) {
        // Arrêter le sample si actif
        const noteData = config.activeSources.get(noteId);
        if (noteData) {
            try {
                noteData.source.stop();
                config.activeSources.delete(noteId);
            } catch (error) {
                // Ignorer
            }
        }
        
        // Visuel
        if (keyElement) {
            keyElement.classList.remove('active');
            
            const calisson = keyElement.querySelector('.calisson');
            if (calisson) {
                calisson.classList.add('fadeout');
                setTimeout(() => {
                    if (calisson && calisson.parentNode) {
                        calisson.remove();
                    }
                }, 300);
            }
        }
        
        // Si on utilise l'oscillateur, appeler l'ancienne fonction
        if (config.playbackMethod === 'oscillator' && window.stopNoteOriginal) {
            window.stopNoteOriginal(noteId, keyElement);
        }
    }
    
    // Remplacer les fonctions
    function overridePianoFunctions() {
        if (window.playNote && !window.playNoteOriginal) {
            window.playNoteOriginal = window.playNote;
            window.stopNoteOriginal = window.stopNote;
            
            window.playNote = playNoteHarmonium;
            window.stopNote = stopNoteHarmonium;
            
            console.log('✅ Fonctions remplacées - Mode:', config.playbackMethod);
        }
    }
    
    // Initialisation
    async function init() {
        console.log('🎹 Initialisation Harmonium...');
        console.log(`📱 Mobile: ${config.isMobile}`);
        
        generateNoteList();
        
        if (!window.audioContext) {
            // Utiliser le contexte audio global
            if (window.globalAudioContext) {
                window.audioContext = window.globalAudioContext;
            } else {
                window.globalAudioContext = new (window.AudioContext || window.webkitAudioContext)();
                window.audioContext = window.globalAudioContext;
                console.log('🎵 Contexte audio global créé dans harmonium');
            }
        }
        
        // Listeners pour mobile
        if (config.isMobile) {
            const initAudioOnTouch = () => {
                initializeAudio();
                document.removeEventListener('touchstart', initAudioOnTouch);
                document.removeEventListener('click', initAudioOnTouch);
            };
            
            document.addEventListener('touchstart', initAudioOnTouch);
            document.addEventListener('click', initAudioOnTouch);
        } else {
            config.audioInitialized = true;
        }
        
        await loadAllSamples(window.audioContext);
        
        return true;
    }
    
    // Fonction pour changer le volume
    function setVolume(volume) {
        // Mettre à jour le volume des sources actives
        config.activeSources.forEach((sourceData, noteId) => {
            if (sourceData.gainNode) {
                sourceData.gainNode.gain.setValueAtTime(0.7 * volume, window.audioContext.currentTime);
            }
        });
    }
    
    // API publique
    return {
        init: init,
        isLoaded: () => config.loaded,
        getPlaybackMethod: () => config.playbackMethod,
        changePreset: changePreset,
        getCurrentPreset: () => config.currentPreset,
        getPresets: () => presets,
        setVolume: setVolume,
        getSampleInfo: () => ({
            totalNotes: config.notes.length,
            loadedNotes: Object.keys(config.samples).length,
            activeSources: config.activeSources.size,
            method: config.playbackMethod,
            currentPreset: config.currentPreset
        })
    };
})();

// Initialiser
window.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        HARMONIUM_MODULE.init();
    }, 500);
});

window.HARMONIUM_MODULE = HARMONIUM_MODULE;
</script>


================================================================================
FICHIER: piano-soloB/includes/piano-midi.php
================================================================================
<!-- /includes/piano-midi.php -->
<!-- Module MIDI simplifié pour intégration dans le menu SOUND -->

<script>
// Module MIDI simplifié pour Piano Virtuel
const MIDI_MODULE = (function() {
    'use strict';
    
    // Configuration simplifiée
    const config = {
        midiAccess: null,
        currentInput: null,
        octaveOffset: 0,
        initialized: false
    };
    
    // Mapping MIDI vers notes
    function midiNoteToNoteName(midiNote) {
        const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
        const octave = Math.floor(midiNote / 12) - 1 + config.octaveOffset;
        const noteIndex = midiNote % 12;
        return noteNames[noteIndex] + octave;
    }
    
    // Trouver l'élément de touche correspondant
    function findKeyElement(noteName) {
        return document.querySelector(`.key[data-note="${noteName}"]`);
    }
    
    // Gérer les messages MIDI (version simplifiée)
    function handleMIDIMessage(event) {
        const [status, note, velocity] = event.data;
        const command = status & 0xF0;
        
        // Note On
        if (command === 0x90 && velocity > 0) {
            const noteName = midiNoteToNoteName(note);
            const keyElement = findKeyElement(noteName);
            
            if (keyElement && window.playNote) {
                window.playNote(noteName, keyElement);
            }
        }
        // Note Off
        else if (command === 0x80 || (command === 0x90 && velocity === 0)) {
            const noteName = midiNoteToNoteName(note);
            const keyElement = findKeyElement(noteName);
            
            if (keyElement && window.stopNote) {
                window.stopNote(noteName, keyElement);
            }
        }
    }
    
    // Connecter un périphérique MIDI
    function connectMIDIDevice(input) {
        if (config.currentInput) {
            config.currentInput.onmidimessage = null;
        }
        
        config.currentInput = input;
        
        if (input) {
            input.onmidimessage = handleMIDIMessage;
            console.log(`✅ MIDI connecté: ${input.name}`);
            updateMidiStatus(true, input.name);
        } else {
            console.log('❌ MIDI déconnecté');
            updateMidiStatus(false);
        }
    }
    
    // Mettre à jour le statut MIDI dans le menu
    function updateMidiStatus(connected, deviceName = '') {
        const select = document.getElementById('midi-device-select');
        if (select) {
            if (connected) {
                select.style.borderColor = '#28a745';
                select.title = `Connecté: ${deviceName}`;
            } else {
                select.style.borderColor = '#dc3545';
                select.title = 'MIDI déconnecté';
            }
        }
    }
    
    // Rafraîchir la liste des périphériques
    function refreshDeviceList() {
        const select = document.getElementById('midi-device-select');
        if (!select) return;
        
        select.innerHTML = '<option value="">Aucun périphérique MIDI</option>';
        
        if (!config.midiAccess) return;
        
        config.midiAccess.inputs.forEach((input, key) => {
            const option = document.createElement('option');
            option.value = key;
            option.textContent = input.name || `Périphérique MIDI ${key}`;
            select.appendChild(option);
            
            // Auto-sélectionner le premier périphérique
            if (select.options.length === 2 && !config.currentInput) {
                select.value = key;
                connectMIDIDevice(input);
            }
        });
    }
    
    // Gérer les changements de connexion
    function handleStateChange(event) {
        console.log(`MIDI ${event.port.type} ${event.port.state}: ${event.port.name}`);
        refreshDeviceList();
    }
    
    // Initialisation
    async function init() {
        if (config.initialized) return;
        
        console.log('🎹 Initialisation du module MIDI simplifié...');
        
        // Vérifier la disponibilité de Web MIDI API
        if (!navigator.requestMIDIAccess) {
            console.warn('Web MIDI API non supportée');
            config.initialized = true;
            return;
        }
        
        try {
            // Demander l'accès MIDI
            config.midiAccess = await navigator.requestMIDIAccess();
            
            // Écouter les changements de connexion
            config.midiAccess.onstatechange = handleStateChange;
            
            // Rafraîchir la liste
            refreshDeviceList();
            
            // Event listener pour le select dans le menu SOUND
            const deviceSelect = document.getElementById('midi-device-select');
            if (deviceSelect) {
                deviceSelect.addEventListener('change', (e) => {
                    const inputId = e.target.value;
                    if (inputId) {
                        const input = config.midiAccess.inputs.get(inputId);
                        connectMIDIDevice(input);
                    } else {
                        connectMIDIDevice(null);
                    }
                });
            }
            
            config.initialized = true;
            console.log('✅ Module MIDI simplifié prêt !');
            
        } catch (error) {
            console.error('Erreur MIDI:', error);
            config.initialized = true;
        }
    }
    
    // API publique
    return {
        init: init,
        isConnected: () => config.currentInput !== null,
        getCurrentDevice: () => config.currentInput?.name || null,
        setOctaveOffset: (offset) => { config.octaveOffset = offset; },
        selectDevice: (deviceId) => {
            if (config.midiAccess && deviceId) {
                const input = config.midiAccess.inputs.get(deviceId);
                connectMIDIDevice(input);
            }
        }
    };
    
})();

// Exporter le module
window.MIDI_MODULE = MIDI_MODULE;

// Initialiser automatiquement
window.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        MIDI_MODULE.init();
    }, 1000);
});

// Fonction globale pour le menu SOUND
window.changeMidiDevice = function(deviceId) {
    if (window.MIDI_MODULE) {
        MIDI_MODULE.selectDevice(deviceId);
    }
};
</script>


================================================================================
FICHIER: piano-soloB/includes/piano-notation.php
================================================================================
<!-- /includes/piano-notation.php -->
<!-- Module de notation pour afficher les noms des notes sur le piano mais le module choix n'est pas encore créé -->

<style>
/* Contrôles de notation */
.notation-controls {
    text-align: center;
    margin-bottom: 20px;
}

.notation-btn {
    padding: 10px 20px;
    background: #3498db;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    margin: 0 5px;
}

.notation-btn:hover {
    background: #2980b9;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.notation-status {
    display: inline-block;
    margin-left: 10px;
    padding: 5px 15px;
    background: #e9ecef;
    border-radius: 5px;
    font-size: 14px;
    font-weight: 500;
    color: #2c3e50;
}

/* Labels spécifiques pour le mode repères Do */
.key-label.do-marker {
    color: #e74c3c !important;
    font-size: 16px !important;
    font-weight: bold !important;
}

/* Animation de changement */
.key-label.fade-in {
    animation: labelFadeIn 0.3s ease;
}

@keyframes labelFadeIn {
    from { opacity: 0; transform: translateY(5px); }
    to { opacity: 1; transform: translateY(0); }
}
</style>

<!-- Bouton supprimé - Fonctionnalité déplacée dans le menu KEY ASSIST -->

<script>
// Module de notation pour Piano Virtuel
const NOTATION_MODULE = (function() {
    'use strict';
    
    // Configuration
    const config = {
        currentMode: 0, // 0: aucune, 1: anglaise, 2: française, 3: repères Do
        modes: ['Aucune', 'Anglaise (C)', 'Française (Do)', 'Repères Do (C)'],
        frenchNames: {
            'C': 'Do', 'C#': 'Do#', 'D': 'Ré', 'D#': 'Ré#', 
            'E': 'Mi', 'F': 'Fa', 'F#': 'Fa#', 'G': 'Sol', 
            'G#': 'Sol#', 'A': 'La', 'A#': 'La#', 'B': 'Si'
        }
    };
    
    // Mettre à jour l'affichage des labels
    function updateLabels() {
        const keys = document.querySelectorAll('.key');
        
        keys.forEach(key => {
            const noteId = key.dataset.note;
            if (!noteId) return;
            
            const note = noteId.slice(0, -1); // Note sans octave
            const octave = noteId.slice(-1);  // Numéro d'octave
            let label = key.querySelector('.key-label');
            
            // Créer le label s'il n'existe pas
            if (!label) {
                label = document.createElement('div');
                label.className = 'key-label';
                key.appendChild(label);
            }
            
            // Réinitialiser les classes
            label.classList.remove('do-marker', 'fade-in');
            
            switch(config.currentMode) {
                case 0: // Aucune
                    label.style.display = 'none';
                    break;
                    
                case 1: // Anglaise
                    label.style.display = 'block';
                    label.textContent = note;
                    label.classList.add('fade-in');
                    break;
                    
                case 2: // Française
                    label.style.display = 'block';
                    label.textContent = config.frenchNames[note] || note;
                    label.classList.add('fade-in');
                    break;
                    
                case 3: // Repères Do uniquement
                    if (note === 'C') {
                        label.style.display = 'block';
                        label.textContent = 'C' + octave;
                        label.classList.add('do-marker', 'fade-in');
                    } else {
                        label.style.display = 'none';
                    }
                    break;
            }
        });
        
        // Mettre à jour le statut
        updateStatus();
    }
    
    // Mettre à jour l'affichage du statut
    function updateStatus() {
        const statusEl = document.getElementById('notationStatus');
        if (statusEl) {
            statusEl.textContent = `Notation : ${config.modes[config.currentMode]}`;
        }
    }
    
    // Changer de mode (faire tourner)
    function toggleNotation() {
        config.currentMode = (config.currentMode + 1) % 4;
        updateLabels();
        
        // Sauvegarder la préférence
        if (typeof(Storage) !== "undefined") {
            localStorage.setItem('pianoNotationMode', config.currentMode);
        }
        
        console.log(`Notation changée : ${config.modes[config.currentMode]}`);
    }
    
    // Définir un mode spécifique
    function setNotation(mode) {
        if (mode >= 0 && mode <= 3) {
            config.currentMode = mode;
            updateLabels();
        }
    }
    
    // Obtenir l'état actuel
    function getState() {
        return {
            mode: config.currentMode,
            modeName: config.modes[config.currentMode]
        };
    }
    
    // Exporter les noms de notes
    function getNoteNames(language = 'english') {
        if (language === 'french') {
            return config.frenchNames;
        }
        return null;
    }
    
    // Initialisation
    function init() {
        console.log('🎵 Initialisation du module Notation...');
        
        // Charger la préférence sauvegardée
        if (typeof(Storage) !== "undefined") {
            const savedMode = localStorage.getItem('pianoNotationMode');
            if (savedMode !== null) {
                config.currentMode = parseInt(savedMode);
            }
        }
        
        // Attendre que le piano soit créé
        setTimeout(() => {
            updateLabels();
            
            // Ajouter les raccourcis clavier
            document.addEventListener('keydown', (e) => {
                if (e.altKey && !e.repeat) {
                    switch(e.key) {
                        case 'n':
                        case 'N':
                            e.preventDefault();
                            toggleNotation();
                            break;
                        case '0':
                            e.preventDefault();
                            setNotation(0);
                            break;
                        case '1':
                            e.preventDefault();
                            setNotation(1);
                            break;
                        case '2':
                            e.preventDefault();
                            setNotation(2);
                            break;
                        case '3':
                            e.preventDefault();
                            setNotation(3);
                            break;
                    }
                }
            });
            
            console.log('✅ Module Notation prêt !');
        }, 600);
    }
    
    // API publique
    return {
        init: init,
        toggleNotation: toggleNotation,
        setNotation: setNotation,
        getState: getState,
        getNoteNames: getNoteNames
    };
    
})();

// Exporter le module (mais ne pas l'initialiser automatiquement)
window.NOTATION_MODULE = NOTATION_MODULE;

// Initialisation automatique plus robuste
function initNotationModule() {
    if (window.NOTATION_MODULE && !window.NOTATION_MODULE.initialized) {
        console.log('🎵 Initialisation automatique du module NOTATION...');
        window.NOTATION_MODULE.init();
        window.NOTATION_MODULE.initialized = true;
    }
}

// Initialisation au chargement du DOM
window.addEventListener('DOMContentLoaded', () => {
    setTimeout(initNotationModule, 100);
});

// Initialisation au chargement complet de la page
window.addEventListener('load', () => {
    setTimeout(initNotationModule, 500);
});

// Initialisation immédiate si le DOM est déjà chargé
if (document.readyState === 'loading') {
    // Le DOM est encore en cours de chargement
} else {
    // Le DOM est déjà chargé
    setTimeout(initNotationModule, 100);
}
</script>


================================================================================
FICHIER: piano-soloB/includes/piano-recorder.php
================================================================================
<!-- /includes/piano-recorder.php -->
<!-- Module Enregistreur compatible avec Harmonium - VERSION CORRIGÉE -->

<style>
/* Contrôles d'enregistrement */
.recorder-controls {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border: 1px solid #ffeaa7;
    border-radius: 12px;
    padding: 2px;
    margin-bottom: 2px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.recorder-header {
    text-align: center;
    color: #856404;
    margin-bottom: 15px;
    font-size: 18px;
    font-weight: 600;
}

.recorder-buttons {
    display: flex;
    gap: 10px;
    justify-content: center;
    align-items: center;
    margin-bottom: 10px;
    flex-wrap: wrap;
}

/* Stats intégrées sur la même ligne */
.recorder-stats-inline {
    display: flex;
    gap: 15px;
    margin-left: 20px;
    align-items: center;
}

.recorder-btn {
    padding: 10px 18px;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 6px;
}

.recorder-btn:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.recorder-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.btn-record {
    background: #dc3545;
    color: white;
}

.btn-record.recording {
    background: #8b0000;
    animation: recordPulse 1s ease-in-out infinite;
}

@keyframes recordPulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

.btn-stop {
    background: #6c757d;
    color: white;
}

.btn-play {
    background: #28a745;
    color: white;
}

.btn-play.playing {
    background: #1e7e34;
}

.btn-save {
    background: #007bff;
    color: white;
}

.btn-export {
    background: #17a2b8;
    color: white;
}

/* Informations d'enregistrement */
.recorder-info {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-bottom: 15px;
    font-size: 14px;
    color: #495057;
}

.recorder-stat {
    display: flex;
    align-items: center;
    gap: 5px;
}

.recorder-stat-value {
    font-weight: 600;
    color: #212529;
}

/* Liste des enregistrements */
.recordings-list {
    max-height: 300px;
    overflow-y: auto;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    background: white;
}

.recording-item {
    padding: 12px 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #f0f0f0;
    transition: background 0.2s ease;
}

.recording-item:hover {
    background: #e9ecef;
}

.recording-info {
    flex: 1;
}

.recording-name {
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 3px;
}

.recording-meta {
    font-size: 12px;
    color: #6c757d;
}

.recording-actions {
    display: flex;
    gap: 5px;
}

.btn-sm {
    padding: 5px 10px;
    font-size: 12px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-sm:hover {
    transform: translateY(-1px);
}

.btn-play-sm {
    background: #28a745;
    color: white;
}

.btn-upload-sm {
    background: #17a2b8;
    color: white;
}

.btn-download-sm {
    background: #007bff;
    color: white;
}

.btn-delete-sm {
    background: #dc3545;
    color: white;
}

/* Compteur de temps */
.time-counter {
    font-family: 'Courier New', monospace;
    font-size: 20px;
    color: #dc3545;
    text-align: center;
    margin: 10px 0;
    font-weight: bold;
}

.empty-state {
    text-align: center;
    padding: 40px;
    color: #6c757d;
    font-style: italic;
}

@media (max-width: 768px) {
    .recorder-info {
        flex-direction: column;
        gap: 10px;
    }
}
</style>

<div class="recorder-controls">
     

    
    <div class="recorder-buttons">
        <div class="time-counter" id="timeCounter">00:00</div>
        
        <!-- Boutons d'enregistrement -->
        <button class="recorder-btn btn-record" id="recordBtn" onclick="window.RECORDER_MODULE.toggleRecord()" title="Enregistrer">
            🔴 Enregistrer
        </button>
        
        <button class="recorder-btn btn-stop" id="stopBtn" onclick="window.RECORDER_MODULE.stop()" title="Arrêter" disabled>
            ⏹️ Arrêter
        </button>
        
        <button class="recorder-btn btn-play" id="playBtn" onclick="window.RECORDER_MODULE.togglePlay()" title="Écouter" disabled>
            ▶ Écouter
        </button>
        
        <button class="recorder-btn btn-save" id="saveBtn" onclick="window.RECORDER_MODULE.saveRecording()" title="Sauvegarder" disabled>
            💾 Sauvegarder
        </button>
        
        <!-- Stats intégrées sur la même ligne -->
        <div class="recorder-stats-inline">
            <span class="recorder-stat">
                <span>Notes:</span>
                <span class="recorder-stat-value" id="noteCount">0</span>
            </span>
            <span class="recorder-stat">
                <span>Durée:</span>
                <span class="recorder-stat-value" id="duration">0s</span>
            </span>
        </div>
    </div>
    
    <!-- Le tableau temporaire a été supprimé - les enregistrements vont directement dans le brouillon -->
</div>

<script>
// Module d'enregistrement - VERSION CORRIGÉE pour compatibilité Harmonium
const RECORDER_MODULE = (function() {
    'use strict';
    
         // État
     const state = {
         isRecording: false,
         isPlaying: false,
         startTime: null,
         currentRecording: null,
         playbackTimeouts: [],
         recordingTimer: null,
         noteTimestamps: new Map(),
         originalFunctions: {
             playNote: null,
             stopNote: null
         }
     };
    
    // Configuration
    const config = {
        maxRecordingTime: 300000, // 5 minutes max
        defaultTimeSignature: '4/4'
    };
    
    // Créer un nouvel enregistrement
    function createNewRecording() {
        return {
            name: '',
            timeSignature: config.defaultTimeSignature,
            notes: [],
            duration: 0,
            recordedAt: new Date().toISOString(),
            noteCount: 0,
            metadata: {
                version: '1.0',
                format: 'enriched_json',
                harmonium: window.HARMONIUM_MODULE && window.HARMONIUM_MODULE.isLoaded()
            }
        };
    }
    
    // Intercepter les événements de notes - VERSION CORRIGÉE
    function interceptNoteEvents() {
        console.log('🎙️ Interception des événements de notes...');
        
        // Attendre un peu pour que l'harmonium soit chargé
        setTimeout(() => {
            // Sauvegarder les fonctions actuelles (qui peuvent être celles de l'harmonium)
            if (!state.originalFunctions.playNote) {
                state.originalFunctions.playNote = window.playNote;
                state.originalFunctions.stopNote = window.stopNote;
            }
            
            // Créer nos wrappers
            window.playNote = function(noteId, keyElement) {
                // Appeler la fonction originale (harmonium ou core)
                if (state.originalFunctions.playNote) {
                    state.originalFunctions.playNote(noteId, keyElement);
                }
                
                // Enregistrer si nécessaire
                if (state.isRecording && state.startTime) {
                    const timestamp = Date.now() - state.startTime;
                    state.currentRecording.notes.push({
                        note: noteId,
                        time: timestamp,
                        type: 'on',
                        velocity: 80
                    });
                    state.noteTimestamps.set(noteId, timestamp);
                    updateStats();
                    console.log(`📝 Note enregistrée: ${noteId} à ${timestamp}ms`);
                }
            };
            
            window.stopNote = function(noteId, keyElement) {
                // Appeler la fonction originale
                if (state.originalFunctions.stopNote) {
                    state.originalFunctions.stopNote(noteId, keyElement);
                }
                
                // Enregistrer si nécessaire
                if (state.isRecording && state.startTime) {
                    const timestamp = Date.now() - state.startTime;
                    state.currentRecording.notes.push({
                        note: noteId,
                        time: timestamp,
                        type: 'off',
                        velocity: 0
                    });
                    
                    if (state.noteTimestamps.has(noteId)) {
                        state.noteTimestamps.delete(noteId);
                    }
                }
            };
            
            console.log('✅ Fonctions interceptées avec succès');
        }, 1500); // Attendre 1.5s pour que l'harmonium soit chargé
    }
    

    
    // Basculer l'enregistrement
    function toggleRecord() {
        if (state.isRecording) {
            stopRecording();
        } else {
            startRecording();
        }
    }
    
    // Démarrer l'enregistrement
    function startRecording() {
        if (state.isPlaying) {
            stopPlayback();
        }
        
        state.isRecording = true;
        state.startTime = Date.now();
        state.currentRecording = createNewRecording();
        state.noteTimestamps.clear();
        
        // UI
        document.getElementById('recordBtn').classList.add('recording');
        document.getElementById('recordBtn').innerHTML = '⏺ En cours...';
        document.getElementById('stopBtn').disabled = false;
        document.getElementById('playBtn').disabled = true;
        document.getElementById('saveBtn').disabled = true;
        
        startTimer();
        
        console.log('🔴 Enregistrement démarré');
        
        // Notification si SAVE_UPLOAD_MODULE existe
        if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
            window.SAVE_UPLOAD_MODULE.showNotification('Enregistrement démarré', 'success');
        }
    }
    
    // Arrêter l'enregistrement
    function stopRecording() {
        state.isRecording = false;
        
        // Calculer les données finales
        if (state.currentRecording && state.currentRecording.notes.length > 0) {
            const lastNote = state.currentRecording.notes[state.currentRecording.notes.length - 1];
            state.currentRecording.duration = lastNote.time + 500;
            state.currentRecording.noteCount = state.currentRecording.notes.filter(n => n.type === 'on').length;
            
            console.log(`✅ Enregistrement terminé: ${state.currentRecording.noteCount} notes`);
        }
        
        // UI
        document.getElementById('recordBtn').classList.remove('recording');
        document.getElementById('recordBtn').innerHTML = '⏺ Enregistrer';
        document.getElementById('stopBtn').disabled = true;
        
        stopTimer();
        
        if (state.currentRecording && state.currentRecording.notes.length > 0) {
            document.getElementById('playBtn').disabled = false;
            document.getElementById('saveBtn').disabled = false;
            
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification(`Enregistrement terminé: ${state.currentRecording.noteCount} notes`, 'success');
            }
        } else {
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification('Aucune note enregistrée', 'error');
            }
        }
        
        updateStats();
    }
    
    // Arrêter tout
    function stop() {
        if (state.isRecording) {
            stopRecording();
        }
        if (state.isPlaying) {
            stopPlayback();
        }
    }
    
    // Basculer la lecture
    function togglePlay() {
        if (state.isPlaying) {
            stopPlayback();
        } else {
            playRecording(state.currentRecording);
        }
    }
    
    // Jouer un enregistrement
    function playRecording(recording, button = null) {
        if (!recording || !recording.notes || recording.notes.length === 0) return;
        
        if (state.isRecording) {
            stopRecording();
        }
        
        state.isPlaying = true;
        
        // UI
        const playBtn = button || document.getElementById('playBtn');
        playBtn.classList.add('playing');
        playBtn.innerHTML = '⏸ Pause';
        
        console.log(`▶️ Lecture de ${recording.notes.length} événements`);
        
        // Jouer chaque note en utilisant les fonctions originales
        recording.notes.forEach(event => {
            const timeout = setTimeout(() => {
                const key = document.querySelector(`.key[data-note="${event.note}"]`);
                if (key) {
                    if (event.type === 'on') {
                        // Utiliser la fonction originale pour la lecture
                        if (state.originalFunctions.playNote) {
                            state.originalFunctions.playNote(event.note, key);
                        }
                    } else {
                        if (state.originalFunctions.stopNote) {
                            state.originalFunctions.stopNote(event.note, key);
                        }
                    }
                }
            }, event.time);
            
            state.playbackTimeouts.push(timeout);
        });
        
        // Arrêter à la fin
        const endTimeout = setTimeout(() => {
            stopPlayback();
        }, recording.duration);
        
        state.playbackTimeouts.push(endTimeout);
    }
    
    // Arrêter la lecture
    function stopPlayback() {
        console.log('🛑 Arrêt de la lecture...');
        state.isPlaying = false;
        state.currentDemoId = null; // Réinitialiser l'ID de la démo en cours
        
        // Annuler tous les timeouts
        state.playbackTimeouts.forEach(timeout => clearTimeout(timeout));
        state.playbackTimeouts = [];
        
        // Annuler tous les timeouts de lecture de démo
        if (window.currentPlaybackTimeouts) {
            window.currentPlaybackTimeouts.forEach(timeout => clearTimeout(timeout));
            window.currentPlaybackTimeouts = [];
        }
        
        // Arrêter tous les oscillateurs actifs
        if (window.activeOscillators) {
            window.activeOscillators.forEach(oscillator => {
                try {
                    oscillator.stop();
                } catch (e) {
                    // Ignorer les erreurs si l'oscillateur est déjà arrêté
                }
            });
            window.activeOscillators.clear();
        }
        
        // UI
        document.querySelectorAll('.btn-play, .btn-play-sm').forEach(btn => {
            btn.classList.remove('playing');
            if (btn.id === 'playBtn') {
                btn.innerHTML = '▶ Écouter';
            } else {
                btn.innerHTML = '▶';
            }
        });
        
        // Arrêter toutes les notes actives
        document.querySelectorAll('.key.active').forEach(key => {
            const noteId = key.dataset.note;
            if (state.originalFunctions.stopNote) {
                state.originalFunctions.stopNote(noteId, key);
            }
        });
        
        console.log('✅ Lecture arrêtée');
    }
    
    // Sauvegarder l'enregistrement directement dans le brouillon
    function saveRecording() {
        const name = prompt('Nom du brouillon:', `Brouillon ${new Date().toLocaleTimeString()}`);
        if (!name) return;
        
        // Préparer les données pour l'API
        const demoData = {
            name: name,
            category: 'brouillon',
            description: 'Enregistrement direct depuis le piano',
            recording: {
                notes: state.currentRecording.notes,
                durations: state.currentRecording.notes.map(note => note.time),
                timestamp: Date.now()
            },
            uploadedAt: new Date().toISOString()
        };
        
        // Sauvegarder directement via l'API
        fetch('demo-manager-api.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                action: 'saveNewDemo',
                demoData: demoData,
                originalName: name
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Brouillon "${name}" sauvegardé!`, 'success');
                }
                
                // Recharger la liste des brouillons
                setTimeout(() => {
                    if (window.DEMO_MANAGER && window.DEMO_MANAGER.loadTable) {
                        window.DEMO_MANAGER.loadTable('brouillon');
                    }
                }, 500);
            } else {
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification(`Erreur: ${data.message}`, 'error');
                }
            }
        })
        .catch(error => {
            console.error('Erreur lors de la sauvegarde:', error);
            if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                window.SAVE_UPLOAD_MODULE.showNotification('Erreur lors de la sauvegarde', 'error');
            }
        });
        
        // Réinitialiser
        state.currentRecording = null;
        document.getElementById('playBtn').disabled = true;
        document.getElementById('saveBtn').disabled = true;
        updateStats();
    }
    
    // Timer
    function startTimer() {
        const timerEl = document.getElementById('timeCounter');
        const startTime = Date.now();
        
        state.recordingTimer = setInterval(() => {
            const elapsed = Date.now() - startTime;
            const minutes = Math.floor(elapsed / 60000);
            const seconds = Math.floor((elapsed % 60000) / 1000);
            timerEl.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            if (elapsed >= config.maxRecordingTime) {
                stopRecording();
                if (window.SAVE_UPLOAD_MODULE && window.SAVE_UPLOAD_MODULE.showNotification) {
                    window.SAVE_UPLOAD_MODULE.showNotification('Durée maximale atteinte (5 min)', 'error');
                }
            }
        }, 100);
    }
    
    function stopTimer() {
        clearInterval(state.recordingTimer);
        document.getElementById('timeCounter').textContent = '00:00';
    }
    
    // Mettre à jour les statistiques
    function updateStats() {
        if (state.currentRecording) {
            document.getElementById('noteCount').textContent = state.currentRecording.noteCount || 0;
            document.getElementById('duration').textContent = Math.ceil((state.currentRecording.duration || 0) / 1000) + 's';
        } else {
            document.getElementById('noteCount').textContent = '0';
            document.getElementById('duration').textContent = '0s';
        }
    }
    
    // Fonction supprimée - les enregistrements vont directement dans le brouillon
    
    // Fonctions supprimées - les enregistrements vont directement dans le brouillon
    
         // Fonctions supprimées - les enregistrements vont directement dans le brouillon
    
    // Initialisation
    function init() {
        console.log('🎵 Initialisation du module Enregistreur...');
        
        interceptNoteEvents();
        
        // Raccourcis clavier
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space' && !e.target.matches('input, textarea')) {
                e.preventDefault();
                if (state.isRecording) {
                    stopRecording();
                } else if (state.isPlaying) {
                    stopPlayback();
                } else {
                    toggleRecord();
                }
            }
        });
        
        console.log('✅ Module Enregistreur prêt !');
    }
    
         // API publique
     return {
         init: init,
         toggleRecord: toggleRecord,
         stop: stop,
         togglePlay: togglePlay,
         saveRecording: saveRecording,
         playRecording: function(recordingData = null, buttonElement = null) {
             if (recordingData && recordingData.notes) {
                 // Lecture directe des données de démo (depuis piano-demo-manager.php)
                 console.log('🎵 Lecture directe des données de démo:', recordingData);
                 
                 // Si on clique sur le même bouton qui est déjà en lecture, on arrête
                 if (state.isPlaying && state.currentDemoId === 'direct-playback') {
                     console.log('🛑 Arrêt de la lecture en cours...');
                     stopPlayback();
                     return false;
                 }
                 
                 // Arrêter toute lecture en cours
                 if (state.isPlaying) {
                     stopPlayback();
                 }
                 
                 // Marquer cette démo comme en cours de lecture
                 state.currentDemoId = 'direct-playback';
                 
                 // Jouer directement les notes
                 this.playRecordingNotes(recordingData.notes);
                 return true;
             } else if (recordingData) {
                 // Lecture d'une démo spécifique (ancienne méthode)
                 console.log('🎵 Lecture de démo spécifique:', recordingData);
                 const demoId = recordingData.id || recordingData.filename || 'demo';
                 const library = recordingData.library || 'brouillon';
                 return this.playDemo(demoId, library);
             } else {
                 // Lecture de l'enregistrement actuel
                 return togglePlay();
             }
         },
         stopPlayback: stopPlayback, // Fonction pour arrêter la lecture
         playDemo: function(demoId, library) {
             console.log(`🎵 Lecture de démo: ${demoId} (${library})`);
             
             // Si on clique sur le même bouton qui est déjà en lecture, on arrête
             if (state.isPlaying && state.currentDemoId === demoId) {
                 console.log('🛑 Arrêt de la lecture en cours...');
                 stopPlayback();
                 return false;
             }
             
             // Arrêter toute lecture en cours
             if (state.isPlaying) {
                 stopPlayback();
             }
             
             // Construire le bon nom de fichier
             let demoFile = '';
             if (library === 'brouillon') {
                 // Pour brouillon, utiliser le demoId qui contient le nom du fichier
                 demoFile = `demospubliques/brouillon/${demoId}`;
             } else {
                 demoFile = `demospubliques/${library}/${demoId}`;
             }
             
             console.log(`📁 Chargement de: ${demoFile}`);
             
             fetch(demoFile)
                 .then(response => {
                     if (!response.ok) {
                         throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                     }
                     return response.json();
                 })
                 .then(data => {
                     console.log('📄 Données de démo chargées:', data);
                     
                     if (data && data.data && data.data.recording && data.data.recording.notes) {
                         console.log('🎵 Démarrage de la lecture audio...');
                         // Marquer cette démo comme en cours de lecture
                         state.currentDemoId = demoId;
                         this.playRecordingNotes(data.data.recording.notes);
                     } else {
                         console.error('Format de démo invalide:', data);
                     }
                 })
                 .catch(error => {
                     console.error('Erreur lors du chargement de la démo:', error);
                 });
             
             return true;
         },
         
         playRecordingNotes: function(notes) {
             if (!notes || notes.length === 0) {
                 console.log('Aucune note à jouer');
                 return;
             }
             
             console.log(`🎵 Lecture de ${notes.length} notes...`);
             
             // Arrêter toute lecture en cours
             if (state.isPlaying) {
                 stopPlayback();
             }
             
             state.isPlaying = true;
             state.isPaused = false;
             state.currentNotes = notes;
             state.currentTime = 0;
             
             // Mettre à jour l'UI
             document.querySelectorAll('.btn-play, .btn-play-sm').forEach(btn => {
                 btn.classList.add('playing');
                 if (btn.id === 'playBtn') {
                     btn.innerHTML = '⏸️ Écouter';
                 } else {
                     btn.innerHTML = '⏸️';
                 }
             });
             
             // Ajouter les contrôles de pause si ils n'existent pas
             this.addPauseControls();
             
             // Initialiser l'audio si nécessaire
             if (!audioContext) {
                 initAudio();
             }
             
             // Créer un oscillateur pour chaque note
             window.activeOscillators = new Map();
             
             // Stocker tous les timeouts pour pouvoir les annuler
             window.currentPlaybackTimeouts = [];
             
             // Jouer chaque note selon son timing
             notes.forEach(note => {
                 const delay = note.time;
                 
                 const timeoutId = setTimeout(() => {
                     // Vérifier si la lecture est toujours active ET pas en pause
                     if (!state.isPlaying || state.isPaused) {
                         return;
                     }
                     
                     // Mettre à jour le temps actuel
                     state.currentTime = note.time;
                     
                     // Mettre à jour le slider de timeline
                     if (window.currentPlaybackTimeouts && window.currentPlaybackTimeouts.length > 0) {
                         const totalDuration = state.currentNotes[state.currentNotes.length - 1].time;
                         const percentage = (note.time / totalDuration) * 100;
                         const slider = document.getElementById('unifiedTimelineSlider');
                         if (slider) {
                             slider.value = percentage;
                         }
                         
                         // Mettre à jour l'affichage du temps
                         const minutes = Math.floor(note.time / 60000);
                         const seconds = Math.floor((note.time % 60000) / 1000);
                         const totalMinutes = Math.floor(totalDuration / 60000);
                         const totalSeconds = Math.floor((totalDuration % 60000) / 1000);
                         
                         const timeDisplay = document.getElementById('unifiedTimeDisplay');
                         if (timeDisplay) {
                             timeDisplay.textContent = 
                                 `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} / ${totalMinutes.toString().padStart(2, '0')}:${totalSeconds.toString().padStart(2, '0')}`;
                         }
                     }
                     
                     if (note.type === 'on') {
                         // Jouer la note avec Web Audio API
                         console.log(`🎵 Jouer note: ${note.note}`);
                         
                         // Convertir la note en fréquence
                         const frequency = this.noteToFrequency(note.note);
                         if (frequency) {
                             const oscillator = audioContext.createOscillator();
                             const gainNode = audioContext.createGain();
                             
                             oscillator.connect(gainNode);
                             gainNode.connect(audioContext.destination);
                             
                             oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
                             oscillator.type = 'sine';
                             
                             gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                             gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
                             
                             oscillator.start(audioContext.currentTime);
                             oscillator.stop(audioContext.currentTime + 0.5);
                             
                             window.activeOscillators.set(note.note, oscillator);
                         }
                         
                         // Essayer aussi la méthode originale
                         if (state.originalFunctions.playNote) {
                             const keyElement = document.querySelector(`[data-note="${note.note}"]`);
                             if (keyElement) {
                                 state.originalFunctions.playNote(note.note, keyElement);
                             }
                         }
                         
                     } else if (note.type === 'off') {
                         // Arrêter la note
                         console.log(`🔇 Arrêter note: ${note.note}`);
                         
                         const oscillator = window.activeOscillators.get(note.note);
                         if (oscillator) {
                             oscillator.stop();
                             window.activeOscillators.delete(note.note);
                         }
                         
                         if (state.originalFunctions.stopNote) {
                             const keyElement = document.querySelector(`[data-note="${note.note}"]`);
                             if (keyElement) {
                                 state.originalFunctions.stopNote(note.note, keyElement);
                             }
                         }
                     }
                 }, delay);
                 
                 window.currentPlaybackTimeouts.push(timeoutId);
             });
             
             // Arrêter la lecture après la dernière note
             const lastNote = notes[notes.length - 1];
             const totalDuration = lastNote.time + 1000; // +1 seconde après la dernière note
             
             const endTimeoutId = setTimeout(() => {
                 if (state.isPlaying) {
                     stopPlayback();
                 }
             }, totalDuration);
             
             window.currentPlaybackTimeouts.push(endTimeoutId);
         },
         
         noteToFrequency: function(note) {
             const noteFrequencies = {
                 'C3': 130.81, 'C#3': 138.59, 'D3': 146.83, 'D#3': 155.56,
                 'E3': 164.81, 'F3': 174.61, 'F#3': 185.00, 'G3': 196.00,
                 'G#3': 207.65, 'A3': 220.00, 'A#3': 233.08, 'B3': 246.94,
                 'C4': 261.63, 'C#4': 277.18, 'D4': 293.66, 'D#4': 311.13,
                 'E4': 329.63, 'F4': 349.23, 'F#4': 369.99, 'G4': 392.00,
                 'G#4': 415.30, 'A4': 440.00, 'A#4': 466.16, 'B4': 493.88,
                 'C5': 523.25, 'C#5': 554.37, 'D5': 587.33, 'D#5': 622.25,
                 'E5': 659.25, 'F5': 698.46, 'F#5': 739.99, 'G5': 783.99,
                 'G#5': 830.61, 'A5': 880.00, 'A#5': 932.33, 'B5': 987.77,
                 'C6': 1046.50
             };
             
             return noteFrequencies[note] || null;
         },
         
         addPauseControls: function() {
             // Utiliser la nouvelle barre de contrôle unifiée
             const unifiedControls = document.getElementById('unifiedControls');
             if (unifiedControls) {
                 unifiedControls.style.display = 'flex';
                 
                 // Événements des boutons unifiés
                 document.getElementById('unifiedPauseBtn').onclick = () => this.pausePlayback();
                 document.getElementById('unifiedResumeBtn').onclick = () => this.resumePlayback();
                 document.getElementById('unifiedStopBtn').onclick = () => stopPlayback();
                 
                 // Timeline slider unifié
                 document.getElementById('unifiedTimelineSlider').oninput = (e) => {
                     this.seekToTime(parseInt(e.target.value));
                 };
             }
         },
         
         pausePlayback: function() {
             if (state.isPlaying && !state.isPaused) {
                 state.isPaused = true;
                 console.log('⏸️ Lecture en pause');
                 
                 // Mettre à jour l'UI unifiée - BOUTON SANS TEXTE
                 const pauseBtn = document.getElementById('unifiedPauseBtn');
                 if (pauseBtn) {
                     // JAMAIS de texte dans ce bouton
                     pauseBtn.textContent = '';
                     pauseBtn.innerHTML = '';
                     // Garder la couleur jaune et la taille originale
                     pauseBtn.style.background = '#ffc107 !important';
                     pauseBtn.style.color = '#000 !important';
                     pauseBtn.style.fontSize = '13px !important';
                     pauseBtn.style.padding = '8px 12px !important';
                     pauseBtn.style.width = '30px !important';
                     pauseBtn.style.minWidth = '30px !important';
                     pauseBtn.style.height = '30px !important';
                     pauseBtn.style.minHeight = '30px !important';
                 }
                 
                 // Afficher les notes actives à ce moment
                 this.showActiveNotesAtTime(state.currentTime);
             }
         },
         
         resumePlayback: function() {
             if (state.isPlaying && state.isPaused) {
                 state.isPaused = false;
                 console.log('▶️ Reprise de la lecture');
                 
                 // Mettre à jour l'UI unifiée - BOUTON SANS TEXTE
                 const pauseBtn = document.getElementById('unifiedPauseBtn');
                 if (pauseBtn) {
                     // JAMAIS de texte dans ce bouton
                     pauseBtn.textContent = '';
                     pauseBtn.innerHTML = '';
                     // Remettre la couleur jaune et garder la taille originale
                     pauseBtn.style.background = '#ffc107 !important';
                     pauseBtn.style.color = '#000 !important';
                     pauseBtn.style.fontSize = '13px !important';
                     pauseBtn.style.padding = '8px 12px !important';
                     pauseBtn.style.width = '30px !important';
                     pauseBtn.style.minWidth = '30px !important';
                     pauseBtn.style.height = '30px !important';
                     pauseBtn.style.minHeight = '30px !important';
                 }
                 
                 // Continuer la lecture depuis le temps actuel
                 this.continuePlaybackFromTime(state.currentTime);
             }
         },
         
         showActiveNotesAtTime: function(time) {
             // Trouver toutes les notes actives à ce moment précis
             const activeNotes = [];
             
             state.currentNotes.forEach(note => {
                 if (note.type === 'on' && note.time <= time) {
                     // Vérifier si la note n'a pas été arrêtée avant ce temps
                     const noteOff = state.currentNotes.find(n => 
                         n.type === 'off' && n.note === note.note && n.time > note.time && n.time <= time
                     );
                     
                     if (!noteOff) {
                         activeNotes.push(note.note);
                     }
                 }
             });
             
             console.log(`🎵 Notes actives à ${time}ms:`, activeNotes);
             
             // Afficher visuellement les notes actives
             this.highlightActiveNotes(activeNotes);
         },
         
         highlightActiveNotes: function(activeNotes) {
             // Supprimer tous les highlights précédents
             document.querySelectorAll('.key.active-pause').forEach(key => {
                 key.classList.remove('active-pause');
             });
             
             // Ajouter le highlight aux notes actives
             activeNotes.forEach(noteName => {
                 const keyElement = document.querySelector(`[data-note="${noteName}"]`);
                 if (keyElement) {
                     keyElement.classList.add('active-pause');
                     keyElement.style.backgroundColor = '#ffeb3b';
                     keyElement.style.boxShadow = '0 0 10px #ffeb3b';
                 }
             });
         },
         
         seekToTime: function(percentage) {
             if (!state.currentNotes || state.currentNotes.length === 0) return;
             
             const totalDuration = state.currentNotes[state.currentNotes.length - 1].time;
             const targetTime = (percentage / 100) * totalDuration;
             
             state.currentTime = targetTime;
             
             // Mettre à jour l'affichage du temps
             const minutes = Math.floor(targetTime / 60000);
             const seconds = Math.floor((targetTime % 60000) / 1000);
             const totalMinutes = Math.floor(totalDuration / 60000);
             const totalSeconds = Math.floor((totalDuration % 60000) / 1000);
             
             const timeDisplay = document.getElementById('unifiedTimeDisplay');
             if (timeDisplay) {
                 timeDisplay.textContent = 
                     `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} / ${totalMinutes.toString().padStart(2, '0')}:${totalSeconds.toString().padStart(2, '0')}`;
             }
             
             // Afficher les notes actives à ce moment
             this.showActiveNotesAtTime(targetTime);
         },
         
         continuePlaybackFromTime: function(startTime) {
             if (!state.currentNotes || state.currentNotes.length === 0) return;
             
             console.log(`▶️ Reprise de la lecture depuis ${startTime}ms`);
             
             // Trouver les notes qui doivent être jouées après ce temps
             const remainingNotes = state.currentNotes.filter(note => note.time > startTime);
             
             // Annuler tous les timeouts existants
             if (window.currentPlaybackTimeouts) {
                 window.currentPlaybackTimeouts.forEach(timeout => clearTimeout(timeout));
                 window.currentPlaybackTimeouts = [];
             }
             
             // Créer de nouveaux timeouts pour les notes restantes
             remainingNotes.forEach(note => {
                 const delay = note.time - startTime;
                 
                 const timeoutId = setTimeout(() => {
                     // Vérifier si la lecture est toujours active ET pas en pause
                     if (!state.isPlaying || state.isPaused) {
                         return;
                     }
                     
                     // Mettre à jour le temps actuel
                     state.currentTime = note.time;
                     
                     // Mettre à jour le slider de timeline
                     const totalDuration = state.currentNotes[state.currentNotes.length - 1].time;
                     const percentage = (note.time / totalDuration) * 100;
                     const slider = document.getElementById('unifiedTimelineSlider');
                     if (slider) {
                         slider.value = percentage;
                     }
                     
                     // Mettre à jour l'affichage du temps
                     const minutes = Math.floor(note.time / 60000);
                     const seconds = Math.floor((note.time % 60000) / 1000);
                     const totalMinutes = Math.floor(totalDuration / 60000);
                     const totalSeconds = Math.floor((totalDuration % 60000) / 1000);
                     
                     const timeDisplay = document.getElementById('unifiedTimeDisplay');
                     if (timeDisplay) {
                         timeDisplay.textContent = 
                             `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')} / ${totalMinutes.toString().padStart(2, '0')}:${totalSeconds.toString().padStart(2, '0')}`;
                     }
                     
                     if (note.type === 'on') {
                         console.log(`🎵 Jouer note: ${note.note}`);
                         
                         const frequency = this.noteToFrequency(note.note);
                         if (frequency) {
                             const oscillator = audioContext.createOscillator();
                             const gainNode = audioContext.createGain();
                             
                             oscillator.connect(gainNode);
                             gainNode.connect(audioContext.destination);
                             
                             oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
                             oscillator.type = 'sine';
                             
                             gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                             gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
                             
                             oscillator.start(audioContext.currentTime);
                             oscillator.stop(audioContext.currentTime + 0.5);
                             
                             window.activeOscillators.set(note.note, oscillator);
                         }
                         
                         if (state.originalFunctions.playNote) {
                             const keyElement = document.querySelector(`[data-note="${note.note}"]`);
                             if (keyElement) {
                                 state.originalFunctions.playNote(note.note, keyElement);
                             }
                         }
                         
                     } else if (note.type === 'off') {
                         console.log(`🔇 Arrêter note: ${note.note}`);
                         
                         const oscillator = window.activeOscillators.get(note.note);
                         if (oscillator) {
                             oscillator.stop();
                             window.activeOscillators.delete(note.note);
                         }
                         
                         if (state.originalFunctions.stopNote) {
                             const keyElement = document.querySelector(`[data-note="${note.note}"]`);
                             if (keyElement) {
                                 state.originalFunctions.stopNote(note.note, keyElement);
                             }
                         }
                     }
                 }, delay);
                 
                 window.currentPlaybackTimeouts.push(timeoutId);
             });
             
             // Ajouter le timeout de fin
             const lastNote = state.currentNotes[state.currentNotes.length - 1];
             const totalDuration = lastNote.time + 1000;
             const endDelay = totalDuration - startTime;
             
             const endTimeoutId = setTimeout(() => {
                 if (state.isPlaying) {
                     stopPlayback();
                 }
             }, endDelay);
             
             window.currentPlaybackTimeouts.push(endTimeoutId);
         },
         getState: () => ({
             isRecording: state.isRecording,
             isPlaying: state.isPlaying,
             hasCurrentRecording: state.currentRecording !== null
         })
     };
})();

// Assigner le module à window pour qu'il soit accessible globalement
window.RECORDER_MODULE = RECORDER_MODULE;

// Initialiser après que tout soit chargé
window.addEventListener('DOMContentLoaded', () => {
    // Attendre plus longtemps pour que l'harmonium soit chargé
    setTimeout(() => {
        RECORDER_MODULE.init();
    }, 2000); // 2 secondes pour être sûr
});
</script>


================================================================================
FICHIER: piano-soloB/includes/piano-save-upload.php
================================================================================
<!-- /includes/piano-save-upload.php -->
<!-- Module Save/Upload SÉCURISÉ - Suppression de l'upload direct vers les bibliothèques publiques -->
<!-- Tous les enregistrements vont maintenant dans "brouillon" par défaut -->
<!-- Gestion uniquement via le tableau admin "🎵 Bibliothèques de démos" -->

<style>
/* Notifications */
.save-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background: white;
    padding: 15px 25px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    opacity: 0;
    transform: translateY(-20px);
    transition: all 0.3s ease;
    z-index: 1000;
    display: flex;
    align-items: center;
    gap: 10px;
}

.save-notification.show {
    opacity: 1;
    transform: translateY(0);
}

.save-notification.success {
    border-left: 4px solid #28a745;
}

.save-notification.error {
    border-left: 4px solid #dc3545;
}

.save-notification.info {
    border-left: 4px solid #17a2b8;
}

/* Liste des démos */
.demos-panel {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 2px;
    margin-top: 2px;
}

.demos-panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.demos-panel-title {
    font-size: 18px;
    font-weight: 600;
    color: #2c3e50;
}

.btn-refresh {
    background: #17a2b8;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
}

.demos-grid {
    display: grid;
    gap: 10px;
    max-height: 400px;
    overflow-y: auto;
}

.demo-card {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.demo-card:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.demo-info h4 {
    margin: 0 0 5px 0;
    color: #2c3e50;
    font-size: 16px;
}

.demo-meta {
    font-size: 12px;
    color: #6c757d;
}

.demo-actions {
    display: flex;
    gap: 5px;
}

.btn-demo {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-demo-play {
    background: #28a745;
    color: white;
}

.btn-demo-download {
    background: #007bff;
    color: white;
}

.btn-demo-delete {
    background: #dc3545;
    color: white;
}

.btn-demo:hover {
    transform: scale(1.05);
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

.empty-demos {
    text-align: center;
    padding: 40px;
    color: #6c757d;
}

/* Onglets des catégories */
.demos-tabs {
    display: flex;
    gap: 2px;
    margin-bottom: 15px;
    background: #e9ecef;
    border-radius: 8px;
    padding: 3px;
}

.tab-btn {
    flex: 1;
    padding: 10px 15px;
    border: none;
    background: transparent;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    color: #6c757d;
}

.tab-btn:hover {
    background: rgba(255, 255, 255, 0.7);
}

.tab-btn.active {
    background: white;
    color: #2c3e50;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Compteur de démos par catégorie */
.tab-btn .count {
    background: #007bff;
    color: white;
    border-radius: 10px;
    padding: 2px 6px;
    font-size: 11px;
    margin-left: 5px;
}
</style>

<!-- Ancien tableau supprimé - Remplacé par le nouveau Gestionnaire de Brouillons -->

<script>
// Module Save/Upload SÉCURISÉ
const SAVE_UPLOAD_MODULE = (function() {
    'use strict';
    
    const config = {
        demosEndpoint: 'demospubliques/demos.json',
        demos: [],
        currentCategory: 'prayers',
        initialized: false
    };
    
    // Afficher une notification
    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `save-notification ${type}`;
        
        const icon = type === 'success' ? '✅' : type === 'error' ? '❌' : 'ℹ️';
        notification.innerHTML = `<span>${icon}</span><span>${message}</span>`;
        
        document.body.appendChild(notification);
        
        requestAnimationFrame(() => {
            notification.classList.add('show');
        });
        
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
    
    // Sauvegarder un enregistrement (NOUVEAU SYSTÈME SÉCURISÉ)
    function save(recording) {
        if (!recording) {
            showNotification('Aucun enregistrement à sauvegarder', 'error');
            return;
        }
        
        // Enregistrement direct dans "brouillon" via la nouvelle API
        saveToBrouillon(recording);
    }
    
    // Sauvegarder dans "brouillon" (NOUVEAU SYSTÈME SÉCURISÉ)
    async function saveToBrouillon(recording) {
        try {
            // Demander le nom de la démo
            const demoName = prompt('Nom de la démo :', recording.name || 'Ma mélodie');
            if (!demoName) {
                showNotification('Enregistrement annulé', 'info');
                return;
            }
            
            // Utiliser la nouvelle API "brouillon"
            const response = await fetch('demo-manager-api.php', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'saveNewDemo',
                    demoData: {
                        name: demoName,
                        category: 'brouillon', // TOUJOURS "brouillon" par défaut
                        description: '',
                        recording: recording,
                        uploadedAt: new Date().toISOString(),
                        noteCount: recording.notes ? recording.notes.length : 0,
                        duration: recording.duration || 0
                    },
                    originalName: demoName,
                    library: 'brouillon' // Force l'enregistrement dans "brouillon"
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    showNotification('✅ Démo enregistrée dans "Brouillon" !', 'success');
                    
                    // Rafraîchir l'interface du gestionnaire si elle existe
                    if (window.DEMO_MANAGER) {
                        window.DEMO_MANAGER.loadDemosBrouillon();
                    }
                    
                    // Déclencher un événement pour rafraîchir les menus
                    window.dispatchEvent(new CustomEvent('demosUpdated'));
                } else {
                    throw new Error(result.message || 'Erreur lors de l\'enregistrement');
                }
            } else {
                throw new Error('Erreur serveur');
            }
        } catch (error) {
            console.error('Erreur enregistrement:', error);
            showNotification('❌ Erreur lors de l\'enregistrement', 'error');
        }
    }
    
    // Charger les démos publiques
    async function loadDemos() {
        try {
            const response = await fetch(config.demosEndpoint + '?t=' + Date.now());
            if (response.ok) {
                config.demos = await response.json();
                updateDemosGrid();
                updateTabCounts();
            } else {
                // Si le fichier n'existe pas, créer un tableau vide
                config.demos = [];
                updateDemosGrid();
                updateTabCounts();
            }
        } catch (error) {
            console.log('Pas de démos publiques pour le moment');
            config.demos = [];
            updateDemosGrid();
            updateTabCounts();
        }
    }
    
    // Changer d'onglet
    function switchTab(category) {
        config.currentCategory = category;
        
        // Mettre à jour les boutons
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-category="${category}"]`).classList.add('active');
        
        // Mettre à jour l'affichage
        updateDemosGrid();
        updateTabCounts();
    }
    
    // Mettre à jour les compteurs des onglets
    function updateTabCounts() {
        const categories = ['prayers', 'bhajans', 'brouillon']; // "test" devient "brouillon"
        
        categories.forEach(category => {
            const count = config.demos.filter(demo => demo.category === category).length;
            const btn = document.querySelector(`[data-category="${category}"]`);
            if (btn) {
                let countSpan = btn.querySelector('.count');
                if (!countSpan) {
                    countSpan = document.createElement('span');
                    countSpan.className = 'count';
                    btn.appendChild(countSpan);
                }
                countSpan.textContent = count;
            }
        });
    }
    
    // Mettre à jour la grille
    function updateDemosGrid() {
        const grid = document.getElementById('demosGrid');
        if (!grid) return;
        
        // Filtrer par catégorie actuelle
        const categoryDemos = config.demos.filter(demo => demo.category === config.currentCategory);
        
        if (categoryDemos.length === 0) {
            grid.innerHTML = `<div class="empty-demos">Aucune démo dans la catégorie "${config.currentCategory}"</div>`;
            return;
        }
        
        grid.innerHTML = categoryDemos.map(demo => `
            <div class="demo-card" data-demo-id="${demo.id || ''}" data-filename="${demo.filename}">
                <div class="demo-info">
                    <h4>${demo.name}</h4>
                    <div class="demo-meta">
                        ${demo.noteCount || 0} notes | ${Math.ceil((demo.duration || 0) / 1000)}s
                        ${demo.description ? `<br><small>${demo.description}</small>` : ''}
                    </div>
                </div>
                <div class="demo-actions">
                    <button class="btn-demo btn-demo-play" onclick="SAVE_UPLOAD_MODULE.playDemo('${demo.filename}')" title="Lecture">
                        ▶
                    </button>
                    <button class="btn-demo btn-demo-download" onclick="SAVE_UPLOAD_MODULE.downloadDemo('${demo.filename}')" title="Télécharger">
                        💾
                    </button>
                    <button class="btn-demo btn-demo-delete" onclick="SAVE_UPLOAD_MODULE.deleteDemo('${demo.filename}', '${demo.name}')" title="Supprimer">
                        🗑️
                    </button>
                </div>
            </div>
        `).join('');
    }
    
    // Jouer une démo
    async function playDemo(filename) {
        try {
            const response = await fetch(`demospubliques/${filename}`);
            if (response.ok) {
                const demo = await response.json();
                if (window.RECORDER_MODULE) {
                    RECORDER_MODULE.stop();
                }
                showNotification(`Lecture de "${demo.name}"`, 'info');
                playDemoRecording(demo);
            }
        } catch (error) {
            showNotification('Erreur lors de la lecture', 'error');
        }
    }
    
    // Jouer l'enregistrement d'une démo
    function playDemoRecording(demo) {
        const timeouts = [];
        
        demo.notes.forEach(event => {
            const timeout = setTimeout(() => {
                const key = document.querySelector(`.key[data-note="${event.note}"]`);
                if (key) {
                    if (event.type === 'on') {
                        window.playNote(event.note, key);
                    } else {
                        window.stopNote(event.note, key);
                    }
                }
            }, event.time);
            timeouts.push(timeout);
        });
        
        // Arrêt automatique
        setTimeout(() => {
            timeouts.forEach(t => clearTimeout(t));
            document.querySelectorAll('.key.active').forEach(key => {
                window.stopNote(key.dataset.note, key);
            });
        }, demo.duration + 500);
    }
    
    // Télécharger une démo
    function downloadDemo(filename) {
        const a = document.createElement('a');
        a.href = `demospubliques/${filename}`;
        a.download = filename;
        a.click();
    }
    
    // Supprimer une démo
    async function deleteDemo(filename, demoName) {
        if (!confirm(`Êtes-vous sûr de vouloir supprimer "${demoName}" ?`)) {
            return;
        }
        
        try {
            // Trouver la démo dans la liste pour obtenir son ID
            const demo = config.demos.find(d => d.filename === filename);
            if (!demo) {
                showNotification('Démo non trouvée', 'error');
                return;
            }
            
            // Utiliser la nouvelle API de suppression
            const formData = new FormData();
            formData.append('action', 'deleteDemo');
            formData.append('demoId', demo.id || filename); // Fallback sur filename si pas d'ID
            
            const response = await fetch('demo-manager-api.php', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    showNotification(`Démo "${demoName}" supprimée avec succès`, 'success');
                    // Recharger la liste des démos
                    loadDemos();
                } else {
                    showNotification(`Erreur: ${result.message}`, 'error');
                }
            } else {
                showNotification('Erreur lors de la suppression', 'error');
            }
        } catch (error) {
            console.error('Erreur suppression:', error);
            showNotification('Erreur lors de la suppression', 'error');
        }
    }
    
    // Initialisation
    function init() {
        if (config.initialized) return;
        
        console.log('💾 Initialisation du module Save/Upload SÉCURISÉ...');
        
        // Charger les démos (sans afficher d'erreur)
        loadDemos();
        
        // Event global pour les mises à jour
        window.addEventListener('demosUpdated', loadDemos);
        
        config.initialized = true;
        console.log('✅ Module Save/Upload SÉCURISÉ prêt !');
    }
    
    // API publique
    return {
        init: init,
        save: save,
        showNotification: showNotification,
        loadDemos: loadDemos,
        playDemo: playDemo,
        downloadDemo: downloadDemo,
        deleteDemo: deleteDemo,
        switchTab: switchTab
    };
})();

// Exposer globalement IMMÉDIATEMENT
window.SAVE_UPLOAD_MODULE = SAVE_UPLOAD_MODULE;

// Initialiser après un délai pour éviter les conflits
window.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        try {
            SAVE_UPLOAD_MODULE.init();
            console.log('✅ Module Save/Upload SÉCURISÉ initialisé');
        } catch (error) {
            console.error('Erreur init Save/Upload:', error);
        }
    }, 2500);
});
</script>


================================================================================
FICHIER: piano-soloB/includes/js/demos-loader.js
================================================================================
// includes/js/demos-loader.js
// Module pour charger les démos publiques dans les menus Prayers et Bhajans

const DEMOS_LOADER = (function() {
    'use strict';
    
    const config = {
        demosEndpoint: 'demospubliques/demos.json',
        demos: [],
        initialized: false
    };
    
    // Charger toutes les démos publiques
    async function loadAllDemos() {
        try {
            const response = await fetch(config.demosEndpoint + '?t=' + Date.now());
            if (response.ok) {
                config.demos = await response.json();
                console.log(`📚 ${config.demos.length} démos chargées`);
                return config.demos;
            } else {
                console.log('Aucune démo publique disponible');
                config.demos = [];
                return [];
            }
        } catch (error) {
            console.log('Erreur lors du chargement des démos:', error);
            config.demos = [];
            return [];
        }
    }
    
    // Obtenir les démos par catégorie
    function getDemosByCategory(category) {
        const filtered = config.demos.filter(demo => demo.category === category);
        console.log(`📚 Démos pour ${category}:`, filtered.length, filtered);
        return filtered;
    }
    
    // Créer le contenu HTML pour un menu de démos
    function createDemosMenuContent(category) {
        const demos = getDemosByCategory(category);
        
        if (demos.length === 0) {
            return `
                <div class="menu-section">
                    <div class="menu-item disabled">
                        <span>Aucune démo disponible</span>
                    </div>
                </div>
            `;
        }
        
        return `
            <div class="menu-section">
                ${demos.map(demo => `
                    <div class="menu-item demo-item" onclick="DEMOS_LOADER.playDemo('${demo.filename}')" title="Cliquer pour écouter immédiatement">
                        <div class="demo-item-info">
                            <div class="demo-title">${demo.name}</div>
                            <div class="demo-meta">${demo.noteCount} notes | ${Math.ceil(demo.duration / 1000)}s</div>
                            ${demo.description ? `<div class="demo-desc">${demo.description}</div>` : ''}
                        </div>
                        <div class="demo-item-play">▶ Écouter</div>
                    </div>
                `).join('')}
            </div>
        `;
    }
    
    // Mettre à jour les menus de démos
    function updateDemosMenus() {
        // Les menus Prayers et Bhajans ont été supprimés
        // Les démos sont maintenant affichées dans les tableaux sous le clavier
        console.log('Menus de démos supprimés - utilisation des tableaux sous le clavier');
    }
    
    // Jouer une démo (lecture automatique immédiate)
    async function playDemo(filename) {
        try {
            const response = await fetch(`demospubliques/${filename}`);
            if (response.ok) {
                const demo = await response.json();
                
                // Fermer le menu immédiatement pour dégager la vue
                if (window.closeDropdown) {
                    // Les menus Prayers et Bhajans ont été supprimés
                    console.log('Menus fermés - utilisation des tableaux sous le clavier');
                }
                
                // Lecture automatique immédiate
                console.log(`🎵 Lecture automatique de "${demo.name}"`);
                playDemoRecording(demo);
                
            } else {
                console.error('Erreur lors du chargement de la démo');
            }
        } catch (error) {
            console.error('Erreur lors de la lecture:', error);
        }
    }
    
    // Jouer l'enregistrement d'une démo (version optimisée)
    function playDemoRecording(demo) {
        // Arrêter toute lecture en cours
        stopPlayback();
        
        // Marquer qu'on joue depuis un menu
        isPlayingFromMenu = true;
        
        // Nettoyer les touches actives
        document.querySelectorAll('.key.active').forEach(key => {
            if (window.stopNote) {
                window.stopNote(key.dataset.note, key);
            }
        });
        
        // Afficher un indicateur de lecture
        showPlaybackIndicator(demo.name);
        
        // Jouer les notes avec un délai minimal pour la réactivité
        if (demo.data && demo.data.recording) {
            const recording = demo.data.recording;
            let currentTime = 0;
            
            recording.notes.forEach((note, index) => {
                const duration = recording.durations[index] || 500;
                
                // Note ON
                const noteOnTimeout = setTimeout(() => {
                    if (isPlayingFromMenu) { // Vérifier si on joue toujours
                        const key = document.querySelector(`.key[data-note="${note}"]`);
                        if (key && window.playNote) {
                            window.playNote(note, key);
                        }
                    }
                }, currentTime);
                currentPlaybackTimeouts.push(noteOnTimeout);
                
                // Note OFF
                const noteOffTimeout = setTimeout(() => {
                    if (isPlayingFromMenu) { // Vérifier si on joue toujours
                        const key = document.querySelector(`.key[data-note="${note}"]`);
                        if (key && window.stopNote) {
                            window.stopNote(key.dataset.note, key);
                        }
                    }
                }, currentTime + duration);
                currentPlaybackTimeouts.push(noteOffTimeout);
                
                currentTime += duration;
            });
            
            // Arrêt automatique
            const autoStopTimeout = setTimeout(() => {
                if (isPlayingFromMenu) {
                    stopPlayback();
                }
            }, currentTime + 500);
            currentPlaybackTimeouts.push(autoStopTimeout);
        }
    }
    
    // Arrêter la lecture depuis les menus dropdown
    function stopPlayback() {
        console.log('⏹️ Arrêt de la lecture depuis menu dropdown');
        
        // Marquer qu'on ne joue plus
        isPlayingFromMenu = false;
        
        // Annuler tous les timeouts
        currentPlaybackTimeouts.forEach(timeout => clearTimeout(timeout));
        currentPlaybackTimeouts = [];
        
        // Nettoyer les touches actives
        document.querySelectorAll('.key.active').forEach(key => {
            if (window.stopNote) {
                window.stopNote(key.dataset.note, key);
            }
        });
        
        // Masquer l'indicateur
        hidePlaybackIndicator();
        
        // Réinitialiser la barre de lecture sous le clavier
        resetKeyboardPlayerBar();
    }
    
    // Réinitialiser la barre de lecture sous le clavier
    function resetKeyboardPlayerBar() {
        // Réinitialiser le bouton play de la barre de lecture sous le clavier
        const playBtn = document.getElementById('playBtn');
        if (playBtn) {
            playBtn.classList.remove('playing');
            playBtn.innerHTML = '▶ Écouter';
            playBtn.disabled = true; // Désactiver car pas d'enregistrement en cours
        }
        
        // Réinitialiser le bouton stop
        const stopBtn = document.getElementById('stopBtn');
        if (stopBtn) {
            stopBtn.disabled = true;
        }
        
        // Réinitialiser le compteur de temps
        const timeCounter = document.getElementById('timeCounter');
        if (timeCounter) {
            timeCounter.textContent = '00:00';
        }
    }
    
    // Variables globales pour gérer la lecture
    let currentPlaybackTimeouts = [];
    let isPlayingFromMenu = false;
    
    // Afficher un indicateur de lecture
    function showPlaybackIndicator(demoName) {
        // Créer ou mettre à jour l'indicateur
        let indicator = document.getElementById('playback-indicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.id = 'playback-indicator';
            indicator.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(40, 167, 69, 0.9);
                color: white;
                padding: 10px 20px;
                border-radius: 8px;
                font-size: 14px;
                font-weight: 600;
                z-index: 1000;
                box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            `;
            document.body.appendChild(indicator);
        }
        indicator.textContent = `🎵 Lecture: ${demoName}`;
        indicator.style.display = 'block';
    }
    
    // Masquer l'indicateur de lecture
    function hidePlaybackIndicator() {
        const indicator = document.getElementById('playback-indicator');
        if (indicator) {
            indicator.style.display = 'none';
        }
    }
    
    // Initialisation
    async function init() {
        if (config.initialized) return;
        
        console.log('📚 Initialisation du module Demos Loader...');
        
        // Charger les démos
        await loadAllDemos();
        
        // Mettre à jour les menus
        updateDemosMenus();
        
        // Écouter les mises à jour
        window.addEventListener('demosUpdated', async () => {
            console.log('🔄 Mise à jour des menus de démos...');
            await loadAllDemos();
            updateDemosMenus();
        });
        
        config.initialized = true;
        console.log('✅ Module Demos Loader prêt !');
    }
    
    // API publique
    return {
        init: init,
        loadAllDemos: loadAllDemos,
        getDemosByCategory: getDemosByCategory,
        updateDemosMenus: updateDemosMenus,
        playDemo: playDemo,
        stopPlayback: stopPlayback
    };
})();

// Exporter globalement
window.DEMOS_LOADER = DEMOS_LOADER;



================================================================================
FICHIER: piano-soloB/includes/js/menu-handlers.js
================================================================================
// includes/js/menu-handlers.js
// JavaScript centralisé pour les menus - Utilisé par index.php et index-admin.php

// État des menus
let currentDropdown = null;

// Fonction simple pour ouvrir/fermer les menus
function toggleDropdown(menuName) {
    const dropdown = document.getElementById(menuName + '-dropdown');
    
    if (!dropdown) {
        console.error('Menu non trouvé:', menuName);
        return;
    }
    
    // Fermer l'ancien menu si différent
    if (currentDropdown && currentDropdown !== menuName) {
        const oldDropdown = document.getElementById(currentDropdown + '-dropdown');
        if (oldDropdown) oldDropdown.classList.remove('show');
    }
    
    // Toggle le menu actuel
    if (dropdown.classList.contains('show')) {
        dropdown.classList.remove('show');
        currentDropdown = null;
    } else {
        dropdown.classList.add('show');
        currentDropdown = menuName;
    }
}

// Fermer un dropdown par la croix
function closeDropdown(menuName) {
    const dropdown = document.getElementById(menuName + '-dropdown');
    if (dropdown) {
        dropdown.classList.remove('show');
    }
    if (currentDropdown === menuName) {
        currentDropdown = null;
    }
}

// Fonction pour KEY ASSIST avec les 5 modes
function selectKeyMode(mode) {
    console.log('🎹 Mode KEY ASSIST sélectionné:', mode);
    
    // S'assurer que le module NOTATION est disponible
    if (!window.NOTATION_MODULE) {
        console.error('❌ Module NOTATION non disponible');
        alert('Erreur: Module de notation non chargé');
        return;
    }
    
    // Nettoyer les éléments custom des modes précédents
    document.querySelectorAll('.octave-marker').forEach(m => m.remove());
    
    // Nettoyer les styles des touches au cas où
    document.querySelectorAll('.key').forEach(key => {
        if (key.style.position === 'relative') {
            key.style.position = '';
        }
    });
    
    const piano = document.querySelector('.piano-container');
    const pianoElement = document.querySelector('.piano');
    
    if (piano) {
        piano.style.background = '';
        piano.style.animation = '';
        piano.classList.remove('aurora-active');
    }
    
    // Nettoyer le position relative sur le piano
    if (pianoElement && pianoElement.style.position === 'relative') {
        pianoElement.style.position = '';
    }
    
    // Appliquer le nouveau mode
    switch(mode) {
        case 'none':
            window.NOTATION_MODULE.setNotation(0); // Mode 0: aucune
            console.log('✅ Mode: Aucun label');
            break;
            
        case 'labels-en':
            window.NOTATION_MODULE.setNotation(1); // Mode 1: anglaise
            console.log('✅ Mode: Notes en anglais');
            break;
            
        case 'labels-fr':
            window.NOTATION_MODULE.setNotation(2); // Mode 2: française
            console.log('✅ Mode: Notes en français');
            break;
            
        case 'octaves':
            window.NOTATION_MODULE.setNotation(3); // Mode 3: repères Do uniquement
            console.log('✅ Mode: Marqueurs d\'octaves');
            break;
            
        default:
            console.error('❌ Mode inconnu:', mode);
            return;
    }
    
    // Mettre à jour les toggles visuels
    document.querySelectorAll('.toggle-switch').forEach(toggle => {
        toggle.classList.remove('on');
    });
    const activeToggle = document.getElementById('toggle-' + mode);
    if (activeToggle) {
        activeToggle.classList.add('on');
    }
    
    // Fermer le dropdown après sélection
    closeDropdown('keyassist');
}

// Fonction pour les démos
function loadDemo(demoId) {
    console.log('Chargement démo:', demoId);
    closeDropdown(currentDropdown);
    // À implémenter : charger et jouer la séquence de notes
}

// Fonction pour le son
function selectSound(soundId) {
    console.log('Son sélectionné:', soundId);
    
    // Fermer le menu
    closeDropdown('sound');
    
    // Changer le preset via le module harmonium
    if (window.HARMONIUM_MODULE && window.HARMONIUM_MODULE.changePreset) {
        window.HARMONIUM_MODULE.changePreset(soundId);
    } else {
        console.error('Module harmonium non disponible');
    }
}

// Fonction pour changer le périphérique MIDI
function changeMidiDevice(deviceId) {
    console.log('Périphérique MIDI sélectionné:', deviceId);
    // Connecter au module MIDI si disponible
    if (window.MIDI_MODULE && window.MIDI_MODULE.selectDevice) {
        window.MIDI_MODULE.selectDevice(deviceId);
    }
}

// Fonction pour changer le volume
function changeVolume(value) {
    const volumeDisplay = document.getElementById('volume-display');
    if (volumeDisplay) {
        volumeDisplay.textContent = value + '%';
    }
    
    const volume = value / 100;
    console.log('Volume:', value + '%');
    
    // S'assurer que l'audioContext est initialisé
    if (!window.audioContext) {
        console.warn('AudioContext non initialisé, tentative d\'initialisation...');
        if (window.initAudio) {
            window.initAudio();
        }
    }
    
    // Appliquer le volume au contexte audio global
    if (window.audioContext) {
        // Créer un gain master si il n'existe pas
        if (!window.masterGainNode) {
            window.masterGainNode = window.audioContext.createGain();
            window.masterGainNode.connect(window.audioContext.destination);
            console.log('🎵 Master gain node créé');
        }
        window.masterGainNode.gain.setValueAtTime(volume, window.audioContext.currentTime);
        console.log('🎵 Volume appliqué:', volume);
    } else {
        console.error('❌ AudioContext non disponible');
    }
    
    // Appliquer le volume au module harmonium s'il existe
    if (window.HARMONIUM_MODULE && window.HARMONIUM_MODULE.setVolume) {
        window.HARMONIUM_MODULE.setVolume(volume);
    }
    
    // Stocker le volume global
    window.masterVolume = volume;
    
    // Sauvegarder la préférence
    localStorage.setItem('pianoVolume', value);
}

// Exporter les fonctions globalement pour les menus
window.toggleDropdown = toggleDropdown;
window.closeDropdown = closeDropdown;
window.selectKeyMode = selectKeyMode;
window.loadDemo = loadDemo;
window.selectSound = selectSound;
window.changeMidiDevice = changeMidiDevice;
window.changeVolume = changeVolume;

// Fonction de vérification de disponibilité
window.checkMenuFunctions = function() {
    console.log('🔍 Vérification des fonctions de menu:');
    console.log('- toggleDropdown:', typeof window.toggleDropdown);
    console.log('- selectKeyMode:', typeof window.selectKeyMode);
    console.log('- NOTATION_MODULE:', typeof window.NOTATION_MODULE);
    return {
        toggleDropdown: typeof window.toggleDropdown === 'function',
        selectKeyMode: typeof window.selectKeyMode === 'function',
        notationModule: typeof window.NOTATION_MODULE === 'object'
    };
};

// Initialisation au chargement avec gestionnaire de modules
window.addEventListener('DOMContentLoaded', async () => {
    console.log('✅ JavaScript des menus chargé');
    
    // Attendre que le gestionnaire de modules soit disponible
    if (!window.MODULE_MANAGER) {
        console.error('❌ MODULE_MANAGER non disponible');
        return;
    }
    
    // Enregistrer les modules dans l'ordre de dépendances
    if (window.NOTATION_MODULE) {
        MODULE_MANAGER.register('NOTATION_MODULE', async () => {
            if (!window.NOTATION_MODULE.initialized) {
                window.NOTATION_MODULE.init();
                window.NOTATION_MODULE.initialized = true;
            }
            return true;
        }, [], { maxRetries: 2 });
    }
    
    if (window.HARMONIUM_MODULE) {
        MODULE_MANAGER.register('HARMONIUM_MODULE', async () => {
            return await window.HARMONIUM_MODULE.init();
        }, ['NOTATION_MODULE'], { maxRetries: 3 });
    }
    
    if (window.MIDI_MODULE) {
        MODULE_MANAGER.register('MIDI_MODULE', async () => {
            // Initialiser le module MIDI
            if (window.MIDI_MODULE.init) {
                await window.MIDI_MODULE.init();
            }
            
            // Initialiser la liste des périphériques MIDI dans le menu
            if (navigator.requestMIDIAccess) {
                try {
                    const midiAccess = await navigator.requestMIDIAccess();
                    const select = document.getElementById('midi-device-select');
                    if (select) {
                        const inputs = midiAccess.inputs.values();
                        for (let input of inputs) {
                            const option = document.createElement('option');
                            option.value = input.id;
                            option.textContent = input.name;
                            select.appendChild(option);
                        }
                    }
                    return true;
                } catch (err) {
                    console.log('MIDI non disponible:', err);
                    return false; // Pas d'erreur critique
                }
            }
            return true;
        }, ['NOTATION_MODULE'], { maxRetries: 1 });
    }
    
    if (window.RECORDER_MODULE) {
        MODULE_MANAGER.register('RECORDER_MODULE', async () => {
            if (window.RECORDER_MODULE.init) {
                return await window.RECORDER_MODULE.init();
            }
            return true;
        }, ['NOTATION_MODULE'], { maxRetries: 2 });
    }
    
    if (window.SAVE_UPLOAD_MODULE) {
        MODULE_MANAGER.register('SAVE_UPLOAD_MODULE', async () => {
            if (!window.SAVE_UPLOAD_MODULE.initialized) {
                window.SAVE_UPLOAD_MODULE.init();
                window.SAVE_UPLOAD_MODULE.initialized = true;
            }
            return true;
        }, ['RECORDER_MODULE'], { maxRetries: 2 });
    }
    
    if (window.DEMOS_LOADER) {
        MODULE_MANAGER.register('DEMOS_LOADER', async () => {
            return await window.DEMOS_LOADER.init();
        }, ['NOTATION_MODULE'], { maxRetries: 2 });
    }
    
    // Initialiser tous les modules
    try {
        const result = await MODULE_MANAGER.initialize();
        console.log('🎉 Initialisation terminée:', result);
        
        // Appliquer le mode par défaut après initialisation
        setTimeout(() => {
            selectKeyMode('labels-en'); // Mode EN par défaut
            
            // Restaurer le volume sauvegardé
            const savedVolume = localStorage.getItem('pianoVolume');
            if (savedVolume) {
                const volumeSlider = document.getElementById('volume-control');
                if (volumeSlider) {
                    volumeSlider.value = savedVolume;
                    changeVolume(savedVolume);
                }
            }
        }, 200);
        
    } catch (error) {
        console.error('💥 Erreur lors de l\'initialisation:', error);
        
        // Mode dégradé - essayer d'appliquer le mode par défaut quand même
        setTimeout(() => {
            selectKeyMode('labels-en');
        }, 500);
    }
});

// Initialisation des modules admin (seulement si présents)
window.addEventListener('load', function() {
    setTimeout(function() {
        // Vérifier et initialiser SAVE_UPLOAD_MODULE (admin seulement)
        if (window.SAVE_UPLOAD_MODULE && !window.SAVE_UPLOAD_MODULE.initialized) {
            console.log('Initialisation forcée de SAVE_UPLOAD_MODULE');
            window.SAVE_UPLOAD_MODULE.init();
        }
        
        // Vérifier la connexion entre les modules (admin seulement)
        if (window.RECORDER_MODULE && window.SAVE_UPLOAD_MODULE) {
            console.log('✅ Tous les modules admin sont chargés');
        } else {
            console.log('ℹ️ Mode élève - Modules admin non présents');
        }
    }, 3000); // 3 secondes après le chargement
});


================================================================================
FICHIER: piano-soloB/includes/js/module-manager.js
================================================================================
// includes/js/module-manager.js
// Gestionnaire centralisé pour l'initialisation des modules

const MODULE_MANAGER = (function() {
    'use strict';
    
    // Configuration
    const config = {
        modules: [],
        initialized: new Set(),
        failed: new Set(),
        maxRetries: 3,
        retryDelay: 1000
    };
    
    // Ajouter un module avec ses dépendances
    function register(moduleName, initFunction, dependencies = [], options = {}) {
        config.modules.push({
            name: moduleName,
            init: initFunction,
            deps: dependencies,
            retries: 0,
            options: options
        });
        console.log(`📋 Module enregistré: ${moduleName} (dépendances: ${dependencies.join(', ') || 'aucune'})`);
    }
    
    // Trier les modules par dépendances (topological sort)
    function sortByDependencies() {
        const sorted = [];
        const visited = new Set();
        const temp = new Set();
        
        function visit(module) {
            if (temp.has(module.name)) {
                throw new Error(`Dépendance circulaire détectée: ${module.name}`);
            }
            if (visited.has(module.name)) {
                return;
            }
            
            temp.add(module.name);
            
            // Visiter les dépendances d'abord
            for (const depName of module.deps) {
                const dep = config.modules.find(m => m.name === depName);
                if (dep) {
                    visit(dep);
                } else {
                    console.warn(`⚠️ Dépendance manquante: ${depName} pour ${module.name}`);
                }
            }
            
            temp.delete(module.name);
            visited.add(module.name);
            sorted.push(module);
        }
        
        for (const module of config.modules) {
            if (!visited.has(module.name)) {
                visit(module);
            }
        }
        
        return sorted;
    }
    
    // Initialiser un module avec retry
    async function initializeModule(module) {
        const maxRetries = module.options.maxRetries || config.maxRetries;
        const retryDelay = module.options.retryDelay || config.retryDelay;
        
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                console.log(`🔄 Initialisation ${module.name} (tentative ${attempt}/${maxRetries})`);
                
                // Vérifier les dépendances
                for (const depName of module.deps) {
                    if (!config.initialized.has(depName)) {
                        throw new Error(`Dépendance non initialisée: ${depName}`);
                    }
                }
                
                // Initialiser le module
                const result = await module.init();
                config.initialized.add(module.name);
                console.log(`✅ ${module.name} initialisé avec succès`);
                return result;
                
            } catch (error) {
                console.error(`❌ Erreur ${module.name} (tentative ${attempt}):`, error.message);
                
                if (attempt === maxRetries) {
                    config.failed.add(module.name);
                    console.error(`💥 ${module.name} a échoué après ${maxRetries} tentatives`);
                    
                    // Mode dégradé si option activée
                    if (module.options.fallback) {
                        console.log(`🛡️ Activation du mode dégradé pour ${module.name}`);
                        try {
                            await module.options.fallback();
                            console.log(`✅ Mode dégradé activé pour ${module.name}`);
                        } catch (fallbackError) {
                            console.error(`💥 Mode dégradé échoué pour ${module.name}:`, fallbackError);
                        }
                    }
                    return false;
                }
                
                // Attendre avant de réessayer
                await new Promise(resolve => setTimeout(resolve, retryDelay));
            }
        }
    }
    
    // Initialiser tous les modules
    async function initialize() {
        console.log('🚀 Début de l\'initialisation des modules...');
        
        try {
            const sortedModules = sortByDependencies();
            console.log('📋 Ordre d\'initialisation:', sortedModules.map(m => m.name).join(' → '));
            
            for (const module of sortedModules) {
                await initializeModule(module);
            }
            
            // Rapport final
            const successCount = config.initialized.size;
            const failCount = config.failed.size;
            const totalCount = config.modules.length;
            
            console.log(`📊 Rapport d'initialisation:`);
            console.log(`   ✅ Succès: ${successCount}/${totalCount}`);
            console.log(`   ❌ Échecs: ${failCount}/${totalCount}`);
            
            if (failCount > 0) {
                console.log(`   💥 Modules échoués:`, Array.from(config.failed));
            }
            
            return {
                success: successCount,
                failed: failCount,
                total: totalCount,
                initialized: Array.from(config.initialized),
                failed: Array.from(config.failed)
            };
            
        } catch (error) {
            console.error('💥 Erreur critique lors de l\'initialisation:', error);
            throw error;
        }
    }
    
    // Vérifier l'état d'un module
    function isInitialized(moduleName) {
        return config.initialized.has(moduleName);
    }
    
    // Obtenir le statut global
    function getStatus() {
        return {
            initialized: Array.from(config.initialized),
            failed: Array.from(config.failed),
            pending: config.modules.filter(m => 
                !config.initialized.has(m.name) && !config.failed.has(m.name)
            ).map(m => m.name)
        };
    }
    
    // API publique
    return {
        register: register,
        initialize: initialize,
        isInitialized: isInitialized,
        getStatus: getStatus
    };
    
})();

// Exporter globalement
window.MODULE_MANAGER = MODULE_MANAGER;



================================================================================
FICHIER: piano-soloB/demospubliques/demos.json
================================================================================
[]


================================================================================
FICHIER: piano-soloB/demospubliques/prayers/index.json
================================================================================
[]


================================================================================
FICHIER: piano-soloB/demospubliques/brouillon/demo_demo_minuit_passe_1755128463_5_1755128918_f0105bd9be37b54a.json
================================================================================
{
    "id": "1755128463_578ca813dd57324c",
    "filename": "demo_minuit_passe_1755128463_578ca813dd57324c.json",
    "originalName": "demo_minuit_passe_1755128463_578ca813dd57324c.json",
    "created": "2025-08-13T23:41:03+00:00",
    "status": "a_classer",
    "data": {
        "name": "demo_minuit_passe_1755128463_578ca813dd57324c.json",
        "category": "brouillon",
        "description": "Enregistrement direct depuis le piano",
        "recording": {
            "notes": [
                {
                    "note": "G3",
                    "time": 1012,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "G3",
                    "time": 1156,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "A#3",
                    "time": 1369,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "A#3",
                    "time": 1412,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "A#3",
                    "time": 1542,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "A#3",
                    "time": 1673,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "D4",
                    "time": 1765,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "D4",
                    "time": 1893,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "A#3",
                    "time": 1918,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "A#3",
                    "time": 2004,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "G3",
                    "time": 2146,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "G3",
                    "time": 2251,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "A#3",
                    "time": 2348,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "A#3",
                    "time": 2455,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "D4",
                    "time": 2510,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "D4",
                    "time": 2622,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "A#3",
                    "time": 2721,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "A#3",
                    "time": 2848,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "G3",
                    "time": 2882,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "G3",
                    "time": 3005,
                    "type": "off",
                    "velocity": 0
                }
            ],
            "durations": [
                1012,
                1156,
                1369,
                1412,
                1542,
                1673,
                1765,
                1893,
                1918,
                2004,
                2146,
                2251,
                2348,
                2455,
                2510,
                2622,
                2721,
                2848,
                2882,
                3005
            ],
            "timestamp": 1755128463629
        },
        "uploadedAt": "2025-08-13T23:41:03.629Z"
    }
}


================================================================================
FICHIER: piano-soloB/demospubliques/brouillon/demo_intro_01_1755168312_f993d265858e3997.json
================================================================================
{
    "id": "1755168312_f993d265858e3997",
    "filename": "demo_intro_01_1755168312_f993d265858e3997.json",
    "originalName": "intro 01",
    "created": "2025-08-14T10:45:12+00:00",
    "status": "a_classer",
    "data": {
        "name": "intro 01",
        "category": "brouillon",
        "description": "Enregistrement direct depuis le piano",
        "recording": {
            "notes": [
                {
                    "note": "C3",
                    "time": 1860,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "C#3",
                    "time": 3162,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "C3",
                    "time": 3274,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "E3",
                    "time": 4377,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "F3",
                    "time": 4391,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "C#3",
                    "time": 4425,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "F3",
                    "time": 4503,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C3",
                    "time": 5922,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "E3",
                    "time": 6191,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C3",
                    "time": 7399,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "D4",
                    "time": 7971,
                    "type": "off",
                    "velocity": 0
                }
            ],
            "durations": [
                1860,
                3162,
                3274,
                4377,
                4391,
                4425,
                4503,
                5922,
                6191,
                7399,
                7971
            ],
            "timestamp": 1755168312144
        },
        "uploadedAt": "2025-08-14T10:45:12.144Z"
    }
}


================================================================================
FICHIER: piano-soloB/demospubliques/brouillon/demo_popo_1755164462_5267806be685aa9b.json
================================================================================
{
    "id": "1755164462_5267806be685aa9b",
    "filename": "demo_popo_1755164462_5267806be685aa9b.json",
    "originalName": "popo",
    "created": "2025-08-14T09:41:02+00:00",
    "status": "a_classer",
    "data": {
        "name": "popo",
        "category": "brouillon",
        "description": "Enregistrement direct depuis le piano",
        "recording": {
            "notes": [
                {
                    "note": "C4",
                    "time": 642,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "C4",
                    "time": 728,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C4",
                    "time": 1082,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "C4",
                    "time": 1175,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C4",
                    "time": 1216,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C#4",
                    "time": 1249,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "D4",
                    "time": 1458,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "D4",
                    "time": 1544,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "D4",
                    "time": 1632,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C#4",
                    "time": 1817,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "C#4",
                    "time": 1911,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C#4",
                    "time": 2065,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C4",
                    "time": 2217,
                    "type": "on",
                    "velocity": 80
                },
                {
                    "note": "C4",
                    "time": 2320,
                    "type": "off",
                    "velocity": 0
                },
                {
                    "note": "C4",
                    "time": 2632,
                    "type": "off",
                    "velocity": 0
                }
            ],
            "durations": [
                642,
                728,
                1082,
                1175,
                1216,
                1249,
                1458,
                1544,
                1632,
                1817,
                1911,
                2065,
                2217,
                2320,
                2632
            ],
            "timestamp": 1755164462989
        },
        "uploadedAt": "2025-08-14T09:41:02.989Z"
    }
}


================================================================================
FICHIER: piano-soloB/demospubliques/brouillon/index.json
================================================================================
{
    "category": "brouillon",
    "description": "Zone de staging pour les démos avant validation",
    "created": "2025-08-12T15:48:00Z",
    "demos": [
        {
            "id": "1755128918_686ebad71555523a",
            "filename": "demo_demo_minuit_passe_1755128463_5_1755128918_f0105bd9be37b54a.json",
            "originalName": "demo_minuit_passe_1755128463_578ca813dd57324c.json",
            "created": "2025-08-13T23:48:38+00:00",
            "status": "a_classer"
        },
        {
            "id": "1755164462_5267806be685aa9b",
            "filename": "demo_popo_1755164462_5267806be685aa9b.json",
            "originalName": "popo",
            "created": "2025-08-14T09:41:02+00:00",
            "status": "a_classer",
            "data": {
                "name": "popo",
                "category": "brouillon",
                "description": "Enregistrement direct depuis le piano",
                "recording": {
                    "notes": [
                        {
                            "note": "C4",
                            "time": 642,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "C4",
                            "time": 728,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C4",
                            "time": 1082,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "C4",
                            "time": 1175,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C4",
                            "time": 1216,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C#4",
                            "time": 1249,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "D4",
                            "time": 1458,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "D4",
                            "time": 1544,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "D4",
                            "time": 1632,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C#4",
                            "time": 1817,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "C#4",
                            "time": 1911,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C#4",
                            "time": 2065,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C4",
                            "time": 2217,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "C4",
                            "time": 2320,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C4",
                            "time": 2632,
                            "type": "off",
                            "velocity": 0
                        }
                    ],
                    "durations": [
                        642,
                        728,
                        1082,
                        1175,
                        1216,
                        1249,
                        1458,
                        1544,
                        1632,
                        1817,
                        1911,
                        2065,
                        2217,
                        2320,
                        2632
                    ],
                    "timestamp": 1755164462989
                },
                "uploadedAt": "2025-08-14T09:41:02.989Z"
            }
        },
        {
            "id": "1755168312_f993d265858e3997",
            "filename": "demo_intro_01_1755168312_f993d265858e3997.json",
            "originalName": "intro 01",
            "created": "2025-08-14T10:45:12+00:00",
            "status": "a_classer",
            "data": {
                "name": "intro 01",
                "category": "brouillon",
                "description": "Enregistrement direct depuis le piano",
                "recording": {
                    "notes": [
                        {
                            "note": "C3",
                            "time": 1860,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "C#3",
                            "time": 3162,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "C3",
                            "time": 3274,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "E3",
                            "time": 4377,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "F3",
                            "time": 4391,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "C#3",
                            "time": 4425,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "F3",
                            "time": 4503,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C3",
                            "time": 5922,
                            "type": "on",
                            "velocity": 80
                        },
                        {
                            "note": "E3",
                            "time": 6191,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "C3",
                            "time": 7399,
                            "type": "off",
                            "velocity": 0
                        },
                        {
                            "note": "D4",
                            "time": 7971,
                            "type": "off",
                            "velocity": 0
                        }
                    ],
                    "durations": [
                        1860,
                        3162,
                        3274,
                        4377,
                        4391,
                        4425,
                        4503,
                        5922,
                        6191,
                        7399,
                        7971
                    ],
                    "timestamp": 1755168312144
                },
                "uploadedAt": "2025-08-14T10:45:12.144Z"
            }
        }
    ]
}


================================================================================
FICHIER: piano-soloB/demospubliques/bhajans/index.json
================================================================================
[]

